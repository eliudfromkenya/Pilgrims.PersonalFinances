// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pilgrims.PersonalFinances.Data;

#nullable disable

namespace Pilgrims.PersonalFinances.Core.Migrations
{
    [DbContext(typeof(PersonalFinanceContext))]
    [Migration("20251014062631_RefactorIdsAndGlobals")]
    partial class RefactorIdsAndGlobals
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("BudgetDebt", b =>
                {
                    b.Property<string>("RelatedBudgetsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedDebtsId")
                        .HasColumnType("TEXT");

                    b.HasKey("RelatedBudgetsId", "RelatedDebtsId");

                    b.HasIndex("RelatedDebtsId");

                    b.ToTable("BudgetDebt");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountHolder")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BrokerName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InitialBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastReconciledDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinimumPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReconciledBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StatementDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasFilter("[AccountNumber] IS NOT NULL");

                    b.HasIndex("AccountType");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AccountTypeDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("EnumValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnumValue")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("AccountTypeDefinitions");

                    b.HasData(
                        new
                        {
                            Id = "acc-type-1",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A standard checking account for daily transactions.",
                            EnumValue = 1,
                            Icon = "🏦",
                            IsActive = true,
                            IsDirty = false,
                            Name = "Checking Account"
                        },
                        new
                        {
                            Id = "acc-type-2",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A savings account typically used for saving money.",
                            EnumValue = 2,
                            Icon = "💰",
                            IsActive = true,
                            IsDirty = false,
                            Name = "Savings Account"
                        },
                        new
                        {
                            Id = "acc-type-3",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Represents cash held physically or in simple cash accounts.",
                            EnumValue = 3,
                            Icon = "💵",
                            IsActive = true,
                            IsDirty = false,
                            Name = "Cash Account"
                        },
                        new
                        {
                            Id = "acc-type-4",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A credit card account used for purchases.",
                            EnumValue = 4,
                            Icon = "💳",
                            IsActive = true,
                            IsDirty = false,
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = "acc-type-5",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "An investment account for stocks, bonds, and other assets.",
                            EnumValue = 5,
                            Icon = "📈",
                            IsActive = true,
                            IsDirty = false,
                            Name = "Investment Account"
                        },
                        new
                        {
                            Id = "acc-type-6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "An account representing loans with balances owed.",
                            EnumValue = 6,
                            Icon = "🏠",
                            IsActive = true,
                            IsDirty = false,
                            Name = "Loan Account"
                        },
                        new
                        {
                            Id = "acc-type-7",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A general credit account representing lines of credit.",
                            EnumValue = 7,
                            Icon = "💳",
                            IsActive = true,
                            IsDirty = false,
                            Name = "Credit Account"
                        },
                        new
                        {
                            Id = "acc-type-8",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Other types of accounts not categorized above.",
                            EnumValue = 8,
                            Icon = "📋",
                            IsActive = true,
                            IsDirty = false,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ApplicationSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyDecimalPlaces")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastUpdatedVersion")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowCurrencyCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Asset", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetCategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetRegisterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CurrentValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DepreciationMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DepreciationRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DisposalDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DisposalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceDocumentPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PurchaseTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SalvageValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsefulLifeYears")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WarrantyPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("PurchaseTransactionId");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultDepreciationMethod")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DefaultDepreciationRate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultUsefulLifeYears")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AssetCategories");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetRegisterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetRegisterId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long?>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetRegisterId");

                    b.HasIndex("AssetRegisterId1");

                    b.ToTable("AssetDocuments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetInsurance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentContact")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AnnualPremium")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoRenewal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificatePath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ClaimsCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CoverageAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CoverageDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Deductible")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceProvider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastClaimDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MonthlyPremium")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentFrequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyDocumentPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PolicyEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PolicyStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryBeneficiary")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryBeneficiary")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TotalClaimsAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("IsActive");

                    b.HasIndex("PolicyEndDate");

                    b.HasIndex("PolicyNumber");

                    b.HasIndex("ScheduledTransactionId");

                    b.ToTable("AssetInsurances");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetMaintenance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("HoursAtService")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LaborCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MileageAtService")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextServiceDue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NextServiceHours")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NextServiceMileage")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PartsCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceProvider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceProviderContact")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceReportPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("WarrantyDetails")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("WarrantyExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WarrantyMileage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("NextServiceDue");

                    b.HasIndex("ServiceDate");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId");

                    b.ToTable("AssetMaintenances");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetRegister", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalDocumentsPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificatesPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InsuranceCoverage")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsurancePolicyPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InsurancePremium")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceProvider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InsuranceStartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceSchedule")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ManualPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseReceiptPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Vendor")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("WarrantyDocumentPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("WarrantyProvider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("WarrantyTerms")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.ToTable("AssetRegisters");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AuditEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuditLogId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSensitive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AuditLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Budget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlertLevels")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("AlertsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowOverspend")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableRollover")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GoalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoalId1")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastAlertLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LimitAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RolloverAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SpentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EndDate");

                    b.HasIndex("GoalId1");

                    b.HasIndex("IsActive");

                    b.HasIndex("StartDate");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.BudgetAlert", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AlertLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BudgetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BudgetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Severity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SpentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThresholdPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UsedPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.ToTable("BudgetAlerts");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.BudgetCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AllocatedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BudgetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BudgetId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SpentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetId1");

                    b.HasIndex("CategoryId");

                    b.HasIndex("BudgetId", "CategoryId")
                        .IsUnique();

                    b.ToTable("BudgetCategories");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ColorCode = "#FF6B6B",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDirty = true,
                            Name = "Debt Payment",
                            UpdatedAt = new DateTime(2025, 10, 14, 6, 26, 29, 156, DateTimeKind.Utc).AddTicks(9189)
                        },
                        new
                        {
                            Id = "2",
                            ColorCode = "#FF4757",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDirty = true,
                            Name = "Interest",
                            UpdatedAt = new DateTime(2025, 10, 14, 6, 26, 29, 156, DateTimeKind.Utc).AddTicks(9834)
                        },
                        new
                        {
                            Id = "3",
                            ColorCode = "#FF3838",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDirty = true,
                            Name = "Credit Card",
                            UpdatedAt = new DateTime(2025, 10, 14, 6, 26, 29, 156, DateTimeKind.Utc).AddTicks(9841)
                        });
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Creditor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerServicePhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Creditors");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISOCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SymbolOrSign")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Country = "Afghanistan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Afghani",
                            ISOCode = "AFN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "؋"
                        },
                        new
                        {
                            Id = "2",
                            Country = "Albania",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Lek",
                            ISOCode = "ALL",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "L"
                        },
                        new
                        {
                            Id = "3",
                            Country = "Algeria",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Algerian Dinar",
                            ISOCode = "DZD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "دج"
                        },
                        new
                        {
                            Id = "4",
                            Country = "Andorra",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (no national currency)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "5",
                            Country = "Angola",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Kwanza",
                            ISOCode = "AOA",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Kz"
                        },
                        new
                        {
                            Id = "6",
                            Country = "Antigua & Barbuda",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "East Caribbean Dollar",
                            ISOCode = "XCD",
                            IsDirty = false,
                            Notes = "Shared currency (Eastern Caribbean)",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "7",
                            Country = "Argentina",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Argentine Peso",
                            ISOCode = "ARS",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "8",
                            Country = "Armenia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Armenian Dram",
                            ISOCode = "AMD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "֏"
                        },
                        new
                        {
                            Id = "9",
                            Country = "Australia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Australian Dollar",
                            ISOCode = "AUD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "10",
                            Country = "Austria",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "11",
                            Country = "Azerbaijan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Azerbaijani Manat",
                            ISOCode = "AZN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₼"
                        },
                        new
                        {
                            Id = "12",
                            Country = "Bahamas",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Bahamian Dollar",
                            ISOCode = "BSD",
                            IsDirty = false,
                            Notes = "Pegged 1:1 USD",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "13",
                            Country = "Bahrain",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Bahraini Dinar",
                            ISOCode = "BHD",
                            IsDirty = false,
                            Notes = "Pegged to USD",
                            SymbolOrSign = ".د.ب"
                        },
                        new
                        {
                            Id = "14",
                            Country = "Bangladesh",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Taka",
                            ISOCode = "BDT",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "৳"
                        },
                        new
                        {
                            Id = "15",
                            Country = "Barbados",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Barbadian Dollar",
                            ISOCode = "BBD",
                            IsDirty = false,
                            Notes = "Pegged 2:1 USD",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "16",
                            Country = "Belarus",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Belarusian Ruble",
                            ISOCode = "BYN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Br"
                        },
                        new
                        {
                            Id = "17",
                            Country = "Belgium",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "18",
                            Country = "Belize",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Belize Dollar",
                            ISOCode = "BZD",
                            IsDirty = false,
                            Notes = "Pegged 2:1 USD",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "19",
                            Country = "Benin",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "West African CFA Franc",
                            ISOCode = "XOF",
                            IsDirty = false,
                            Notes = "Shared currency (West African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "20",
                            Country = "Bhutan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Ngultrum",
                            ISOCode = "BTN",
                            IsDirty = false,
                            Notes = "Pegged 1:1 INR",
                            SymbolOrSign = "Nu."
                        },
                        new
                        {
                            Id = "21",
                            Country = "Bolivia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Boliviano",
                            ISOCode = "BOB",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Bs."
                        },
                        new
                        {
                            Id = "22",
                            Country = "Bosnia & Herzegovina",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Convertible Mark",
                            ISOCode = "BAM",
                            IsDirty = false,
                            Notes = "Pegged to EUR",
                            SymbolOrSign = "KM"
                        },
                        new
                        {
                            Id = "23",
                            Country = "Botswana",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Pula",
                            ISOCode = "BWP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "P"
                        },
                        new
                        {
                            Id = "24",
                            Country = "Brazil",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Brazilian Real",
                            ISOCode = "BRL",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "R$"
                        },
                        new
                        {
                            Id = "25",
                            Country = "Brunei",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Brunei Dollar",
                            ISOCode = "BND",
                            IsDirty = false,
                            Notes = "Pegged to SGD",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "26",
                            Country = "Bulgaria",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Bulgarian Lev",
                            ISOCode = "BGN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "лв"
                        },
                        new
                        {
                            Id = "27",
                            Country = "Burkina Faso",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "West African CFA Franc",
                            ISOCode = "XOF",
                            IsDirty = false,
                            Notes = "Shared currency (West African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "28",
                            Country = "Burundi",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Burundian Franc",
                            ISOCode = "BIF",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "29",
                            Country = "Cambodia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Riel",
                            ISOCode = "KHR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "៛"
                        },
                        new
                        {
                            Id = "30",
                            Country = "Cameroon",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Central African CFA Franc",
                            ISOCode = "XAF",
                            IsDirty = false,
                            Notes = "Shared currency (Central African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "31",
                            Country = "Canada",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Canadian Dollar",
                            ISOCode = "CAD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "32",
                            Country = "Cape Verde",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Cape Verdean Escudo",
                            ISOCode = "CVE",
                            IsDirty = false,
                            Notes = "Pegged to EUR",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "33",
                            Country = "Central African Republic",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Central African CFA Franc",
                            ISOCode = "XAF",
                            IsDirty = false,
                            Notes = "Shared currency (Central African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "34",
                            Country = "Chad",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Central African CFA Franc",
                            ISOCode = "XAF",
                            IsDirty = false,
                            Notes = "Shared currency (Central African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "35",
                            Country = "Chile",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Chilean Peso",
                            ISOCode = "CLP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "36",
                            Country = "China",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Renminbi (Yuan)",
                            ISOCode = "CNY",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "¥"
                        },
                        new
                        {
                            Id = "37",
                            Country = "Colombia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Colombian Peso",
                            ISOCode = "COP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "38",
                            Country = "Comoros",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Comorian Franc",
                            ISOCode = "KMF",
                            IsDirty = false,
                            Notes = "Pegged to EUR",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "39",
                            Country = "Congo (DRC)",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Congolese Franc",
                            ISOCode = "CDF",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "40",
                            Country = "Congo (Republic)",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Central African CFA Franc",
                            ISOCode = "XAF",
                            IsDirty = false,
                            Notes = "Shared currency (Central African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "41",
                            Country = "Costa Rica",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Costa Rican Colón",
                            ISOCode = "CRC",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₡"
                        },
                        new
                        {
                            Id = "42",
                            Country = "Croatia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Adopted EUR in 2023",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "43",
                            Country = "Cuba",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Cuban Peso",
                            ISOCode = "CUP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "44",
                            Country = "Cyprus",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "45",
                            Country = "Czech Republic",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Czech Koruna",
                            ISOCode = "CZK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Kč"
                        },
                        new
                        {
                            Id = "46",
                            Country = "Denmark",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Danish Krone",
                            ISOCode = "DKK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "kr"
                        },
                        new
                        {
                            Id = "47",
                            Country = "Djibouti",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Djiboutian Franc",
                            ISOCode = "DJF",
                            IsDirty = false,
                            Notes = "Pegged to USD",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "48",
                            Country = "Dominica",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "East Caribbean Dollar",
                            ISOCode = "XCD",
                            IsDirty = false,
                            Notes = "Shared currency (Eastern Caribbean)",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "49",
                            Country = "Dominican Republic",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Dominican Peso",
                            ISOCode = "DOP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "50",
                            Country = "Ecuador",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "US Dollar",
                            ISOCode = "USD",
                            IsDirty = false,
                            Notes = "Dollarized economy",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "51",
                            Country = "Egypt",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Egyptian Pound",
                            ISOCode = "EGP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "£ / ج.م"
                        },
                        new
                        {
                            Id = "52",
                            Country = "El Salvador",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "US Dollar / Bitcoin",
                            ISOCode = "USD / BTC",
                            IsDirty = false,
                            Notes = "Officially USD + BTC",
                            SymbolOrSign = "$ / ₿"
                        },
                        new
                        {
                            Id = "53",
                            Country = "Equatorial Guinea",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Central African CFA Franc",
                            ISOCode = "XAF",
                            IsDirty = false,
                            Notes = "Shared currency (Central African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "54",
                            Country = "Eritrea",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Nakfa",
                            ISOCode = "ERN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Nfk"
                        },
                        new
                        {
                            Id = "55",
                            Country = "Estonia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "56",
                            Country = "Eswatini (Swaziland)",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Lilangeni",
                            ISOCode = "SZL",
                            IsDirty = false,
                            Notes = "Pegged to ZAR",
                            SymbolOrSign = "E"
                        },
                        new
                        {
                            Id = "57",
                            Country = "Ethiopia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Ethiopian Birr",
                            ISOCode = "ETB",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Br"
                        },
                        new
                        {
                            Id = "58",
                            Country = "Fiji",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Fijian Dollar",
                            ISOCode = "FJD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "59",
                            Country = "Finland",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "60",
                            Country = "France",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "61",
                            Country = "Gabon",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Central African CFA Franc",
                            ISOCode = "XAF",
                            IsDirty = false,
                            Notes = "Shared currency (Central African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "62",
                            Country = "Gambia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Gambian Dalasi",
                            ISOCode = "GMD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "D"
                        },
                        new
                        {
                            Id = "63",
                            Country = "Georgia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Georgian Lari",
                            ISOCode = "GEL",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₾"
                        },
                        new
                        {
                            Id = "64",
                            Country = "Germany",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "65",
                            Country = "Ghana",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Ghanaian Cedi",
                            ISOCode = "GHS",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₵"
                        },
                        new
                        {
                            Id = "66",
                            Country = "Greece",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "67",
                            Country = "Grenada",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "East Caribbean Dollar",
                            ISOCode = "XCD",
                            IsDirty = false,
                            Notes = "Shared currency (Eastern Caribbean)",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "68",
                            Country = "Guatemala",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Guatemalan Quetzal",
                            ISOCode = "GTQ",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Q"
                        },
                        new
                        {
                            Id = "69",
                            Country = "Guinea",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Guinean Franc",
                            ISOCode = "GNF",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "70",
                            Country = "Guinea-Bissau",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "West African CFA Franc",
                            ISOCode = "XOF",
                            IsDirty = false,
                            Notes = "Shared currency (West African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "71",
                            Country = "Guyana",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Guyanese Dollar",
                            ISOCode = "GYD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "72",
                            Country = "Haiti",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Haitian Gourde",
                            ISOCode = "HTG",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "G"
                        },
                        new
                        {
                            Id = "73",
                            Country = "Honduras",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Honduran Lempira",
                            ISOCode = "HNL",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "L"
                        },
                        new
                        {
                            Id = "74",
                            Country = "Hungary",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Hungarian Forint",
                            ISOCode = "HUF",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Ft"
                        },
                        new
                        {
                            Id = "75",
                            Country = "Iceland",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Icelandic Krona",
                            ISOCode = "ISK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "kr"
                        },
                        new
                        {
                            Id = "76",
                            Country = "India",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Indian Rupee",
                            ISOCode = "INR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₹"
                        },
                        new
                        {
                            Id = "77",
                            Country = "Indonesia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Indonesian Rupiah",
                            ISOCode = "IDR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Rp"
                        },
                        new
                        {
                            Id = "78",
                            Country = "Iran",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Iranian Rial",
                            ISOCode = "IRR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "﷼"
                        },
                        new
                        {
                            Id = "79",
                            Country = "Iraq",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Iraqi Dinar",
                            ISOCode = "IQD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "ع.د"
                        },
                        new
                        {
                            Id = "80",
                            Country = "Ireland",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "81",
                            Country = "Israel",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Israeli New Shekel",
                            ISOCode = "ILS",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₪"
                        },
                        new
                        {
                            Id = "82",
                            Country = "Italy",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "83",
                            Country = "Ivory Coast (Côte d'Ivoire)",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "West African CFA Franc",
                            ISOCode = "XOF",
                            IsDirty = false,
                            Notes = "Shared currency (West African Union)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "84",
                            Country = "Jamaica",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Jamaican Dollar",
                            ISOCode = "JMD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "85",
                            Country = "Japan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Japanese Yen",
                            ISOCode = "JPY",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "¥"
                        },
                        new
                        {
                            Id = "86",
                            Country = "Jordan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Jordanian Dinar",
                            ISOCode = "JOD",
                            IsDirty = false,
                            Notes = "Pegged to USD",
                            SymbolOrSign = "د.ا"
                        },
                        new
                        {
                            Id = "87",
                            Country = "Kazakhstan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Kazakhstani Tenge",
                            ISOCode = "KZT",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₸"
                        },
                        new
                        {
                            Id = "88",
                            Country = "Kenya",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Kenyan Shilling",
                            ISOCode = "KES",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Ksh"
                        },
                        new
                        {
                            Id = "89",
                            Country = "Kiribati",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Australian Dollar",
                            ISOCode = "AUD",
                            IsDirty = false,
                            Notes = "Uses foreign currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "90",
                            Country = "Korea, North",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "North Korean Won",
                            ISOCode = "KPW",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₩"
                        },
                        new
                        {
                            Id = "91",
                            Country = "Korea, South",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "South Korean Won",
                            ISOCode = "KRW",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₩"
                        },
                        new
                        {
                            Id = "92",
                            Country = "Kuwait",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Kuwaiti Dinar",
                            ISOCode = "KWD",
                            IsDirty = false,
                            Notes = "One of the strongest currencies",
                            SymbolOrSign = "د.ك"
                        },
                        new
                        {
                            Id = "93",
                            Country = "Kyrgyzstan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Kyrgyzstani Som",
                            ISOCode = "KGS",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "с"
                        },
                        new
                        {
                            Id = "94",
                            Country = "Laos",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Lao Kip",
                            ISOCode = "LAK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₭"
                        },
                        new
                        {
                            Id = "95",
                            Country = "Latvia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "96",
                            Country = "Lebanon",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Lebanese Pound",
                            ISOCode = "LBP",
                            IsDirty = false,
                            Notes = "Pegged/managed",
                            SymbolOrSign = "ل.ل"
                        },
                        new
                        {
                            Id = "97",
                            Country = "Lesotho",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Lesotho Loti",
                            ISOCode = "LSL",
                            IsDirty = false,
                            Notes = "Pegged to South African Rand",
                            SymbolOrSign = "L"
                        },
                        new
                        {
                            Id = "98",
                            Country = "Liberia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Liberian Dollar",
                            ISOCode = "LRD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "99",
                            Country = "Libya",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Libyan Dinar",
                            ISOCode = "LYD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "ل.د"
                        },
                        new
                        {
                            Id = "100",
                            Country = "Liechtenstein",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Swiss Franc",
                            ISOCode = "CHF",
                            IsDirty = false,
                            Notes = "Uses foreign currency",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "101",
                            Country = "Lithuania",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "102",
                            Country = "Luxembourg",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "103",
                            Country = "Madagascar",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Malagasy Ariary",
                            ISOCode = "MGA",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Ar"
                        },
                        new
                        {
                            Id = "104",
                            Country = "Malawi",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Malawian Kwacha",
                            ISOCode = "MWK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "MK"
                        },
                        new
                        {
                            Id = "105",
                            Country = "Malaysia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Malaysian Ringgit",
                            ISOCode = "MYR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "RM"
                        },
                        new
                        {
                            Id = "106",
                            Country = "Maldives",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Maldivian Rufiyaa",
                            ISOCode = "MVR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Rf"
                        },
                        new
                        {
                            Id = "107",
                            Country = "Mali",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "West African CFA Franc",
                            ISOCode = "XOF",
                            IsDirty = false,
                            Notes = "Shared currency (WAEMU)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "108",
                            Country = "Malta",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "109",
                            Country = "Marshall Islands",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "United States Dollar",
                            ISOCode = "USD",
                            IsDirty = false,
                            Notes = "Uses foreign currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "110",
                            Country = "Mauritania",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Mauritanian Ouguiya",
                            ISOCode = "MRU",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "UM"
                        },
                        new
                        {
                            Id = "111",
                            Country = "Mauritius",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Mauritian Rupee",
                            ISOCode = "MUR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₨"
                        },
                        new
                        {
                            Id = "112",
                            Country = "Mexico",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Mexican Peso",
                            ISOCode = "MXN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "113",
                            Country = "Micronesia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "United States Dollar",
                            ISOCode = "USD",
                            IsDirty = false,
                            Notes = "Uses foreign currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "114",
                            Country = "Moldova",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Moldovan Leu",
                            ISOCode = "MDL",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "L"
                        },
                        new
                        {
                            Id = "115",
                            Country = "Monaco",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "116",
                            Country = "Mongolia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Mongolian Tögrög",
                            ISOCode = "MNT",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₮"
                        },
                        new
                        {
                            Id = "117",
                            Country = "Montenegro",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (not official EU member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "118",
                            Country = "Morocco",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Moroccan Dirham",
                            ISOCode = "MAD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "د.م"
                        },
                        new
                        {
                            Id = "119",
                            Country = "Mozambique",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Mozambican Metical",
                            ISOCode = "MZN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "MT"
                        },
                        new
                        {
                            Id = "120",
                            Country = "Myanmar",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Burmese Kyat",
                            ISOCode = "MMK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "K"
                        },
                        new
                        {
                            Id = "121",
                            Country = "Namibia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Namibian Dollar",
                            ISOCode = "NAD",
                            IsDirty = false,
                            Notes = "Pegged to South African Rand",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "122",
                            Country = "Nauru",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Australian Dollar",
                            ISOCode = "AUD",
                            IsDirty = false,
                            Notes = "Uses foreign currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "123",
                            Country = "Nepal",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Nepalese Rupee",
                            ISOCode = "NPR",
                            IsDirty = false,
                            Notes = "Pegged to Indian Rupee",
                            SymbolOrSign = "₨"
                        },
                        new
                        {
                            Id = "124",
                            Country = "Netherlands",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "125",
                            Country = "New Zealand",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "New Zealand Dollar",
                            ISOCode = "NZD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "126",
                            Country = "Nicaragua",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Nicaraguan Córdoba",
                            ISOCode = "NIO",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "C$"
                        },
                        new
                        {
                            Id = "127",
                            Country = "Niger",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "West African CFA Franc",
                            ISOCode = "XOF",
                            IsDirty = false,
                            Notes = "Shared currency (WAEMU)",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "128",
                            Country = "Nigeria",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Nigerian Naira",
                            ISOCode = "NGN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₦"
                        },
                        new
                        {
                            Id = "129",
                            Country = "North Macedonia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Macedonian Denar",
                            ISOCode = "MKD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "ден"
                        },
                        new
                        {
                            Id = "130",
                            Country = "Norway",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Norwegian Krone",
                            ISOCode = "NOK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "kr"
                        },
                        new
                        {
                            Id = "131",
                            Country = "Oman",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Omani Rial",
                            ISOCode = "OMR",
                            IsDirty = false,
                            Notes = "Pegged to USD",
                            SymbolOrSign = "ر.ع."
                        },
                        new
                        {
                            Id = "132",
                            Country = "Pakistan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Pakistani Rupee",
                            ISOCode = "PKR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₨"
                        },
                        new
                        {
                            Id = "133",
                            Country = "Palau",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "United States Dollar",
                            ISOCode = "USD",
                            IsDirty = false,
                            Notes = "Uses foreign currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "134",
                            Country = "Panama",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Panamanian Balboa",
                            ISOCode = "PAB",
                            IsDirty = false,
                            Notes = "Pegged to USD (also uses USD)",
                            SymbolOrSign = "B/."
                        },
                        new
                        {
                            Id = "135",
                            Country = "Papua New Guinea",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Papua New Guinean Kina",
                            ISOCode = "PGK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "K"
                        },
                        new
                        {
                            Id = "136",
                            Country = "Paraguay",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Paraguayan Guaraní",
                            ISOCode = "PYG",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₲"
                        },
                        new
                        {
                            Id = "137",
                            Country = "Peru",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Peruvian Sol",
                            ISOCode = "PEN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "S/"
                        },
                        new
                        {
                            Id = "138",
                            Country = "Philippines",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Philippine Peso",
                            ISOCode = "PHP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₱"
                        },
                        new
                        {
                            Id = "139",
                            Country = "Poland",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Polish Zloty",
                            ISOCode = "PLN",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "zł"
                        },
                        new
                        {
                            Id = "140",
                            Country = "Portugal",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "141",
                            Country = "Qatar",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Qatari Riyal",
                            ISOCode = "QAR",
                            IsDirty = false,
                            Notes = "Pegged to USD",
                            SymbolOrSign = "ر.ق"
                        },
                        new
                        {
                            Id = "142",
                            Country = "Romania",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Romanian Leu",
                            ISOCode = "RON",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "lei"
                        },
                        new
                        {
                            Id = "143",
                            Country = "Russia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Russian Ruble",
                            ISOCode = "RUB",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₽"
                        },
                        new
                        {
                            Id = "144",
                            Country = "Rwanda",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Rwandan Franc",
                            ISOCode = "RWF",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "FRw"
                        },
                        new
                        {
                            Id = "145",
                            Country = "Saint Kitts and Nevis",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "East Caribbean Dollar",
                            ISOCode = "XCD",
                            IsDirty = false,
                            Notes = "Shared currency (Eastern Caribbean)",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "146",
                            Country = "Saint Lucia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "East Caribbean Dollar",
                            ISOCode = "XCD",
                            IsDirty = false,
                            Notes = "Shared currency (Eastern Caribbean)",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "147",
                            Country = "Saint Vincent and the Grenadines",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "East Caribbean Dollar",
                            ISOCode = "XCD",
                            IsDirty = false,
                            Notes = "Shared currency (Eastern Caribbean)",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "148",
                            Country = "Samoa",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Samoan Tala",
                            ISOCode = "WST",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "WS$"
                        },
                        new
                        {
                            Id = "149",
                            Country = "San Marino",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "150",
                            Country = "Saudi Arabia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Saudi Riyal",
                            ISOCode = "SAR",
                            IsDirty = false,
                            Notes = "Pegged to USD",
                            SymbolOrSign = "ر.س"
                        },
                        new
                        {
                            Id = "151",
                            Country = "Senegal",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "West African CFA Franc",
                            ISOCode = "XOF",
                            IsDirty = false,
                            Notes = "Shared currency (WAEMU)",
                            SymbolOrSign = "CFA"
                        },
                        new
                        {
                            Id = "152",
                            Country = "Serbia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Serbian Dinar",
                            ISOCode = "RSD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "din"
                        },
                        new
                        {
                            Id = "153",
                            Country = "Seychelles",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Seychellois Rupee",
                            ISOCode = "SCR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₨"
                        },
                        new
                        {
                            Id = "154",
                            Country = "Sierra Leone",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Sierra Leonean Leone",
                            ISOCode = "SLL",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Le"
                        },
                        new
                        {
                            Id = "155",
                            Country = "Singapore",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Singapore Dollar",
                            ISOCode = "SGD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "156",
                            Country = "Slovakia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "157",
                            Country = "Slovenia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "158",
                            Country = "Solomon Islands",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Solomon Islands Dollar",
                            ISOCode = "SBD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "SI$"
                        },
                        new
                        {
                            Id = "159",
                            Country = "Somalia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Somali Shilling",
                            ISOCode = "SOS",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Sh"
                        },
                        new
                        {
                            Id = "160",
                            Country = "South Africa",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "South African Rand",
                            ISOCode = "ZAR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "R"
                        },
                        new
                        {
                            Id = "161",
                            Country = "South Korea",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "South Korean Won",
                            ISOCode = "KRW",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₩"
                        },
                        new
                        {
                            Id = "162",
                            Country = "South Sudan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "South Sudanese Pound",
                            ISOCode = "SSP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "£"
                        },
                        new
                        {
                            Id = "163",
                            Country = "Spain",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Eurozone member)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "164",
                            Country = "Sri Lanka",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Sri Lankan Rupee",
                            ISOCode = "LKR",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₨"
                        },
                        new
                        {
                            Id = "165",
                            Country = "Sudan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Sudanese Pound",
                            ISOCode = "SDG",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "ج.س"
                        },
                        new
                        {
                            Id = "166",
                            Country = "Suriname",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Surinamese Dollar",
                            ISOCode = "SRD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "167",
                            Country = "Sweden",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Swedish Krona",
                            ISOCode = "SEK",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "kr"
                        },
                        new
                        {
                            Id = "168",
                            Country = "Switzerland",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Swiss Franc",
                            ISOCode = "CHF",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Fr"
                        },
                        new
                        {
                            Id = "169",
                            Country = "Syria",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Syrian Pound",
                            ISOCode = "SYP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "£"
                        },
                        new
                        {
                            Id = "170",
                            Country = "Taiwan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "New Taiwan Dollar",
                            ISOCode = "TWD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "NT$"
                        },
                        new
                        {
                            Id = "171",
                            Country = "Tajikistan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Tajikistani Somoni",
                            ISOCode = "TJS",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "SM"
                        },
                        new
                        {
                            Id = "172",
                            Country = "Tanzania",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Tanzanian Shilling",
                            ISOCode = "TZS",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Tsh"
                        },
                        new
                        {
                            Id = "173",
                            Country = "Thailand",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Thai Baht",
                            ISOCode = "THB",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "฿"
                        },
                        new
                        {
                            Id = "174",
                            Country = "Timor-Leste",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "United States Dollar",
                            ISOCode = "USD",
                            IsDirty = false,
                            Notes = "Uses foreign currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "175",
                            Country = "Togo",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "West African CFA Franc",
                            ISOCode = "XOF",
                            IsDirty = false,
                            Notes = "Shared currency (WAEMU)",
                            SymbolOrSign = "CFA"
                        },
                        new
                        {
                            Id = "176",
                            Country = "Tonga",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Tongan Paʻanga",
                            ISOCode = "TOP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "T$"
                        },
                        new
                        {
                            Id = "177",
                            Country = "Trinidad and Tobago",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Trinidad and Tobago Dollar",
                            ISOCode = "TTD",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "TT$"
                        },
                        new
                        {
                            Id = "178",
                            Country = "Tunisia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Tunisian Dinar",
                            ISOCode = "TND",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "د.ت"
                        },
                        new
                        {
                            Id = "179",
                            Country = "Turkey",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Turkish Lira",
                            ISOCode = "TRY",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₺"
                        },
                        new
                        {
                            Id = "180",
                            Country = "Turkmenistan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Turkmenistani Manat",
                            ISOCode = "TMT",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "m"
                        },
                        new
                        {
                            Id = "181",
                            Country = "Tuvalu",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Australian Dollar",
                            ISOCode = "AUD",
                            IsDirty = false,
                            Notes = "Uses foreign currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "182",
                            Country = "Uganda",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Ugandan Shilling",
                            ISOCode = "UGX",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Ush"
                        },
                        new
                        {
                            Id = "183",
                            Country = "Ukraine",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Ukrainian Hryvnia",
                            ISOCode = "UAH",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₴"
                        },
                        new
                        {
                            Id = "184",
                            Country = "United Arab Emirates",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "UAE Dirham",
                            ISOCode = "AED",
                            IsDirty = false,
                            Notes = "Pegged to USD",
                            SymbolOrSign = "د.إ"
                        },
                        new
                        {
                            Id = "185",
                            Country = "United Kingdom",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "British Pound Sterling",
                            ISOCode = "GBP",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "£"
                        },
                        new
                        {
                            Id = "186",
                            Country = "United States",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "United States Dollar",
                            ISOCode = "USD",
                            IsDirty = false,
                            Notes = "World's primary reserve currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "187",
                            Country = "Uruguay",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Uruguayan Peso",
                            ISOCode = "UYU",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "$"
                        },
                        new
                        {
                            Id = "188",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Uzbekistani Som",
                            ISOCode = "UZS",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "so'm"
                        },
                        new
                        {
                            Id = "189",
                            Country = "Vanuatu",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Vanuatu Vatu",
                            ISOCode = "VUV",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Vt"
                        },
                        new
                        {
                            Id = "190",
                            Country = "Vatican City",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Euro",
                            ISOCode = "EUR",
                            IsDirty = false,
                            Notes = "Uses EUR (Vatican agreement)",
                            SymbolOrSign = "€"
                        },
                        new
                        {
                            Id = "191",
                            Country = "Venezuela",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Venezuelan Bolívar",
                            ISOCode = "VES",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "Bs.S"
                        },
                        new
                        {
                            Id = "192",
                            Country = "Vietnam",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Vietnamese Dong",
                            ISOCode = "VND",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "₫"
                        },
                        new
                        {
                            Id = "193",
                            Country = "Yemen",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Yemeni Rial",
                            ISOCode = "YER",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "﷼"
                        },
                        new
                        {
                            Id = "194",
                            Country = "Zambia",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "Zambian Kwacha",
                            ISOCode = "ZMW",
                            IsDirty = false,
                            Notes = "Independent currency",
                            SymbolOrSign = "ZK"
                        },
                        new
                        {
                            Id = "195",
                            Country = "Zimbabwe",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyName = "United States Dollar",
                            ISOCode = "USD",
                            IsDirty = false,
                            Notes = "Uses foreign currency (multi-currency system)",
                            SymbolOrSign = "$"
                        });
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Debt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditorId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DebtType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("InterestRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MaturityDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinimumPayment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OriginationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidOffDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentDueDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrincipalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditorId", "AccountNumber")
                        .IsUnique()
                        .HasFilter("[AccountNumber] IS NOT NULL");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.DebtPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("DebtId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FeesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InterestAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PrincipalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDate");

                    b.HasIndex("ScheduledTransactionId");

                    b.HasIndex("DebtId", "PaymentDate");

                    b.ToTable("DebtPayments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Goal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableReminders")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastReminderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReminderFrequencyDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GoalType");

                    b.HasIndex("IsActive");

                    b.HasIndex("TargetDate");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Income", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("IncomeCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IncomeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPreTax")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRegular")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("NextExpectedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TaxRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IncomeCategoryId");

                    b.HasIndex("IncomeType");

                    b.HasIndex("IsRegular");

                    b.HasIndex("ReceivedDate");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.IncomeCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IncomeCategories");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Insurance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentPhone")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryRelationship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CoverageAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DeductibleAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceCompany")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextPremiumDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PolicyEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PolicyStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PremiumAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PremiumFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PolicyEndDate");

                    b.HasIndex("PolicyNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceBeneficiary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("IsActive");

                    b.ToTable("InsuranceBeneficiaries");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ApprovedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ClaimAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IncidentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClaimDate");

                    b.HasIndex("ClaimNumber")
                        .IsUnique();

                    b.HasIndex("InsuranceId");

                    b.HasIndex("Status");

                    b.ToTable("InsuranceClaims");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("DocumentType");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("UploadDate");

                    b.ToTable("InsuranceDocuments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceClaimId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceClaimId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("IsSent");

                    b.HasIndex("ScheduledDate");

                    b.ToTable("InsuranceNotifications");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsurancePremiumPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LateFeeAppliedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsurancePremiumPayments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Investment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CurrentPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestmentType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("Symbol");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.MaintenanceRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetRegisterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurrenceIntervalDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceProvider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceProviderContact")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetRegisterId");

                    b.HasIndex("MaintenanceDate");

                    b.HasIndex("NextMaintenanceDate");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("AdvanceNoticeDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BudgetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentSnoozeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DismissedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableSound")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableVibration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSnoozeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurrenceInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecurrenceType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SnoozedUntil")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("DebtId");

                    b.HasIndex("GoalId");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("ScheduledTransactionId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId");

                    b.HasIndex("Type");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.NotificationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionResult")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActionTakenAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("BudgetId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Channel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSnoozedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationRuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationRuleId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RetryAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("SnoozeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SnoozeUntil")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("DebtId");

                    b.HasIndex("NotificationRuleId");

                    b.HasIndex("NotificationRuleId1");

                    b.HasIndex("ReadAt");

                    b.HasIndex("ScheduledAt");

                    b.HasIndex("ScheduledTransactionId");

                    b.HasIndex("SentAt");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId");

                    b.ToTable("NotificationHistory");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.NotificationRule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BudgetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomCondition")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastEvaluated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastTriggered")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaxTriggers")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationSettingsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TriggerCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DebtId");

                    b.HasIndex("IsActive");

                    b.HasIndex("NotificationSettingsId");

                    b.HasIndex("NotificationType");

                    b.HasIndex("ScheduledTransactionId");

                    b.ToTable("NotificationRules");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.NotificationSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowSnooze")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BudgetAlertType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("BudgetThresholdAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BudgetThresholdPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomMessageTemplate")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DaysInAdvance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultSnoozeDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoursInAdvance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSnoozeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreferredChannels")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("PreferredTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("QuietHoursEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("QuietHoursStart")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendOnHolidays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendOnWeekends")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NotificationType");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Obligation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("AvailableCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BenefitsDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ContributionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContributionFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ExpectedAnnualReturn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("GracePeriodDays")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCompoundInterest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LastDividendAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastDividendDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LateFeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MembershipNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinimumPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextContributionDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("OriginalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TermInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Obligations");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ObligationBenefit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BenefitType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObligationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObligationId");

                    b.HasIndex("ReceivedDate");

                    b.HasIndex("Status");

                    b.ToTable("ObligationBenefits");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ObligationDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObligationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObligationId");

                    b.ToTable("ObligationDocuments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ObligationNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObligationBenefitId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObligationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ObligationPaymentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsSent");

                    b.HasIndex("ObligationBenefitId");

                    b.HasIndex("ObligationId");

                    b.HasIndex("ObligationPaymentId");

                    b.HasIndex("ScheduledDate");

                    b.ToTable("ObligationNotifications");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ObligationPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InterestAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExtraPayment")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LateFeeAppliedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObligationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentPeriod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PrincipalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDate");

                    b.HasIndex("ObligationId", "PaymentDate");

                    b.ToTable("ObligationPayments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReconciliationItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClearedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClearedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBookOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCleared")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStatementOnly")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReconciliationSessionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReconciliationSessionId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactionId");

                    b.ToTable("ReconciliationItems");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReconciliationSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankStatementFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BookEndingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BookStartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Difference")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReconciledBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReconciledDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReconciliationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StatementEndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StatementEndingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StatementStartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StatementStartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReconciliationDate");

                    b.HasIndex("Status");

                    b.ToTable("ReconciliationSessions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChartData")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChartType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComparisonPeriod")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DateRangePreset")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExportFormat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExportPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long?>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GenerationTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastViewedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextRunTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Parameters")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReportTemplateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportTemplateId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScheduleFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ReportTemplateId");

                    b.HasIndex("ReportTemplateId1");

                    b.HasIndex("ReportType");

                    b.HasIndex("Status");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReportParameter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowMultiple")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionalRules")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CssClass")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MaxDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MinDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinLength")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MinValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Options")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParameterType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pattern")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportTemplateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportTemplateId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationRules")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParameterType");

                    b.HasIndex("ReportTemplateId");

                    b.HasIndex("ReportTemplateId1");

                    b.ToTable("ReportParameters");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReportTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorTheme")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultChartType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultComparisonPeriod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultDateRange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequiredRole")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsSystemTemplate");

                    b.HasIndex("Name");

                    b.HasIndex("ReportType");

                    b.ToTable("ReportTemplates");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AdjustForWeekends")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentOccurrences")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DaysOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EndType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastGeneratedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastProcessedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxOccurrences")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonthOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationTiming")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Payee")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("RecurrenceInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecurrenceType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchedulingMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkippedDates")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransferToAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DebtId");

                    b.HasIndex("IsActive");

                    b.HasIndex("NextDueDate");

                    b.HasIndex("TransferToAccountId");

                    b.ToTable("ScheduledTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.SplitTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Memo")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TransactionId");

                    b.ToTable("SplitTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BudgetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClearedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("GoalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoalId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestmentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSplit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Payee")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReconciledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurringPattern")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransferToAccountId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AssetId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Date");

                    b.HasIndex("DebtId");

                    b.HasIndex("GoalId1");

                    b.HasIndex("InvestmentId");

                    b.HasIndex("ParentTransactionId");

                    b.HasIndex("ScheduledTransactionId");

                    b.HasIndex("TransferToAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.TransactionAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionAttachments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.TransactionNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SnoozedUntil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsRead");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("ScheduledTransactionId");

                    b.ToTable("TransactionNotifications");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailVerificationToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Preferences")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmailVerificationToken");

                    b.HasIndex("PasswordResetToken");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("RefreshToken");

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("BudgetDebt", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Budget", null)
                        .WithMany()
                        .HasForeignKey("RelatedBudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Debt", null)
                        .WithMany()
                        .HasForeignKey("RelatedDebtsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Account", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Asset", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.AssetCategory", "AssetCategory")
                        .WithMany("Assets")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Transaction", "PurchaseTransaction")
                        .WithMany()
                        .HasForeignKey("PurchaseTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssetCategory");

                    b.Navigation("PurchaseTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetDocument", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Asset", null)
                        .WithMany("Documents")
                        .HasForeignKey("AssetId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.AssetRegister", "AssetRegister")
                        .WithMany("Documents")
                        .HasForeignKey("AssetRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.AssetRegister", null)
                        .WithMany("AssetDocuments")
                        .HasForeignKey("AssetRegisterId1");

                    b.Navigation("AssetRegister");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetInsurance", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Asset", "Asset")
                        .WithMany("InsurancePolicies")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Asset");

                    b.Navigation("ScheduledTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetMaintenance", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Asset", "Asset")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Asset");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetRegister", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Asset", "Asset")
                        .WithOne("AssetRegister")
                        .HasForeignKey("Pilgrims.PersonalFinances.Core.Models.AssetRegister", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AuditEntry", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.AuditLog", "AuditLog")
                        .WithMany("AuditEntries")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditLog");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Budget", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Goal", "Goal")
                        .WithMany("RelatedBudgets")
                        .HasForeignKey("GoalId1");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.User", null)
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.BudgetAlert", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Budget", "Budget")
                        .WithMany("BudgetAlerts")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.BudgetCategory", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Budget", null)
                        .WithMany("Categories")
                        .HasForeignKey("BudgetId1");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");

                    b.Navigation("Budget");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Category", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.User", null)
                        .WithMany("Categories")
                        .HasForeignKey("UserId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Debt", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Creditor", "Creditor")
                        .WithMany("Debts")
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creditor");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.DebtPayment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Debt", "Debt")
                        .WithMany("Payments")
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId");

                    b.Navigation("Debt");

                    b.Navigation("ScheduledTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Income", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.IncomeCategory", "IncomeCategory")
                        .WithMany("Incomes")
                        .HasForeignKey("IncomeCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("IncomeCategory");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceBeneficiary", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Insurance", "Insurance")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceClaim", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Insurance", "Insurance")
                        .WithMany("Claims")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceDocument", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.InsuranceClaim", "Claim")
                        .WithMany("Documents")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Insurance", "Insurance")
                        .WithMany("Documents")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceNotification", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.InsuranceClaim", "InsuranceClaim")
                        .WithMany()
                        .HasForeignKey("InsuranceClaimId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("InsuranceClaim");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsurancePremiumPayment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Insurance", "Insurance")
                        .WithMany("PremiumPayments")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Investment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.MaintenanceRecord", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.AssetRegister", "AssetRegister")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("AssetRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetRegister");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Notification", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Budget");

                    b.Navigation("Debt");

                    b.Navigation("Goal");

                    b.Navigation("ScheduledTransaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.NotificationHistory", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.NotificationRule", "NotificationRule")
                        .WithMany()
                        .HasForeignKey("NotificationRuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.NotificationRule", null)
                        .WithMany("NotificationHistory")
                        .HasForeignKey("NotificationRuleId1");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Budget");

                    b.Navigation("Debt");

                    b.Navigation("NotificationRule");

                    b.Navigation("ScheduledTransaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.NotificationRule", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.NotificationSettings", "NotificationSettings")
                        .WithMany()
                        .HasForeignKey("NotificationSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId");

                    b.Navigation("Account");

                    b.Navigation("Budget");

                    b.Navigation("Category");

                    b.Navigation("Debt");

                    b.Navigation("NotificationSettings");

                    b.Navigation("ScheduledTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ObligationBenefit", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Obligation", "Obligation")
                        .WithMany("Benefits")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obligation");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ObligationDocument", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Obligation", "Obligation")
                        .WithMany("Documents")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obligation");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ObligationNotification", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ObligationBenefit", "ObligationBenefit")
                        .WithMany()
                        .HasForeignKey("ObligationBenefitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Obligation", "Obligation")
                        .WithMany()
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ObligationPayment", "ObligationPayment")
                        .WithMany()
                        .HasForeignKey("ObligationPaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Obligation");

                    b.Navigation("ObligationBenefit");

                    b.Navigation("ObligationPayment");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ObligationPayment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Obligation", "Obligation")
                        .WithMany("Payments")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obligation");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReconciliationItem", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ReconciliationSession", "ReconciliationSession")
                        .WithMany("ReconciliationItems")
                        .HasForeignKey("ReconciliationSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ReconciliationSession");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReconciliationSession", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Report", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ReportTemplate", "ReportTemplate")
                        .WithMany()
                        .HasForeignKey("ReportTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ReportTemplate", null)
                        .WithMany("Reports")
                        .HasForeignKey("ReportTemplateId1");

                    b.Navigation("ReportTemplate");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReportParameter", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ReportTemplate", "ReportTemplate")
                        .WithMany()
                        .HasForeignKey("ReportTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ReportTemplate", null)
                        .WithMany("Parameters")
                        .HasForeignKey("ReportTemplateId1");

                    b.Navigation("ReportTemplate");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "TransferToAccount")
                        .WithMany("ScheduledTransactions")
                        .HasForeignKey("TransferToAccountId");

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Debt");

                    b.Navigation("TransferToAccount");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.SplitTransaction", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Transaction", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Asset", "Asset")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("AssetId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Budget", "Budget")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("BudgetId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Debt", "Debt")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("DebtId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Goal", "Goal")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("GoalId1");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Investment", null)
                        .WithMany("Transactions")
                        .HasForeignKey("InvestmentId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Transaction", "ParentTransaction")
                        .WithMany("SplitTransactions")
                        .HasForeignKey("ParentTransactionId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", null)
                        .WithMany("GeneratedTransactions")
                        .HasForeignKey("ScheduledTransactionId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Account", "TransferToAccount")
                        .WithMany()
                        .HasForeignKey("TransferToAccountId");

                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Account");

                    b.Navigation("Asset");

                    b.Navigation("Budget");

                    b.Navigation("Category");

                    b.Navigation("Debt");

                    b.Navigation("Goal");

                    b.Navigation("ParentTransaction");

                    b.Navigation("TransferToAccount");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.TransactionAttachment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.Transaction", "Transaction")
                        .WithMany("Attachments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.TransactionNotification", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.UserSession", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Account", b =>
                {
                    b.Navigation("ScheduledTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Asset", b =>
                {
                    b.Navigation("AssetRegister");

                    b.Navigation("Documents");

                    b.Navigation("InsurancePolicies");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetCategory", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AssetRegister", b =>
                {
                    b.Navigation("AssetDocuments");

                    b.Navigation("Documents");

                    b.Navigation("MaintenanceRecords");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.AuditLog", b =>
                {
                    b.Navigation("AuditEntries");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Budget", b =>
                {
                    b.Navigation("BudgetAlerts");

                    b.Navigation("Categories");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Category", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Creditor", b =>
                {
                    b.Navigation("Debts");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Debt", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Goal", b =>
                {
                    b.Navigation("RelatedBudgets");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.IncomeCategory", b =>
                {
                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Insurance", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("Claims");

                    b.Navigation("Documents");

                    b.Navigation("PremiumPayments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.InsuranceClaim", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Investment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.NotificationRule", b =>
                {
                    b.Navigation("NotificationHistory");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Obligation", b =>
                {
                    b.Navigation("Benefits");

                    b.Navigation("Documents");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReconciliationSession", b =>
                {
                    b.Navigation("ReconciliationItems");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ReportTemplate", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ScheduledTransaction", b =>
                {
                    b.Navigation("GeneratedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.Transaction", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("SplitTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Budgets");

                    b.Navigation("Categories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
