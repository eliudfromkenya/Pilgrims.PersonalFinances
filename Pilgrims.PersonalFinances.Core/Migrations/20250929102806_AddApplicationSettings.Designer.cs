// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pilgrims.PersonalFinances.Data;

#nullable disable

namespace Pilgrims.PersonalFinances.Core.Migrations
{
    [DbContext(typeof(PersonalFinanceContext))]
    [Migration("20250929102806_AddApplicationSettings")]
    partial class AddApplicationSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("BudgetDebt", b =>
                {
                    b.Property<string>("RelatedBudgetsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedDebtsId")
                        .HasColumnType("TEXT");

                    b.HasKey("RelatedBudgetsId", "RelatedDebtsId");

                    b.HasIndex("RelatedDebtsId");

                    b.ToTable("BudgetDebt");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Core.Models.ApplicationSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyDecimalPlaces")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastUpdatedVersion")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowCurrencyCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountHolder")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BrokerName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InitialBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastReconciledDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinimumPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReconciledBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StatementDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasFilter("[AccountNumber] IS NOT NULL");

                    b.HasIndex("AccountType");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Asset", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetCategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetRegisterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CurrentValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DepreciationMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DepreciationRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DisposalDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DisposalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceDocumentPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PurchaseTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SalvageValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsefulLifeYears")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WarrantyPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("PurchaseTransactionId");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultDepreciationMethod")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DefaultDepreciationRate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultUsefulLifeYears")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AssetCategories");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetRegisterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetRegisterId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long?>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetRegisterId");

                    b.HasIndex("AssetRegisterId1");

                    b.ToTable("AssetDocuments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetInsurance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentContact")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AnnualPremium")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoRenewal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificatePath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ClaimsCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CoverageAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CoverageDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Deductible")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceProvider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastClaimDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MonthlyPremium")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentFrequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyDocumentPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PolicyEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PolicyStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryBeneficiary")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryBeneficiary")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TotalClaimsAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("IsActive");

                    b.HasIndex("PolicyEndDate");

                    b.HasIndex("PolicyNumber");

                    b.HasIndex("ScheduledTransactionId");

                    b.ToTable("AssetInsurances");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetMaintenance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("HoursAtService")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LaborCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MileageAtService")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextServiceDue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NextServiceHours")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NextServiceMileage")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PartsCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceProvider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceProviderContact")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceReportPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WarrantyDetails")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("WarrantyExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WarrantyMileage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("NextServiceDue");

                    b.HasIndex("ServiceDate");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId");

                    b.ToTable("AssetMaintenances");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetRegister", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalDocumentsPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificatesPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InsuranceCoverage")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsurancePolicyPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InsurancePremium")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceProvider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InsuranceStartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceSchedule")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ManualPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseReceiptPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Vendor")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("WarrantyDocumentPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("WarrantyProvider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("WarrantyTerms")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.ToTable("AssetRegisters");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Budget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlertLevels")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("AlertsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowOverspend")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableRollover")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GoalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoalId1")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastAlertLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LimitAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RolloverAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SpentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EndDate");

                    b.HasIndex("GoalId1");

                    b.HasIndex("IsActive");

                    b.HasIndex("StartDate");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.BudgetAlert", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AlertLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BudgetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BudgetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Severity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SpentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThresholdPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UsedPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.ToTable("BudgetAlerts");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.BudgetCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AllocatedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BudgetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BudgetId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SpentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetId1");

                    b.HasIndex("CategoryId");

                    b.HasIndex("BudgetId", "CategoryId")
                        .IsUnique();

                    b.ToTable("BudgetCategories");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ColorCode = "#FF6B6B",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDirty = true,
                            Name = "Debt Payment",
                            UpdatedAt = new DateTime(2025, 9, 29, 10, 28, 5, 507, DateTimeKind.Utc).AddTicks(4869)
                        },
                        new
                        {
                            Id = "2",
                            ColorCode = "#FF4757",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDirty = true,
                            Name = "Interest",
                            UpdatedAt = new DateTime(2025, 9, 29, 10, 28, 5, 507, DateTimeKind.Utc).AddTicks(9349)
                        },
                        new
                        {
                            Id = "3",
                            ColorCode = "#FF3838",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDirty = true,
                            Name = "Credit Card",
                            UpdatedAt = new DateTime(2025, 9, 29, 10, 28, 5, 507, DateTimeKind.Utc).AddTicks(9365)
                        });
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Creditor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerServicePhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Creditors");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Debt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditorId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DebtType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("InterestRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MaturityDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinimumPayment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OriginationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidOffDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentDueDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrincipalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditorId", "AccountNumber")
                        .IsUnique()
                        .HasFilter("[AccountNumber] IS NOT NULL");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.DebtPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DebtId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FeesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InterestAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PrincipalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDate");

                    b.HasIndex("ScheduledTransactionId");

                    b.HasIndex("DebtId", "PaymentDate");

                    b.ToTable("DebtPayments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Goal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableReminders")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastReminderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReminderFrequencyDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GoalType");

                    b.HasIndex("IsActive");

                    b.HasIndex("TargetDate");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Income", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("IncomeCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IncomeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPreTax")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRegular")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("NextExpectedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TaxRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IncomeCategoryId");

                    b.HasIndex("IncomeType");

                    b.HasIndex("IsRegular");

                    b.HasIndex("ReceivedDate");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.IncomeCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IncomeCategories");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Insurance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentPhone")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiaryRelationship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CoverageAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DeductibleAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceCompany")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextPremiumDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PolicyEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PolicyStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PremiumAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PremiumFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PolicyEndDate");

                    b.HasIndex("PolicyNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceBeneficiary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("IsActive");

                    b.ToTable("InsuranceBeneficiaries");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ApprovedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ClaimAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IncidentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClaimDate");

                    b.HasIndex("ClaimNumber")
                        .IsUnique();

                    b.HasIndex("InsuranceId");

                    b.HasIndex("Status");

                    b.ToTable("InsuranceClaims");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("DocumentType");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("UploadDate");

                    b.ToTable("InsuranceDocuments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceClaimId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceClaimId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("IsSent");

                    b.HasIndex("ScheduledDate");

                    b.ToTable("InsuranceNotifications");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsurancePremiumPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LateFeeAppliedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsurancePremiumPayments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Investment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CurrentPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestmentType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("Symbol");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.MaintenanceRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetRegisterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurrenceIntervalDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceProvider")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceProviderContact")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetRegisterId");

                    b.HasIndex("MaintenanceDate");

                    b.HasIndex("NextMaintenanceDate");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("AdvanceNoticeDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BudgetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentSnoozeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DismissedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableSound")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableVibration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSnoozeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurrenceInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecurrenceType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SnoozedUntil")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("DebtId");

                    b.HasIndex("GoalId");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("ScheduledTransactionId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId");

                    b.HasIndex("Type");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.NotificationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionResult")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActionTakenAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("BudgetId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Channel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSnoozedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationRuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationRuleId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RetryAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("SnoozeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SnoozeUntil")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("DebtId");

                    b.HasIndex("NotificationRuleId");

                    b.HasIndex("NotificationRuleId1");

                    b.HasIndex("ReadAt");

                    b.HasIndex("ScheduledAt");

                    b.HasIndex("ScheduledTransactionId");

                    b.HasIndex("SentAt");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId");

                    b.ToTable("NotificationHistory");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.NotificationRule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BudgetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomCondition")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastEvaluated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastTriggered")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaxTriggers")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationSettingsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TriggerCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DebtId");

                    b.HasIndex("IsActive");

                    b.HasIndex("NotificationSettingsId");

                    b.HasIndex("NotificationType");

                    b.HasIndex("ScheduledTransactionId");

                    b.ToTable("NotificationRules");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.NotificationSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowSnooze")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BudgetAlertType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("BudgetThresholdAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BudgetThresholdPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomMessageTemplate")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DaysInAdvance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultSnoozeDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoursInAdvance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSnoozeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreferredChannels")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("PreferredTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("QuietHoursEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("QuietHoursStart")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendOnHolidays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendOnWeekends")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NotificationType");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Obligation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("AvailableCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BenefitsDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ContributionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContributionFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ExpectedAnnualReturn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("GracePeriodDays")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCompoundInterest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LastDividendAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastDividendDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LateFeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MembershipNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinimumPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextContributionDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("OriginalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TermInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Obligations");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ObligationBenefit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BenefitType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObligationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObligationId");

                    b.HasIndex("ReceivedDate");

                    b.HasIndex("Status");

                    b.ToTable("ObligationBenefits");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ObligationDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObligationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObligationId");

                    b.ToTable("ObligationDocuments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ObligationNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObligationBenefitId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObligationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ObligationPaymentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsSent");

                    b.HasIndex("ObligationBenefitId");

                    b.HasIndex("ObligationId");

                    b.HasIndex("ObligationPaymentId");

                    b.HasIndex("ScheduledDate");

                    b.ToTable("ObligationNotifications");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ObligationPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InterestAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExtraPayment")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LateFeeAppliedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObligationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentPeriod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PrincipalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDate");

                    b.HasIndex("ObligationId", "PaymentDate");

                    b.ToTable("ObligationPayments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReconciliationItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ClearedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBookOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCleared")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStatementOnly")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReconciliationSessionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReconciliationSessionId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactionId");

                    b.ToTable("ReconciliationItems");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReconciliationSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankStatementFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BookEndingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BookStartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Difference")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReconciledBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReconciledDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReconciliationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StatementEndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StatementEndingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StatementStartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StatementStartingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReconciliationDate");

                    b.HasIndex("Status");

                    b.ToTable("ReconciliationSessions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChartData")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChartType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComparisonPeriod")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DateRangePreset")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExportFormat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExportPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long?>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GenerationTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastViewedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextRunTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Parameters")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReportTemplateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportTemplateId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScheduleFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ReportTemplateId");

                    b.HasIndex("ReportTemplateId1");

                    b.HasIndex("ReportType");

                    b.HasIndex("Status");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReportParameter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowMultiple")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionalRules")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CssClass")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MaxDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MinDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinLength")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MinValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Options")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParameterType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pattern")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportTemplateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportTemplateId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationRules")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParameterType");

                    b.HasIndex("ReportTemplateId");

                    b.HasIndex("ReportTemplateId1");

                    b.ToTable("ReportParameters");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReportTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorTheme")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultChartType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultComparisonPeriod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultDateRange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequiredRole")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsSystemTemplate");

                    b.HasIndex("Name");

                    b.HasIndex("ReportType");

                    b.ToTable("ReportTemplates");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ScheduledTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AdjustForWeekends")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentOccurrences")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DaysOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EndType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastGeneratedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastProcessedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxOccurrences")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonthOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationTiming")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Payee")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("RecurrenceInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecurrenceType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchedulingMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkippedDates")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransferToAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DebtId");

                    b.HasIndex("IsActive");

                    b.HasIndex("NextDueDate");

                    b.HasIndex("TransferToAccountId");

                    b.ToTable("ScheduledTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.SplitTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Memo")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TransactionId");

                    b.ToTable("SplitTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BudgetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClearedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DebtId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("GoalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoalId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestmentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSplit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Payee")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReconciledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurringPattern")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransferToAccountId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AssetId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Date");

                    b.HasIndex("DebtId");

                    b.HasIndex("GoalId1");

                    b.HasIndex("InvestmentId");

                    b.HasIndex("ParentTransactionId");

                    b.HasIndex("ScheduledTransactionId");

                    b.HasIndex("TransferToAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.TransactionAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionAttachments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.TransactionNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledTransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SnoozedUntil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsRead");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("ScheduledTransactionId");

                    b.ToTable("TransactionNotifications");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailVerificationToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Preferences")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmailVerificationToken");

                    b.HasIndex("PasswordResetToken");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("RefreshToken");

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("BudgetDebt", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Budget", null)
                        .WithMany()
                        .HasForeignKey("RelatedBudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.Debt", null)
                        .WithMany()
                        .HasForeignKey("RelatedDebtsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Account", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Asset", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.AssetCategory", "AssetCategory")
                        .WithMany("Assets")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.Transaction", "PurchaseTransaction")
                        .WithMany()
                        .HasForeignKey("PurchaseTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssetCategory");

                    b.Navigation("PurchaseTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetDocument", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Asset", null)
                        .WithMany("Documents")
                        .HasForeignKey("AssetId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.AssetRegister", "AssetRegister")
                        .WithMany("Documents")
                        .HasForeignKey("AssetRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.AssetRegister", null)
                        .WithMany("AssetDocuments")
                        .HasForeignKey("AssetRegisterId1");

                    b.Navigation("AssetRegister");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetInsurance", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Asset", "Asset")
                        .WithMany("InsurancePolicies")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Asset");

                    b.Navigation("ScheduledTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetMaintenance", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Asset", "Asset")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Asset");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetRegister", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Asset", "Asset")
                        .WithOne("AssetRegister")
                        .HasForeignKey("Pilgrims.PersonalFinances.Models.AssetRegister", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Budget", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Goal", "Goal")
                        .WithMany("RelatedBudgets")
                        .HasForeignKey("GoalId1");

                    b.HasOne("Pilgrims.PersonalFinances.Models.User", null)
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.BudgetAlert", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Budget", "Budget")
                        .WithMany("BudgetAlerts")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.BudgetCategory", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.Budget", null)
                        .WithMany("Categories")
                        .HasForeignKey("BudgetId1");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");

                    b.Navigation("Budget");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Category", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pilgrims.PersonalFinances.Models.User", null)
                        .WithMany("Categories")
                        .HasForeignKey("UserId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Debt", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Creditor", "Creditor")
                        .WithMany("Debts")
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creditor");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.DebtPayment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Debt", "Debt")
                        .WithMany("Payments")
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId");

                    b.Navigation("Debt");

                    b.Navigation("ScheduledTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Income", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.IncomeCategory", "IncomeCategory")
                        .WithMany("Incomes")
                        .HasForeignKey("IncomeCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("IncomeCategory");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceBeneficiary", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Insurance", "Insurance")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceClaim", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Insurance", "Insurance")
                        .WithMany("Claims")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceDocument", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.InsuranceClaim", "Claim")
                        .WithMany("Documents")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Insurance", "Insurance")
                        .WithMany("Documents")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceNotification", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.InsuranceClaim", "InsuranceClaim")
                        .WithMany()
                        .HasForeignKey("InsuranceClaimId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("InsuranceClaim");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsurancePremiumPayment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Insurance", "Insurance")
                        .WithMany("PremiumPayments")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Investment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.MaintenanceRecord", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.AssetRegister", "AssetRegister")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("AssetRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetRegister");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Notification", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Budget");

                    b.Navigation("Debt");

                    b.Navigation("Goal");

                    b.Navigation("ScheduledTransaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.NotificationHistory", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.NotificationRule", "NotificationRule")
                        .WithMany()
                        .HasForeignKey("NotificationRuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.NotificationRule", null)
                        .WithMany("NotificationHistory")
                        .HasForeignKey("NotificationRuleId1");

                    b.HasOne("Pilgrims.PersonalFinances.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Budget");

                    b.Navigation("Debt");

                    b.Navigation("NotificationRule");

                    b.Navigation("ScheduledTransaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.NotificationRule", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.NotificationSettings", "NotificationSettings")
                        .WithMany()
                        .HasForeignKey("NotificationSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId");

                    b.Navigation("Account");

                    b.Navigation("Budget");

                    b.Navigation("Category");

                    b.Navigation("Debt");

                    b.Navigation("NotificationSettings");

                    b.Navigation("ScheduledTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ObligationBenefit", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Obligation", "Obligation")
                        .WithMany("Benefits")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obligation");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ObligationDocument", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Obligation", "Obligation")
                        .WithMany("Documents")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obligation");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ObligationNotification", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.ObligationBenefit", "ObligationBenefit")
                        .WithMany()
                        .HasForeignKey("ObligationBenefitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Obligation", "Obligation")
                        .WithMany()
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.ObligationPayment", "ObligationPayment")
                        .WithMany()
                        .HasForeignKey("ObligationPaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Obligation");

                    b.Navigation("ObligationBenefit");

                    b.Navigation("ObligationPayment");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ObligationPayment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Obligation", "Obligation")
                        .WithMany("Payments")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obligation");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReconciliationItem", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.ReconciliationSession", "ReconciliationSession")
                        .WithMany("ReconciliationItems")
                        .HasForeignKey("ReconciliationSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ReconciliationSession");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReconciliationSession", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Report", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.ReportTemplate", "ReportTemplate")
                        .WithMany()
                        .HasForeignKey("ReportTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pilgrims.PersonalFinances.Models.ReportTemplate", null)
                        .WithMany("Reports")
                        .HasForeignKey("ReportTemplateId1");

                    b.Navigation("ReportTemplate");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReportParameter", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.ReportTemplate", "ReportTemplate")
                        .WithMany()
                        .HasForeignKey("ReportTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.ReportTemplate", null)
                        .WithMany("Parameters")
                        .HasForeignKey("ReportTemplateId1");

                    b.Navigation("ReportTemplate");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ScheduledTransaction", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "TransferToAccount")
                        .WithMany("ScheduledTransactions")
                        .HasForeignKey("TransferToAccountId");

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Debt");

                    b.Navigation("TransferToAccount");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.SplitTransaction", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Transaction", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilgrims.PersonalFinances.Models.Asset", "Asset")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("AssetId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Budget", "Budget")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("BudgetId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pilgrims.PersonalFinances.Models.Debt", "Debt")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("DebtId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Goal", "Goal")
                        .WithMany("RelatedTransactions")
                        .HasForeignKey("GoalId1");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Investment", null)
                        .WithMany("Transactions")
                        .HasForeignKey("InvestmentId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Transaction", "ParentTransaction")
                        .WithMany("SplitTransactions")
                        .HasForeignKey("ParentTransactionId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.ScheduledTransaction", null)
                        .WithMany("GeneratedTransactions")
                        .HasForeignKey("ScheduledTransactionId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.Account", "TransferToAccount")
                        .WithMany()
                        .HasForeignKey("TransferToAccountId");

                    b.HasOne("Pilgrims.PersonalFinances.Models.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Account");

                    b.Navigation("Asset");

                    b.Navigation("Budget");

                    b.Navigation("Category");

                    b.Navigation("Debt");

                    b.Navigation("Goal");

                    b.Navigation("ParentTransaction");

                    b.Navigation("TransferToAccount");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.TransactionAttachment", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.Transaction", "Transaction")
                        .WithMany("Attachments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.TransactionNotification", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.ScheduledTransaction", "ScheduledTransaction")
                        .WithMany()
                        .HasForeignKey("ScheduledTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledTransaction");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.UserSession", b =>
                {
                    b.HasOne("Pilgrims.PersonalFinances.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Account", b =>
                {
                    b.Navigation("ScheduledTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Asset", b =>
                {
                    b.Navigation("AssetRegister");

                    b.Navigation("Documents");

                    b.Navigation("InsurancePolicies");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetCategory", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.AssetRegister", b =>
                {
                    b.Navigation("AssetDocuments");

                    b.Navigation("Documents");

                    b.Navigation("MaintenanceRecords");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Budget", b =>
                {
                    b.Navigation("BudgetAlerts");

                    b.Navigation("Categories");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Category", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Creditor", b =>
                {
                    b.Navigation("Debts");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Debt", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Goal", b =>
                {
                    b.Navigation("RelatedBudgets");

                    b.Navigation("RelatedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.IncomeCategory", b =>
                {
                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Insurance", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("Claims");

                    b.Navigation("Documents");

                    b.Navigation("PremiumPayments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.InsuranceClaim", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Investment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.NotificationRule", b =>
                {
                    b.Navigation("NotificationHistory");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Obligation", b =>
                {
                    b.Navigation("Benefits");

                    b.Navigation("Documents");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReconciliationSession", b =>
                {
                    b.Navigation("ReconciliationItems");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ReportTemplate", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.ScheduledTransaction", b =>
                {
                    b.Navigation("GeneratedTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.Transaction", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("SplitTransactions");
                });

            modelBuilder.Entity("Pilgrims.PersonalFinances.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Budgets");

                    b.Navigation("Categories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
