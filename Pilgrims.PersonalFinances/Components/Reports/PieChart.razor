@using System.Globalization

<div class="pie-chart-container">
    <div class="chart-header">
        <h3 class="chart-title">@Title</h3>
        @if (!string.IsNullOrEmpty(Subtitle))
        {
            <p class="chart-subtitle">@Subtitle</p>
        }
    </div>
    
    <div class="chart-content">
        <div class="chart-wrapper">
            <svg class="pie-chart" viewBox="0 0 @ChartSize @ChartSize" preserveAspectRatio="xMidYMid meet">
                <!-- Pie slices -->
                @for (int i = 0; i < Data.Count; i++)
                {
                    var slice = GetSliceData(i);
                    
                    <path d="@slice.Path" 
                          fill="@GetSliceColor(i)" 
                          stroke="white" 
                          stroke-width="2"
                          class="pie-slice @(EnableDrillDown ? "clickable" : "")"
                          @onclick="() => OnSliceClick(Data[i])"
                          @onmouseover="() => ShowTooltip(Data[i], i)"
                          @onmouseout="HideTooltip">
                        <title>@Data[i].Label: @FormatValue(Data[i].Value) (@Data[i].Percentage?.ToString("P1"))</title>
                    </path>
                }
                
                <!-- Center circle for donut chart -->
                @if (IsDonut)
                {
                    <circle cx="@Center" cy="@Center" r="@InnerRadius" fill="white"/>
                    
                    <!-- Center text -->
                    @((MarkupString)$"<text x=\"{Center}\" y=\"{Center - 10}\" text-anchor=\"middle\" font-size=\"14\" fill=\"#374151\" font-weight=\"600\">{CenterLabel}</text>")
                    @((MarkupString)$"<text x=\"{Center}\" y=\"{Center + 10}\" text-anchor=\"middle\" font-size=\"18\" fill=\"#111827\" font-weight=\"700\">{FormatValue(TotalValue)}</text>")
                }
            </svg>
            
            <!-- Legend -->
            @if (ShowLegend)
            {
                <div class="chart-legend">
                    @for (int i = 0; i < Data.Count; i++)
                    {
                        var item = Data[i];
                        <div class="legend-item @(EnableDrillDown ? "clickable" : "")" 
                             @onclick="() => OnSliceClick(item)">
                            <div class="legend-color" style="background-color: @GetSliceColor(i);"></div>
                            <div class="legend-content">
                                <div class="legend-label">@item.Label</div>
                                <div class="legend-value">
                                    @FormatValue(item.Value)
                                    @if (item.Percentage.HasValue)
                                    {
                                        <span class="legend-percentage">(@item.Percentage.Value.ToString("P1"))</span>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        
        <!-- Tooltip -->
        @if (showTooltip && tooltipData != null)
        {
            <div class="chart-tooltip" style="left: @(tooltipX)px; top: @(tooltipY)px;">
                <div class="tooltip-content">
                    <div class="tooltip-label">@tooltipData.Label</div>
                    <div class="tooltip-value">@FormatValue(tooltipData.Value)</div>
                    @if (tooltipData.Percentage.HasValue)
                    {
                        <div class="tooltip-percentage">@tooltipData.Percentage.Value.ToString("P1")</div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public List<ChartDataItem> Data { get; set; } = new();
    [Parameter] public bool ShowLegend { get; set; } = true;
    [Parameter] public bool IsDonut { get; set; } = false;
    [Parameter] public string CenterLabel { get; set; } = "Total";
    [Parameter] public bool EnableDrillDown { get; set; } = false;
    [Parameter] public EventCallback<ChartDataItem> OnItemClick { get; set; }
    [Parameter] public string[] Colors { get; set; } = new[] { "#3b82f6", "#10b981", "#f59e0b", "#ef4444", "#8b5cf6", "#06b6d4", "#84cc16", "#f97316" };
    [Parameter] public string ValueFormat { get; set; } = "C0"; // Currency format by default
    
    private const int ChartSize = 400;
    private const int Center = ChartSize / 2;
    private const int Radius = 150;
    private const int InnerRadius = 60;
    
    private bool showTooltip = false;
    private ChartDataItem? tooltipData;
    private double tooltipX = 0;
    private double tooltipY = 0;
    
    private decimal TotalValue => Data.Sum(d => d.Value);
    
    protected override void OnParametersSet()
    {
        // Calculate percentages if not provided
        if (Data.Any() && TotalValue > 0)
        {
            foreach (var item in Data)
            {
                if (!item.Percentage.HasValue)
                {
                    item.Percentage = item.Value / TotalValue;
                }
            }
        }
    }
    
    private SliceData GetSliceData(int index)
    {
        var item = Data[index];
        var percentage = item.Percentage ?? 0;
        
        // Calculate cumulative percentage up to this slice
        var cumulativePercentage = 0m;
        for (int i = 0; i < index; i++)
        {
            cumulativePercentage += Data[i].Percentage ?? 0;
        }
        
        var startAngle = cumulativePercentage * 360 - 90; // Start from top (-90 degrees)
        var endAngle = startAngle + (percentage * 360);
        
        var startAngleRad = startAngle * (decimal) Math.PI / 180;
        var endAngleRad = endAngle * (decimal) Math.PI / 180;
        
        var outerRadius = IsDonut ? Radius : Radius;
        var innerRadius = IsDonut ? InnerRadius : 0;
        
        var x1 = Center + outerRadius * Math.Cos((double)startAngleRad);
        var y1 = Center + outerRadius * Math.Sin((double)startAngleRad);
        var x2 = Center + outerRadius * Math.Cos((double)endAngleRad);
        var y2 = Center + outerRadius * Math.Sin((double)endAngleRad);
        
        var largeArcFlag = percentage > 0.5m ? 1 : 0;
        
        string path;
        if (IsDonut)
        {
            var x3 = Center + innerRadius * Math.Cos((double)endAngleRad);
            var y3 = Center + innerRadius * Math.Sin((double)endAngleRad);
            var x4 = Center + innerRadius * Math.Cos((double)startAngleRad);
            var y4 = Center + innerRadius * Math.Sin((double)startAngleRad);
            
            path = $"M {x1:F2} {y1:F2} A {outerRadius} {outerRadius} 0 {largeArcFlag} 1 {x2:F2} {y2:F2} L {x3:F2} {y3:F2} A {innerRadius} {innerRadius} 0 {largeArcFlag} 0 {x4:F2} {y4:F2} Z";
        }
        else
        {
            path = $"M {Center} {Center} L {x1:F2} {y1:F2} A {outerRadius} {outerRadius} 0 {largeArcFlag} 1 {x2:F2} {y2:F2} Z";
        }
        
        return new SliceData { Path = path };
    }
    
    private string GetSliceColor(int index)
    {
        return Colors[index % Colors.Length];
    }
    
    private string FormatValue(decimal value)
    {
        return ValueFormat switch
        {
            "C0" => value.ToString("C0", CultureInfo.CurrentCulture),
            "C2" => value.ToString("C2", CultureInfo.CurrentCulture),
            "N0" => value.ToString("N0", CultureInfo.CurrentCulture),
            "N2" => value.ToString("N2", CultureInfo.CurrentCulture),
            "P0" => (value / 100).ToString("P0", CultureInfo.CurrentCulture),
            "P1" => (value / 100).ToString("P1", CultureInfo.CurrentCulture),
            _ => value.ToString("C0", CultureInfo.CurrentCulture)
        };
    }
    
    private async Task OnSliceClick(ChartDataItem item)
    {
        if (EnableDrillDown && OnItemClick.HasDelegate)
        {
            await OnItemClick.InvokeAsync(item);
        }
    }
    
    private void ShowTooltip(ChartDataItem item, int index)
    {
        tooltipData = item;
        showTooltip = true;
        
        // Calculate tooltip position near the slice
        var percentage = item.Percentage ?? 0;
        var cumulativePercentage = 0m;
        for (int i = 0; i < index; i++)
        {
            cumulativePercentage += Data[i].Percentage ?? 0;
        }
        
        var midAngle = (double)(cumulativePercentage + percentage / 2) * 360 - 90;
        var midAngleRad = midAngle * Math.PI / 180;
        
        tooltipX = Center + ((double)Radius * 0.7d) * Math.Cos((double)midAngleRad);
        tooltipY = Center + ((double)Radius * 0.7d) * Math.Sin((double)midAngleRad);
        
        StateHasChanged();
    }
    
    private void HideTooltip()
    {
        showTooltip = false;
        StateHasChanged();
    }
    
    public class ChartDataItem
    {
        public string Label { get; set; } = "";
        public decimal Value { get; set; }
        public decimal? Percentage { get; set; }
        public string? Category { get; set; }
        public object? Data { get; set; } // For drill-down data
    }
    
    private class SliceData
    {
        public string Path { get; set; } = "";
    }
}

<style>
    .pie-chart-container {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        position: relative;
    }
    
    .chart-header {
        margin-bottom: 20px;
        text-align: center;
    }
    
    .chart-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #111827;
        margin: 0 0 4px 0;
    }
    
    .chart-subtitle {
        font-size: 0.875rem;
        color: #6b7280;
        margin: 0;
    }
    
    .chart-content {
        position: relative;
    }
    
    .chart-wrapper {
        display: flex;
        align-items: center;
        gap: 30px;
    }
    
    .pie-chart {
        width: 400px;
        height: 400px;
        flex-shrink: 0;
    }
    
    .pie-slice.clickable {
        cursor: pointer;
        transition: opacity 0.2s ease;
    }
    
    .pie-slice.clickable:hover {
        opacity: 0.8;
    }
    
    .center-label, .center-value {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .chart-legend {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 12px;
        max-height: 400px;
        overflow-y: auto;
    }
    
    .legend-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 8px;
        border-radius: 6px;
        transition: background-color 0.2s ease;
    }
    
    .legend-item.clickable {
        cursor: pointer;
    }
    
    .legend-item.clickable:hover {
        background-color: #f9fafb;
    }
    
    .legend-color {
        width: 16px;
        height: 16px;
        border-radius: 3px;
        flex-shrink: 0;
    }
    
    .legend-content {
        flex: 1;
    }
    
    .legend-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: #374151;
        margin-bottom: 2px;
    }
    
    .legend-value {
        font-size: 0.875rem;
        color: #6b7280;
    }
    
    .legend-percentage {
        color: #9ca3af;
        font-size: 0.8125rem;
    }
    
    .chart-tooltip {
        position: absolute;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.875rem;
        pointer-events: none;
        z-index: 1000;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transform: translate(-50%, -50%);
    }
    
    .tooltip-content {
        text-align: center;
    }
    
    .tooltip-label {
        font-weight: 500;
        margin-bottom: 2px;
    }
    
    .tooltip-value {
        font-weight: 600;
        color: #60a5fa;
    }
    
    .tooltip-percentage {
        font-size: 0.75rem;
        color: #9ca3af;
        margin-top: 2px;
    }
    
    @@media (max-width: 768px) {
        .chart-wrapper {
            flex-direction: column;
            gap: 20px;
        }
        
        .pie-chart {
            width: 300px;
            height: 300px;
        }
        
        .chart-legend {
            max-height: none;
        }
    }
</style>