@using Pilgrims.PersonalFinances.Core.Models.DTOs
@using Pilgrims.PersonalFinances.Core.Interfaces
@inject IJSRuntime JSRuntime
@inject ICurrencyService CurrencyService

<div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10" id="budget-variance-report">
    <div class="flex items-center justify-between mb-6">
        <h3 class="text-xl font-semibold text-gray-800 dark:text-white flex items-center">
            <span class="mr-2">📊</span> Budget Variance Report
            <span class="ml-4 text-sm text-gray-500">@Report.StartDate.ToString("MMM dd") - @Report.EndDate.ToString("MMM dd, yyyy")</span>
        </h3>
        <ExportButton ReportType="BudgetVariance" 
                      ReportData="Report" 
                      ElementId="budget-variance-report"
                      FileName="@($"BudgetVariance_{Report.StartDate:yyyy-MM-dd}_to_{Report.EndDate:yyyy-MM-dd}")" />
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <div class="bg-gradient-to-r from-blue-400 to-blue-600 p-4 rounded-xl text-white">
            <div class="text-sm opacity-90">Total Budgeted</div>
            <div class="text-2xl font-bold">@(formattedAmounts.TryGetValue(Report.TotalBudgetedAmount, out var formattedBudgeted) ? formattedBudgeted : Report.TotalBudgetedAmount.ToString("C"))</div>
        </div>
        <div class="bg-gradient-to-r from-purple-400 to-purple-600 p-4 rounded-xl text-white">
            <div class="text-sm opacity-90">Total Actual</div>
            <div class="text-2xl font-bold">@(formattedAmounts.TryGetValue(Report.TotalActualAmount, out var formattedActual) ? formattedActual : Report.TotalActualAmount.ToString("C"))</div>
        </div>
        <div class="bg-gradient-to-r from-@(Report.TotalVariance >= 0 ? "green" : "red")-400 to-@(Report.TotalVariance >= 0 ? "green" : "red")-600 p-4 rounded-xl text-white">
            <div class="text-sm opacity-90">Total Variance</div>
            <div class="text-2xl font-bold">@(formattedAmounts.TryGetValue(Report.TotalVariance, out var formattedVariance) ? formattedVariance : Report.TotalVariance.ToString("C"))</div>
        </div>
        <div class="bg-gradient-to-r from-indigo-400 to-indigo-600 p-4 rounded-xl text-white">
            <div class="text-sm opacity-90">Variance %</div>
            <div class="text-2xl font-bold">@((Report.TotalBudgetedAmount != 0 ? (Report.TotalVariance / Report.TotalBudgetedAmount) * 100 : 0).ToString("F1"))%</div>
        </div>
    </div>

    <!-- Overall Budget Performance -->
    <div class="mb-8">
        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Overall Budget Performance</h4>
        <div class="bg-white/50 dark:bg-gray-700/50 p-6 rounded-xl">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center space-x-4">
                    <div class="text-sm text-gray-600 dark:text-gray-300">Budgeted: @(formattedAmounts.TryGetValue(Report.TotalBudgetedAmount, out var formattedBudgetedAmount) ? formattedBudgetedAmount : Report.TotalBudgetedAmount.ToString("C"))</div>
                <div class="text-sm text-gray-600 dark:text-gray-300">Actual: @(formattedAmounts.TryGetValue(Report.TotalActualAmount, out var formattedActualAmount) ? formattedActualAmount : Report.TotalActualAmount.ToString("C"))</div>
                </div>
                <div class="text-lg font-semibold @(Report.TotalVariance >= 0 ? "text-green-600" : "text-red-600")">
                    @(Report.TotalVariance >= 0 ? "Under Budget" : "Over Budget") by @(formattedAmounts.TryGetValue(Math.Abs(Report.TotalVariance), out var formattedAbsVariance) ? formattedAbsVariance : Math.Abs(Report.TotalVariance).ToString("C"))
                </div>
            </div>
            
            <div class="relative">
                <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-6">
                    @{
                        var actualPercentage = Report.TotalBudgetedAmount > 0 ? Math.Min((double)(Report.TotalActualAmount / Report.TotalBudgetedAmount) * 100, 100) : 0;
                    }
                    <div class="@(Report.TotalActualAmount <= Report.TotalBudgetedAmount ? "bg-green-500" : "bg-red-500") h-6 rounded-full transition-all duration-1000 flex items-center justify-center text-white text-sm font-medium" 
                         style="width: @(actualPercentage)%">
                        @if (actualPercentage > 20)
                        {
                            <span>@actualPercentage.ToString("F0")%</span>
                        }
                    </div>
                </div>
                @if (Report.TotalActualAmount > Report.TotalBudgetedAmount)
                {
                    var overBudgetPercentage1 = ((decimal)(Report.TotalActualAmount - Report.TotalBudgetedAmount) / (decimal)Report.TotalBudgetedAmount) * 100;
                    <div class="absolute top-0 left-full w-4 h-6 bg-red-600 rounded-r-full flex items-center justify-center">
                        <span class="text-white text-xs">+@overBudgetPercentage1.ToString("F0")%</span>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Category Variance Analysis -->
    <div class="mb-8">
        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Category Variance Analysis</h4>
        <div class="space-y-4">
            @if (Report.VarianceItems?.Any() == true)
    {
        @foreach (var category in Report.VarianceItems.OrderByDescending(c => Math.Abs(c.Variance)))
                {
                    var variancePercentage = category.BudgetedAmount > 0 ? (category.Variance / category.BudgetedAmount) * 100 : 0;
                    var actualPercentage1 = category.BudgetedAmount > 0 ? Math.Min((category.ActualAmount / category.BudgetedAmount) * 100, 100) : 0;
                    var isOverBudget = category.ActualAmount > category.BudgetedAmount;
                    
                    <div class="bg-white/50 dark:bg-gray-700/50 p-4 rounded-xl">
                        <div class="flex items-center justify-between mb-3">
                            <div class="flex items-center">
                                <span class="text-2xl mr-3">@GetCategoryIcon(category.CategoryName)</span>
                                <div>
                                    <div class="font-semibold text-gray-800 dark:text-white">@category.CategoryName</div>
                                    <div class="text-sm text-gray-600 dark:text-gray-300">
                                        Budgeted: @(formattedAmounts.TryGetValue(category.BudgetedAmount, out var formattedCategoryBudgeted) ? formattedCategoryBudgeted : category.BudgetedAmount.ToString("C")) | Actual: @(formattedAmounts.TryGetValue(category.ActualAmount, out var formattedCategoryActual) ? formattedCategoryActual : category.ActualAmount.ToString("C"))
                                    </div>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-lg font-bold @(category.Variance >= 0 ? "text-green-600" : "text-red-600")">
                                    @(category.Variance >= 0 ? "+" : "")@(formattedAmounts.TryGetValue(category.Variance, out var formattedCategoryVariance) ? formattedCategoryVariance : category.Variance.ToString("C"))
                                </div>
                                <div class="text-sm @(variancePercentage >= 0 ? "text-green-600" : "text-red-600")">
                                    @(variancePercentage >= 0 ? "+" : "")@variancePercentage.ToString("F1")%
                                </div>
                            </div>
                        </div>
                        
                        <div class="relative">
                            <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-4">
                                <div class="@(isOverBudget ? "bg-red-500" : "bg-green-500") h-4 rounded-full transition-all duration-1000" 
                                     style="width: @(actualPercentage1)%"></div>
                            </div>
                            @if (isOverBudget)
                            {
                                var overPercentage = ((category.ActualAmount - category.BudgetedAmount) / category.BudgetedAmount) * 100;
                                <div class="absolute top-0 left-full w-2 h-4 bg-red-600 rounded-r-full"></div>
                            }
                        </div>
                        
                        <div class="flex justify-between text-xs text-gray-500 mt-1">
                            <span>0%</span>
                            <span>50%</span>
                            <span>100%</span>
                            @if (isOverBudget)
                            {
                                <span class="text-red-600">@((category.ActualAmount / category.BudgetedAmount * 100).ToString("F0"))%</span>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center text-gray-500 py-8">
                    <div class="text-4xl mb-2">📊</div>
                    <div>No budget variance data available</div>
                </div>
            }
        </div>
    </div>

    <!-- Monthly Variance Trend -->
    <div class="mb-8">
        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Monthly Variance Trend</h4>
        <div class="bg-white/50 dark:bg-gray-700/50 p-6 rounded-xl">
            <div class="h-64 flex items-end justify-between space-x-2">
                @if (Report.MonthlyVariances?.Any() == true)
                {
                    var maxVariance = Report.MonthlyVariances.Max(m => Math.Max(m.BudgetedAmount, m.ActualAmount));
                    if (maxVariance == 0) maxVariance = 1000;
                    
                    @foreach (var month in Report.MonthlyVariances.OrderBy(m => m.Year).ThenBy(m => m.Month))
                    {
                        var budgetedHeight = (month.BudgetedAmount / maxVariance) * 200;
                        var actualHeight = (month.ActualAmount / maxVariance) * 200;
                        
                        <div class="flex flex-col items-center flex-1 space-y-1">
                            <div class="flex items-end space-x-1 w-full">
                                <!-- Budgeted Bar -->
                                <div class="bg-blue-400 rounded-t flex-1 transition-all duration-1000" 
                                     style="height: @(budgetedHeight)px; min-height: 10px;"
                                     title="Budgeted: @(formattedAmounts.TryGetValue(month.BudgetedAmount, out var formattedMonthBudgeted) ? formattedMonthBudgeted : month.BudgetedAmount.ToString("C"))"></div>
                                <!-- Actual Bar -->
                                <div class="@(month.ActualAmount <= month.BudgetedAmount ? "bg-green-500" : "bg-red-500") rounded-t flex-1 transition-all duration-1000" 
                                     style="height: @(actualHeight)px; min-height: 10px;"
                                     title="Actual: @(formattedAmounts.TryGetValue(month.ActualAmount, out var formattedMonthActual) ? formattedMonthActual : month.ActualAmount.ToString("C"))"></div>
                            </div>
                            <div class="text-xs text-center text-gray-600 dark:text-gray-300">
                                <div>@month.MonthName</div>
                                <div class="font-semibold @(month.Variance >= 0 ? "text-green-600" : "text-red-600")">
                                    @(month.Variance >= 0 ? "+" : "")@month.Variance.ToString("C0")
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="w-full text-center text-gray-500 py-8">No monthly variance data available</div>
                }
            </div>
            
            <!-- Legend -->
            <div class="flex justify-center space-x-6 mt-4">
                <div class="flex items-center">
                    <div class="w-4 h-4 bg-blue-400 rounded mr-2"></div>
                    <span class="text-sm text-gray-600 dark:text-gray-300">Budgeted</span>
                </div>
                <div class="flex items-center">
                    <div class="w-4 h-4 bg-green-500 rounded mr-2"></div>
                    <span class="text-sm text-gray-600 dark:text-gray-300">Under Budget</span>
                </div>
                <div class="flex items-center">
                    <div class="w-4 h-4 bg-red-500 rounded mr-2"></div>
                    <span class="text-sm text-gray-600 dark:text-gray-300">Over Budget</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Budget Performance Insights -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Performance Metrics -->
        <div class="bg-gradient-to-r from-blue-100 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 p-6 rounded-xl">
            <h5 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Performance Metrics</h5>
            <div class="space-y-4">
                @{
                    var budgetAccuracy = Report.TotalBudgetedAmount > 0 ? (1 - Math.Abs(Report.TotalVariance) / Report.TotalBudgetedAmount) * 100 : 0;
                    var categoriesOverBudget = Report.VarianceItems?.Count(c => c.Variance < 0) ?? 0;
                    var totalCategories = Report.VarianceItems?.Count ?? 1;
                    var overBudgetPercentage = (double)categoriesOverBudget / totalCategories * 100;
                }
                
                <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-300">Budget Accuracy</span>
                    <div class="flex items-center">
                        <div class="w-20 bg-gray-200 dark:bg-gray-600 rounded-full h-2 mr-2">
                            <div class="@(budgetAccuracy >= 80 ? "bg-green-500" : budgetAccuracy >= 60 ? "bg-yellow-500" : "bg-red-500") h-2 rounded-full transition-all duration-1000" 
                                 style="width: @(budgetAccuracy)%"></div>
                        </div>
                        <span class="font-semibold @(budgetAccuracy >= 80 ? "text-green-600" : budgetAccuracy >= 60 ? "text-yellow-600" : "text-red-600")">
                            @budgetAccuracy.ToString("F0")%
                        </span>
                    </div>
                </div>
                
                <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-300">Categories Over Budget</span>
                    <span class="font-semibold @(overBudgetPercentage <= 20 ? "text-green-600" : overBudgetPercentage <= 40 ? "text-yellow-600" : "text-red-600")">
                        @categoriesOverBudget/@totalCategories (@overBudgetPercentage.ToString("F0")%)
                    </span>
                </div>
                
                <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-300">Spending Efficiency</span>
                    @{
                        var efficiency = Report.TotalBudgetedAmount > 0 ? (Report.TotalActualAmount / Report.TotalBudgetedAmount) * 100 : 0;
                    }
                    <span class="font-semibold @(efficiency <= 100 ? "text-green-600" : "text-red-600")">
                        @efficiency.ToString("F0")%
                    </span>
                </div>
            </div>
        </div>

        <!-- Recommendations -->
        <div class="bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900/20 dark:to-emerald-900/20 p-6 rounded-xl">
            <h5 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Recommendations</h5>
            <div class="space-y-3">
                @{
                    var recommendations = GetRecommendations();
                }
                @foreach (var recommendation in recommendations)
                {
                    <div class="flex items-start text-sm text-gray-600 dark:text-gray-300">
                        <span class="w-2 h-2 bg-green-500 rounded-full mr-3 mt-2 flex-shrink-0"></span>
                        <span>@recommendation</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public BudgetVarianceReportDto Report { get; set; } = new();
    [Parameter] public Action<string>? OnCategoryClick { get; set; }
    
    private Dictionary<decimal, string> formattedAmounts = new();

    protected override async Task OnParametersSetAsync()
    {
        await PreformatAmounts();
    }

    private async Task PreformatAmounts()
    {
        var amounts = new HashSet<decimal>();
        
        // Collect all amounts that need formatting
        amounts.Add(Report.TotalBudgetedAmount);
        amounts.Add(Report.TotalActualAmount);
        amounts.Add(Report.TotalVariance);
        amounts.Add(Math.Abs(Report.TotalVariance));
        
        if (Report.VarianceItems != null)
        {
            foreach (var item in Report.VarianceItems)
            {
                amounts.Add(item.BudgetedAmount);
                amounts.Add(item.ActualAmount);
                amounts.Add(item.Variance);
                amounts.Add(Math.Abs(item.Variance));
            }
        }
        
        if (Report.MonthlyVariances != null)
        {
            foreach (var month in Report.MonthlyVariances)
            {
                amounts.Add(month.BudgetedAmount);
                amounts.Add(month.ActualAmount);
            }
        }

        // Format all amounts
        foreach (var amount in amounts)
        {
            formattedAmounts[amount] = await CurrencyService.FormatAmountAsync(amount);
        }
    }

    private string GetCategoryIcon(string category)
    {
        return category.ToLower() switch
        {
            var c when c.Contains("food") || c.Contains("grocery") || c.Contains("restaurant") => "🍽️",
            var c when c.Contains("transport") || c.Contains("gas") || c.Contains("fuel") => "🚗",
            var c when c.Contains("housing") || c.Contains("rent") || c.Contains("mortgage") => "🏠",
            var c when c.Contains("utility") || c.Contains("electric") || c.Contains("water") => "⚡",
            var c when c.Contains("entertainment") || c.Contains("movie") || c.Contains("game") => "🎬",
            var c when c.Contains("health") || c.Contains("medical") || c.Contains("doctor") => "🏥",
            var c when c.Contains("shopping") || c.Contains("clothing") || c.Contains("retail") => "🛍️",
            var c when c.Contains("education") || c.Contains("learning") => "📚",
            var c when c.Contains("investment") || c.Contains("saving") => "💰",
            _ => "📊"
        };
    }

    private List<string> GetRecommendations()
    {
        var recommendations = new List<string>();
        
        if (Report.TotalVariance < 0)
        {
            recommendations.Add("Consider reducing spending in over-budget categories");
            recommendations.Add("Review and adjust budget allocations for next period");
        }
        else
        {
            recommendations.Add("Great job staying under budget!");
            recommendations.Add("Consider reallocating unused budget to savings or investments");
        }

        var worstCategory = Report.VarianceItems?.OrderBy(c => c.Variance).FirstOrDefault();
        if (worstCategory != null && worstCategory.Variance < 0)
        {
            recommendations.Add($"Focus on controlling {worstCategory.CategoryName} expenses");
        }

        var bestCategory = Report.VarianceItems?.OrderByDescending(c => c.Variance).FirstOrDefault();
        if (bestCategory != null && bestCategory.Variance > 0)
        {
            recommendations.Add($"Apply {bestCategory.CategoryName} budgeting strategy to other categories");
        }

        return recommendations.Take(4).ToList();
    }
}