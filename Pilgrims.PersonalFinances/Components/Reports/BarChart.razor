@using System.Globalization

<div class="bar-chart-container">
    <div class="chart-header">
        <h3 class="chart-title">@Title</h3>
        @if (!string.IsNullOrEmpty(Subtitle))
        {
            <p class="chart-subtitle">@Subtitle</p>
        }
    </div>
    
    <div class="chart-content">
        <svg class="bar-chart" viewBox="0 0 @ChartWidth @ChartHeight" preserveAspectRatio="xMidYMid meet">
            <!-- Y-axis -->
            <line x1="@MarginLeft" y1="@MarginTop" x2="@MarginLeft" y2="@(ChartHeight - MarginBottom)" 
                  stroke="#e5e7eb" stroke-width="1"/>
            
            <!-- X-axis -->
            <line x1="@MarginLeft" y1="@(ChartHeight - MarginBottom)" x2="@(ChartWidth - MarginRight)" y2="@(ChartHeight - MarginBottom)" 
                  stroke="#e5e7eb" stroke-width="1"/>
            
            <!-- Y-axis labels and grid lines -->
            @for (int i = 0; i <= YAxisSteps; i++)
            {
                var yValue = MaxValue * i / YAxisSteps;
                var yPosition = ChartHeight - MarginBottom - (i * (ChartHeight - MarginTop - MarginBottom) / YAxisSteps);
                
                <!-- Grid line -->
                <line x1="@MarginLeft" y1="@yPosition" x2="@(ChartWidth - MarginRight)" y2="@yPosition" 
                      stroke="#f3f4f6" stroke-width="0.5" opacity="0.7"/>
                
                <!-- Y-axis label -->
                @((MarkupString)$"<text x=\"{MarginLeft - 10}\" y=\"{yPosition + 4}\" text-anchor=\"end\" font-size=\"12\" fill=\"#6b7280\">{FormatValue(yValue)}</text>")
            }
            
            <!-- Bars -->
            @for (int i = 0; i < Data.Count; i++)
            {
                var item = Data[i];
                var barWidth = BarWidth;
                var barHeight = (item.Value / MaxValue) * (ChartHeight - MarginTop - MarginBottom);
                var xPosition = MarginLeft + (i * (BarWidth + BarSpacing)) + BarSpacing;
                var yPosition = ChartHeight - MarginBottom - barHeight;
                
                <!-- Bar -->
                <rect x="@xPosition" y="@yPosition" width="@barWidth" height="@barHeight"
                      fill="@GetBarColor(i)" rx="4" ry="4"
                      class="bar @(EnableDrillDown ? "clickable" : "")"
                      @onclick="() => OnBarClick(item)"
                      @onmouseover="() => ShowTooltip(item, i)"
                      @onmouseout="HideTooltip">
                    <title>@item.Label: @FormatValue(item.Value)</title>
                </rect>
                
                <!-- Value label on top of bar -->
                @if (ShowValueLabels)
                {
                    @((MarkupString)$"<text x=\"{xPosition + barWidth / 2}\" y=\"{yPosition - 5}\" text-anchor=\"middle\" font-size=\"11\" fill=\"#374151\" font-weight=\"500\">{FormatValue(item.Value)}</text>")
                }
            }
            
            <!-- X-axis labels -->
            @for (int i = 0; i < Data.Count; i++)
            {
                var item = Data[i];
                var xPosition = MarginLeft + (i * (BarWidth + BarSpacing)) + BarSpacing + (BarWidth / 2);
                var yPosition = ChartHeight - MarginBottom + 20;
                
                @((MarkupString)$"<text x=\"{xPosition}\" y=\"{yPosition}\" text-anchor=\"middle\" font-size=\"11\" fill=\"#6b7280\">{TruncateLabel(item.Label)}</text>")
            }
        </svg>
        
        <!-- Tooltip -->
        @if (showTooltip && tooltipData != null)
        {
            <div class="chart-tooltip" style="left: @(tooltipX)px; top: @(tooltipY)px;">
                <div class="tooltip-content">
                    <div class="tooltip-label">@tooltipData.Label</div>
                    <div class="tooltip-value">@FormatValue(tooltipData.Value)</div>
                    @if (tooltipData.Percentage.HasValue)
                    {
                        <div class="tooltip-percentage">@tooltipData.Percentage.Value.ToString("P1")</div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public List<ChartDataItem> Data { get; set; } = new();
    [Parameter] public bool ShowValueLabels { get; set; } = true;
    [Parameter] public bool EnableDrillDown { get; set; } = false;
    [Parameter] public EventCallback<ChartDataItem> OnItemClick { get; set; }
    [Parameter] public string[] Colors { get; set; } = new[] { "#3b82f6", "#10b981", "#f59e0b", "#ef4444", "#8b5cf6", "#06b6d4", "#84cc16", "#f97316" };
    [Parameter] public string ValueFormat { get; set; } = "C0"; // Currency format by default
    
    private const int ChartWidth = 800;
    private const int ChartHeight = 400;
    private const int MarginTop = 40;
    private const int MarginBottom = 60;
    private const int MarginLeft = 80;
    private const int MarginRight = 40;
    private const int YAxisSteps = 5;
    private const int BarSpacing = 10;
    
    private bool showTooltip = false;
    private ChartDataItem? tooltipData;
    private double tooltipX = 0;
    private double tooltipY = 0;
    
    private decimal MaxValue => Data.Any() ? Data.Max(d => d.Value) * 1.1m : 100m; // Add 10% padding
    private int BarWidth => Data.Any() ? Math.Max(20, (ChartWidth - MarginLeft - MarginRight - (Data.Count + 1) * BarSpacing) / Data.Count) : 50;
    
    private string GetBarColor(int index)
    {
        return Colors[index % Colors.Length];
    }
    
    private string FormatValue(decimal value)
    {
        return ValueFormat switch
        {
            "C0" => value.ToString("C0", CultureInfo.CurrentCulture),
            "C2" => value.ToString("C2", CultureInfo.CurrentCulture),
            "N0" => value.ToString("N0", CultureInfo.CurrentCulture),
            "N2" => value.ToString("N2", CultureInfo.CurrentCulture),
            "P0" => (value / 100).ToString("P0", CultureInfo.CurrentCulture),
            "P1" => (value / 100).ToString("P1", CultureInfo.CurrentCulture),
            _ => value.ToString("C0", CultureInfo.CurrentCulture)
        };
    }
    
    private string TruncateLabel(string label)
    {
        return label.Length > 12 ? label.Substring(0, 12) + "..." : label;
    }
    
    private async Task OnBarClick(ChartDataItem item)
    {
        if (EnableDrillDown && OnItemClick.HasDelegate)
        {
            await OnItemClick.InvokeAsync(item);
        }
    }
    
    private void ShowTooltip(ChartDataItem item, int index)
    {
        tooltipData = item;
        showTooltip = true;
        
        // Calculate tooltip position
        var barX = MarginLeft + (index * (BarWidth + BarSpacing)) + BarSpacing + (BarWidth / 2);
        tooltipX = barX - 60; // Center tooltip over bar
        tooltipY = 50; // Fixed position from top
        
        StateHasChanged();
    }
    
    private void HideTooltip()
    {
        showTooltip = false;
        StateHasChanged();
    }
    
    public class ChartDataItem
    {
        public string Label { get; set; } = "";
        public decimal Value { get; set; }
        public decimal? Percentage { get; set; }
        public string? Category { get; set; }
        public object? Data { get; set; } // For drill-down data
    }
}

<style>
    .bar-chart-container {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        position: relative;
    }
    
    .chart-header {
        margin-bottom: 20px;
    }
    
    .chart-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #111827;
        margin: 0 0 4px 0;
    }
    
    .chart-subtitle {
        font-size: 0.875rem;
        color: #6b7280;
        margin: 0;
    }
    
    .chart-content {
        position: relative;
        width: 100%;
        height: 400px;
    }
    
    .bar-chart {
        width: 100%;
        height: 100%;
    }
    
    .bar.clickable {
        cursor: pointer;
        transition: opacity 0.2s ease;
    }
    
    .bar.clickable:hover {
        opacity: 0.8;
    }
    
    .chart-label {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .value-label {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .chart-tooltip {
        position: absolute;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.875rem;
        pointer-events: none;
        z-index: 1000;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .tooltip-content {
        text-align: center;
    }
    
    .tooltip-label {
        font-weight: 500;
        margin-bottom: 2px;
    }
    
    .tooltip-value {
        font-weight: 600;
        color: #60a5fa;
    }
    
    .tooltip-percentage {
        font-size: 0.75rem;
        color: #9ca3af;
        margin-top: 2px;
    }
</style>