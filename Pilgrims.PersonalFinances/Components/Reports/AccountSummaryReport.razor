@using Pilgrims.PersonalFinances.Core.Models.DTOs
@using Pilgrims.PersonalFinances.Core.Interfaces
@inject IJSRuntime JSRuntime
@inject ICurrencyService CurrencyService

<div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10" id="account-summary-report">
    <div class="flex items-center justify-between mb-6">
        <h3 class="text-xl font-semibold text-gray-800 dark:text-white flex items-center">
            <span class="mr-2">üè¶</span> Account Summary
            <span class="ml-4 text-sm text-gray-500">@Report.StartDate.ToString("MMM dd") - @Report.EndDate.ToString("MMM dd, yyyy")</span>
        </h3>
        <ExportButton ReportType="AccountSummary" 
                      ReportData="Report" 
                      ElementId="account-summary-report" 
                      FileName="@($"AccountSummary_{Report.StartDate:yyyy-MM-dd}_to_{Report.EndDate:yyyy-MM-dd}")" />
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <div class="bg-gradient-to-r from-blue-400 to-blue-600 p-4 rounded-xl text-white">
            <div class="text-sm opacity-90">Total Balance</div>
            <div class="text-2xl font-bold">@(formattedAmounts.TryGetValue(Report.TotalBalance, out var formattedTotalBalance) ? formattedTotalBalance : Report.TotalBalance.ToString("C"))</div>
        </div>
        <div class="bg-gradient-to-r from-green-400 to-green-600 p-4 rounded-xl text-white">
            <div class="text-sm opacity-90">Total Accounts</div>
            <div class="text-2xl font-bold">@(Report.Accounts?.Count ?? 0)</div>
        </div>
        <div class="bg-gradient-to-r from-purple-400 to-purple-600 p-4 rounded-xl text-white">
            <div class="text-sm opacity-90">Active Accounts</div>
            <div class="text-2xl font-bold">@(Report.Accounts?.Count(a => a.IsActive) ?? 0)</div>
        </div>
        <div class="bg-gradient-to-r from-indigo-400 to-indigo-600 p-4 rounded-xl text-white">
            <div class="text-sm opacity-90">Avg Balance</div>
            <div class="text-2xl font-bold">@{
                var avgBalance = Report.Accounts?.Count > 0 ? Report.TotalBalance / Report.Accounts.Count : 0;
            }@(formattedAmounts.TryGetValue(avgBalance, out var formattedAvgBalance) ? formattedAvgBalance : avgBalance.ToString("C"))</div>
        </div>
    </div>

    <!-- Account Type Distribution -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Account Balance Chart -->
        <div>
            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Account Balance Distribution</h4>
            <div class="flex items-center justify-center mb-6">
                <div class="relative w-64 h-64">
                    <svg class="w-full h-full transform -rotate-90" viewBox="0 0 200 200">
                        @if (Report.Accounts?.Any() == true)
                        {
                            var radius = 80;
                            var strokeWidth = 30;
                            var circumference = 2 * Math.PI * radius;
                            var currentAngle = 0;
                            var colors = new[] { "#3b82f6", "#10b981", "#f59e0b", "#8b5cf6", "#ef4444", "#06b6d4", "#84cc16", "#f97316", "#ec4899", "#6366f1" };
                            var accountsWithBalance = Report.Accounts.Where(a => a.Balance > 0).OrderByDescending(a => a.Balance).ToList();
                            
                            @for (int i = 0; i < Math.Min(accountsWithBalance.Count, colors.Length); i++)
                            {
                                var account = accountsWithBalance[i];
                                var percentage = Report.TotalBalance > 0 ? (double)(account.Balance / Report.TotalBalance) * 100 : 0;
                                var strokeDasharray = (percentage / 100.0) * circumference;
                                var strokeDashoffset = -currentAngle * circumference / 100.0;
                                currentAngle += (int)percentage;
                                
                                <circle cx="100" cy="100" r="@radius" 
                                        stroke="@colors[i]" stroke-width="@strokeWidth" 
                                        fill="transparent"
                                        stroke-dasharray="@strokeDasharray @(circumference - strokeDasharray)"
                                        stroke-dashoffset="@strokeDashoffset"
                                        class="transition-all duration-1000 cursor-pointer hover:opacity-80"
                                        title="@account.Name: @account.Balance.ToString("C")"
                                        @onclick="() => OnAccountClick(account.Name)"/>
                            }
                        }
                    </svg>
                    <div class="absolute inset-0 flex items-center justify-center">
                        <div class="text-center">
                            <div class="text-2xl font-bold text-gray-800 dark:text-white">@((Report.TotalBalance / 1000).ToString("F0"))K</div>
                            <div class="text-sm text-gray-600 dark:text-gray-300">Total Balance</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Account Legend -->
            <div class="space-y-2 max-h-48 overflow-y-auto">
                @if (Report.Accounts?.Any() == true)
                {
                    var colors = new[] { "#3b82f6", "#10b981", "#f59e0b", "#8b5cf6", "#ef4444", "#06b6d4", "#84cc16", "#f97316", "#ec4899", "#6366f1" };
                    var accountsWithBalance = Report.Accounts.Where(a => a.Balance > 0).OrderByDescending(a => a.Balance).ToList();
                    @for (int i = 0; i < Math.Min(accountsWithBalance.Count, colors.Length); i++)
                    {
                        var account = accountsWithBalance[i];
                        var percentage = Report.TotalBalance > 0 ? (account.Balance / Report.TotalBalance) * 100 : 0;
                        <div class="flex items-center justify-between cursor-pointer hover:bg-white/20 p-2 rounded" 
                             @onclick="() => OnAccountClick(account.Name)">
                            <div class="flex items-center">
                                <div class="w-4 h-4 rounded-full mr-3" style="background-color: @colors[i]"></div>
                                <div>
                                    <div class="font-medium text-gray-800 dark:text-white">@account.Name</div>
                                    <div class="text-xs text-gray-500">@account.AccountType</div>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="font-semibold">@account.Balance.ToString("C")</div>
                                <div class="text-xs text-gray-500">@percentage.ToString("F1")%</div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Account Performance -->
        <div>
            <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Account Performance</h4>
            <div class="space-y-4">
                @if (Report.Accounts?.Any() == true)
                {
                    var sortedAccounts = Report.Accounts.OrderByDescending(a => a.Balance).ToList();
                    var maxBalance = sortedAccounts.FirstOrDefault()?.Balance ?? 1;
                    @foreach (var account in sortedAccounts)
                    {
                        var percentage = maxBalance > 0 ? (account.Balance / maxBalance) * 100 : 0;
                        var totalPercentage = Report.TotalBalance > 0 ? (account.Balance / Report.TotalBalance) * 100 : 0;
                        var statusColor = account.IsActive ? "text-green-600" : "text-red-600";
                        var statusIcon = account.IsActive ? "‚úÖ" : "‚ùå";
                        
                        <div class="bg-white/50 dark:bg-gray-700/50 p-4 rounded-lg cursor-pointer hover:bg-white/70 dark:hover:bg-gray-600/50 transition-all"
                             @onclick="() => OnAccountClick(account.Name)">
                            <div class="flex items-center justify-between mb-2">
                                <div class="flex items-center">
                                    <span class="text-2xl mr-3">@GetAccountIcon(account.AccountType)</span>
                                    <div>
                                        <div class="font-semibold text-gray-800 dark:text-white flex items-center">
                                            @account.Name
                                            <span class="ml-2 text-sm @statusColor">@statusIcon</span>
                                        </div>
                                        <div class="text-sm text-gray-600 dark:text-gray-300">@account.AccountType</div>
                                    </div>
                                </div>
                                <div class="text-right">
                                    <div class="font-bold text-lg">@account.Balance.ToString("C")</div>
                                    <div class="text-sm text-gray-500">@totalPercentage.ToString("F1")% of total</div>
                                </div>
                            </div>
                            <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-3">
                                <div class="bg-gradient-to-r from-blue-400 to-blue-600 h-3 rounded-full transition-all duration-1000" 
                                     style="width: @(percentage)%"></div>
                            </div>
                            @if (account.MonthlyChange != 0)
                            {
                                var changeColor = account.MonthlyChange > 0 ? "text-green-600" : "text-red-600";
                                var changeIcon = account.MonthlyChange > 0 ? "‚ÜóÔ∏è" : "‚ÜòÔ∏è";
                                <div class="mt-2 text-sm @changeColor flex items-center">
                                    <span class="mr-1">@changeIcon</span>
                                    <span>@account.MonthlyChange.ToString("C") this month</span>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <!-- Account Type Breakdown -->
    <div class="mb-8">
        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Account Types Overview</h4>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            @if (Report.Accounts?.Any() == true)
            {
                var accountTypeGroups = Report.Accounts.GroupBy(a => a.AccountType).ToList();
                @foreach (var group in accountTypeGroups)
                {
                    var totalBalance = group.Sum(a => a.Balance);
                    var accountCount = group.Count();
                    var avgAccountBalance = accountCount > 0 ? totalBalance / accountCount : 0;
                    var percentage = Report.TotalBalance > 0 ? (totalBalance / Report.TotalBalance) * 100 : 0;
                    
                    <div class="bg-gradient-to-br from-white/60 to-white/30 dark:from-gray-700/60 dark:to-gray-700/30 p-4 rounded-xl border border-white/20">
                        <div class="flex items-center justify-between mb-3">
                            <div class="flex items-center">
                                <span class="text-2xl mr-2">@GetAccountIcon(group.Key)</span>
                                <span class="font-semibold text-gray-800 dark:text-white">@group.Key</span>
                            </div>
                            <span class="text-sm font-semibold text-gray-600 dark:text-gray-300">@percentage.ToString("F1")%</span>
                        </div>
                        
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-600 dark:text-gray-400">Total Balance</span>
                                <span class="font-semibold">@totalBalance.ToString("C")</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600 dark:text-gray-400">Accounts</span>
                                <span class="font-semibold">@accountCount</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600 dark:text-gray-400">Avg Balance</span>
                                <span class="font-semibold">@avgAccountBalance.ToString("C")</span>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Monthly Balance Trends -->
    <div class="mb-8">
        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Monthly Balance Trends</h4>
        <div class="bg-white/50 dark:bg-gray-700/50 p-6 rounded-xl">
            <div class="h-64 flex items-end justify-between space-x-2">
                @if (Report.MonthlyBreakdown?.Any() == true)
                {
                    var maxMonthlyBalance = Report.MonthlyBreakdown.Max(m => m.Accounts?.Max(a => a.Balance) ?? 0);
                    if (maxMonthlyBalance == 0) maxMonthlyBalance = 10000;
                    var topAccountsForChart = Report.Accounts?.OrderByDescending(a => a.Balance).Take(5).ToList() ?? new List<Pilgrims.PersonalFinances.Core.Models.DTOs.AccountSummaryDto>();
                    var colors = new[] { "#3b82f6", "#10b981", "#f59e0b", "#8b5cf6", "#ef4444" };
                    @foreach (var month in Report.MonthlyBreakdown.OrderBy(m => m.Month))
                    {
                        <div class="flex flex-col items-center flex-1">
                            <div class="flex flex-col-reverse items-center w-full space-y-reverse space-y-1">
                                @for (int i = 0; i < topAccountsForChart.Count; i++)
                                {
                                    var account = topAccountsForChart[i];
                                    var monthlyBalance = month.Accounts?.FirstOrDefault(a => a.Name == account.Name)?.Balance ?? 0;
                                    var height = maxMonthlyBalance > 0 ? (monthlyBalance / maxMonthlyBalance) * 200 : 0;
                                    
                                    <div class="w-full transition-all duration-1000 cursor-pointer hover:opacity-80" 
                                         style="height: @(height)px; min-height: @(monthlyBalance > 0 ? "4" : "0")px; background-color: @colors[i];"
                                         title="@account.Name: @monthlyBalance.ToString("C")"
                                         @onclick="() => OnAccountClick(account.Name)"></div>
                                }
                            </div>
                            <div class="text-xs text-center mt-2 text-gray-600 dark:text-gray-300">
                                <div>@month.Month.ToString("MMM")</div>
                                <div class="font-semibold">@(month.Accounts?.Sum(a => a.Balance).ToString("C0") ?? "$0")</div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="w-full text-center text-gray-500 py-8">No monthly trend data available</div>
                }
            </div>
            
            <!-- Chart Legend -->
            <div class="flex flex-wrap justify-center gap-4 mt-4">
                @if (Report.Accounts?.Any() == true)
                {
                    var topAccountsForLegend = Report.Accounts.OrderByDescending(a => a.Balance).Take(5).ToList();
                    var colors = new[] { "#3b82f6", "#10b981", "#f59e0b", "#8b5cf6", "#ef4444" };
                    @for (int i = 0; i < topAccountsForLegend.Count; i++)
                    {
                        <div class="flex items-center cursor-pointer hover:opacity-80" @onclick="() => OnAccountClick(topAccountsForLegend[i].Name)">
                            <div class="w-3 h-3 rounded mr-2" style="background-color: @colors[i]"></div>
                            <span class="text-sm text-gray-600 dark:text-gray-300">@topAccountsForLegend[i].Name</span>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <!-- Account Health and Insights -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Account Health -->
        <div class="bg-gradient-to-r from-blue-100 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 p-6 rounded-xl">
            <h5 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Account Health</h5>
            <div class="space-y-4">
                @{
                    var healthInsights = GetAccountHealthInsights();
                }
                @foreach (var insight in healthInsights)
                {
                    <div class="flex items-start text-sm text-gray-600 dark:text-gray-300">
                        <span class="w-2 h-2 bg-blue-500 rounded-full mr-3 mt-2 flex-shrink-0"></span>
                        <span>@insight</span>
                    </div>
                }
            </div>
        </div>

        <!-- Optimization Recommendations -->
        <div class="bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900/20 dark:to-emerald-900/20 p-6 rounded-xl">
            <h5 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Optimization Tips</h5>
            <div class="space-y-4">
                @{
                    var recommendations = GetOptimizationRecommendations();
                }
                @foreach (var recommendation in recommendations)
                {
                    <div class="flex items-start text-sm text-gray-600 dark:text-gray-300">
                        <span class="w-2 h-2 bg-green-500 rounded-full mr-3 mt-2 flex-shrink-0"></span>
                        <span>@recommendation</span>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Detailed Account List -->
    <div class="mt-8">
        <h4 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Detailed Account Information</h4>
        <div class="bg-white/50 dark:bg-gray-700/50 rounded-xl overflow-hidden">
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-white/30 dark:bg-gray-600/30">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Account</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Type</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Balance</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Monthly Change</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">% of Total</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-gray-600">
                        @if (Report.Accounts?.Any() == true)
                        {
                            @foreach (var account in Report.Accounts.OrderByDescending(a => a.Balance))
                            {
                                var percentage = Report.TotalBalance > 0 ? (account.Balance / Report.TotalBalance) * 100 : 0;
                                var changeColor = account.MonthlyChange > 0 ? "text-green-600" : account.MonthlyChange < 0 ? "text-red-600" : "text-gray-600";
                                var statusColor = account.IsActive ? "text-green-600" : "text-red-600";
                                var statusText = account.IsActive ? "Active" : "Inactive";
                                
                                <tr class="hover:bg-white/20 dark:hover:bg-gray-600/20 cursor-pointer transition-all" @onclick="() => OnAccountClick(account.Name)">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <span class="text-xl mr-3">@GetAccountIcon(account.AccountType)</span>
                                            <div>
                                                <div class="text-sm font-medium text-gray-900 dark:text-white">@account.Name</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">@account.AccountType</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900 dark:text-white">@account.Balance.ToString("C")</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm @changeColor font-medium">
                                        @if (account.MonthlyChange != 0)
                                        {
                                            <span>@(account.MonthlyChange > 0 ? "+" : "")@account.MonthlyChange.ToString("C")</span>
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm @statusColor font-medium">@statusText</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">@percentage.ToString("F1")%</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Pilgrims.PersonalFinances.Core.Models.DTOs.AccountSummaryReportDto Report { get; set; } = new();
    [Parameter] public EventCallback<string> OnAccountDrillDown { get; set; }

    private string GetAccountIcon(string accountType)
    {
        return accountType.ToLower() switch
        {
            var t when t.Contains("checking") || t.Contains("current") => "üè¶",
            var t when t.Contains("saving") => "üí∞",
            var t when t.Contains("credit") => "üí≥",
            var t when t.Contains("investment") || t.Contains("brokerage") => "üìà",
            var t when t.Contains("retirement") || t.Contains("401k") || t.Contains("ira") => "üèõÔ∏è",
            var t when t.Contains("loan") || t.Contains("mortgage") => "üè†",
            var t when t.Contains("cash") => "üíµ",
            var t when t.Contains("business") => "üè¢",
            var t when t.Contains("joint") => "üë•",
            _ => "üè¶"
        };
    }

    private async Task OnAccountClick(string accountName)
    {
        if (OnAccountDrillDown.HasDelegate)
        {
            await OnAccountDrillDown.InvokeAsync(accountName);
        }
    }

    private List<string> GetAccountHealthInsights()
    {
        var insights = new List<string>();
        
        if (Report.Accounts?.Any() == true)
        {
            var activeAccounts = Report.Accounts.Count(a => a.IsActive);
            var totalAccounts = Report.Accounts.Count;
            insights.Add($"{activeAccounts} of {totalAccounts} accounts are currently active");
            
            var accountsWithPositiveChange = Report.Accounts.Count(a => a.MonthlyChange > 0);
            if (accountsWithPositiveChange > 0)
            {
                insights.Add($"{accountsWithPositiveChange} accounts showed positive growth this month");
            }
            
            var largestAccount = Report.Accounts.OrderByDescending(a => a.Balance).First();
            var largestPercentage = Report.TotalBalance > 0 ? (largestAccount.Balance / Report.TotalBalance) * 100 : 0;
            insights.Add($"{largestAccount.Name} holds {largestPercentage:F1}% of your total balance");
            
            var accountTypes = Report.Accounts.GroupBy(a => a.AccountType).Count();
            insights.Add($"Your portfolio is diversified across {accountTypes} different account types");
        }
        
        return insights.Take(4).ToList();
    }

    private List<string> GetOptimizationRecommendations()
    {
        var recommendations = new List<string>();
        
        if (Report.Accounts?.Any() == true)
        {
            var inactiveAccounts = Report.Accounts.Where(a => !a.IsActive).ToList();
            if (inactiveAccounts.Any())
            {
                recommendations.Add($"Consider closing or reactivating {inactiveAccounts.Count} inactive accounts");
            }
            
            var lowBalanceAccounts = Report.Accounts.Where(a => a.Balance < 100 && a.Balance > 0).ToList();
            if (lowBalanceAccounts.Any())
            {
                recommendations.Add($"Consider consolidating {lowBalanceAccounts.Count} accounts with low balances");
            }
            
            var decliningAccounts = Report.Accounts.Where(a => a.MonthlyChange < -100).ToList();
            if (decliningAccounts.Any())
            {
                recommendations.Add("Review accounts with significant monthly declines for optimization opportunities");
            }
            
            var savingsAccounts = Report.Accounts.Where(a => a.AccountType.ToLower().Contains("saving")).ToList();
            if (savingsAccounts.Any())
            {
                recommendations.Add("Consider high-yield savings options to maximize returns on savings accounts");
            }
            else
            {
                recommendations.Add("Consider opening a savings account to separate emergency funds from checking");
            }
        }
        
        return recommendations.Take(4).ToList();
    }

    private Dictionary<decimal, string> formattedAmounts = new();

    private async Task PreformatAmounts()
    {
        var amounts = new List<decimal>();
        
        // Add main summary amounts
        amounts.Add(Report.TotalBalance);
        if (Report.Accounts?.Count > 0)
        {
            amounts.Add(Report.TotalBalance / Report.Accounts.Count);
        }
        
        // Add individual account balances and monthly changes
        if (Report.Accounts?.Any() == true)
        {
            foreach (var account in Report.Accounts)
            {
                amounts.Add(account.Balance);
                amounts.Add(account.MonthlyChange);
            }
        }
        
        // Add account type totals
        if (Report.Accounts?.Any() == true)
        {
            var accountTypes = Report.Accounts.GroupBy(a => a.AccountType);
            foreach (var type in accountTypes)
            {
                amounts.Add(type.Sum(a => a.Balance));
                amounts.Add(type.Average(a => a.Balance));
            }
        }
        
        // Add monthly trend amounts
        if (Report.MonthlyTrends?.Any() == true)
        {
            foreach (var month in Report.MonthlyTrends)
            {
                if (month.Accounts?.Any() == true)
                {
                    foreach (var account in month.Accounts)
                    {
                        amounts.Add(account.Balance);
                    }
                    amounts.Add(month.Accounts.Sum(a => a.Balance));
                }
            }
        }
        
        // Format all amounts
        foreach (var amount in amounts.Distinct())
        {
            formattedAmounts[amount] = await CurrencyService.FormatAmountAsync(amount);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await PreformatAmounts();
    }
}