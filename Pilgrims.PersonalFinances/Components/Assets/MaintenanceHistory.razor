@using System.Globalization

<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-6">
    <div class="flex items-center justify-between mb-6">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
            <svg class="w-5 h-5 mr-2 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path>
            </svg>
            Maintenance History
        </h3>
        <button @onclick="() => OnAddMaintenance.InvokeAsync(Asset)" 
                class="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-sm font-medium rounded-lg transition-colors flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Add Record
        </button>
    </div>

    @if (Asset.MaintenanceRecords?.Any() == true)
    {
        <!-- Maintenance Summary -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div class="bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-blue-600 dark:text-blue-400">
                            Total Records
                        </p>
                        <p class="text-xl font-bold text-blue-900 dark:text-blue-100">
                            @Asset.MaintenanceRecords.Count
                        </p>
                    </div>
                    <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                        <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <div class="bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-lg p-4 border border-green-200 dark:border-green-800">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-green-600 dark:text-green-400">
                            Total Cost
                        </p>
                        <p class="text-xl font-bold text-green-900 dark:text-green-100">
                            @Asset.MaintenanceCostTotal.ToString("C", CultureInfo.CurrentCulture)
                        </p>
                    </div>
                    <div class="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                        <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"></path>
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <div class="bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-lg p-4 border border-purple-200 dark:border-purple-800">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-purple-600 dark:text-purple-400">
                            Last Service
                        </p>
                        <p class="text-lg font-bold text-purple-900 dark:text-purple-100">
                            @GetLastServiceDate()
                        </p>
                    </div>
                    <div class="w-10 h-10 bg-purple-500 rounded-full flex items-center justify-center">
                        <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <div class="bg-gradient-to-r from-yellow-50 to-yellow-100 dark:from-yellow-900/20 dark:to-yellow-800/20 rounded-lg p-4 border border-yellow-200 dark:border-yellow-800">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-yellow-600 dark:text-yellow-400">
                            Avg. Cost
                        </p>
                        <p class="text-lg font-bold text-yellow-900 dark:text-yellow-100">
                            @GetAverageMaintenanceCost().ToString("C", CultureInfo.CurrentCulture)
                        </p>
                    </div>
                    <div class="w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center">
                        <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                </div>
            </div>
        </div>

        <!-- Maintenance Timeline -->
        <div class="space-y-4">
            <h4 class="text-md font-semibold text-gray-900 dark:text-white">
                Service History
            </h4>
            
            <div class="relative">
                <!-- Timeline line -->
                <div class="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-300 dark:bg-gray-600"></div>
                
                <!-- Timeline items -->
                <div class="space-y-6">
                    @foreach (var record in Asset.MaintenanceRecords.OrderByDescending(r => r.ServiceDate))
                    {
                        var isRecent = record.ServiceDate >= DateTime.Now.AddDays(-30);
                        var maintenanceType = GetMaintenanceTypeInfo(record.ServiceType);
                        
                        <div class="relative flex items-start">
                            <div class="absolute left-0 w-8 h-8 @maintenanceType.BgColor rounded-full flex items-center justify-center">
                                <span class="text-white text-sm">@maintenanceType.Icon</span>
                            </div>
                            <div class="ml-12 flex-1">
                                <div class="bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 p-4">
                                    <div class="flex items-start justify-between">
                                        <div class="flex-1">
                                            <div class="flex items-center space-x-3 mb-2">
                                                <h5 class="text-lg font-semibold text-gray-900 dark:text-white">
                                                    @record.ServiceType
                                                </h5>
                                                @if (isRecent)
                                                {
                                                    <span class="px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400">
                                                        Recent
                                                    </span>
                                                }
                                                @if (record.Cost > 0)
                                                {
                                                    <span class="px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400">
                                                        @record.Cost.ToString("C", CultureInfo.CurrentCulture)
                                                    </span>
                                                }
                                            </div>
                                            
                                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm mb-3">
                                                <div>
                                                    <p class="font-medium text-gray-700 dark:text-gray-300">Service Date</p>
                                                    <p class="text-gray-900 dark:text-white">
                                                        @record.ServiceDate.ToString("MMM dd, yyyy")
                                                    </p>
                                                </div>
                                                @if (!string.IsNullOrEmpty(record.ServiceProvider))
                                                {
                                                    <div>
                                                        <p class="font-medium text-gray-700 dark:text-gray-300">Service Provider</p>
                                                        <p class="text-gray-900 dark:text-white">@record.ServiceProvider</p>
                                                    </div>
                                                }
                                                @if (record.NextServiceDue.HasValue)
                                                {
                                                    <div>
                                                        <p class="font-medium text-gray-700 dark:text-gray-300">Next Service</p>
                                                        <p class="text-gray-900 dark:text-white">
                                                            @record.NextServiceDue.Value.ToString("MMM dd, yyyy")
                                                        </p>
                                                    </div>
                                                }
                                            </div>

                                            @if (!string.IsNullOrEmpty(record.Description))
                                            {
                                                <div class="mb-3">
                                                    <p class="text-sm text-gray-600 dark:text-gray-400">
                                                        @record.Description
                                                    </p>
                                                </div>
                                            }

                                            @* Notes section removed as AssetMaintenance model doesn't have Notes property *@
                                        </div>

                                        <div class="flex items-center space-x-2 ml-4">
                                            <button @onclick="() => OnEditMaintenance.InvokeAsync(record)" 
                                                    class="p-2 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                </svg>
                                            </button>
                                            <button @onclick="() => OnDeleteMaintenance.InvokeAsync(record)" 
                                                    class="p-2 text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Maintenance Insights -->
        <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
            <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-3">
                Maintenance Insights
            </h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                    <div class="flex justify-between items-center mb-2">
                        <span class="text-gray-600 dark:text-gray-400">Maintenance vs Asset Value</span>
                        <span class="font-medium text-gray-900 dark:text-white">
                            @GetMaintenanceToValueRatio().ToString("P1")
                        </span>
                    </div>
                    <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                        <div class="bg-gradient-to-r from-orange-400 to-red-500 h-2 rounded-full" 
                             style="width: @Math.Min(100, GetMaintenanceToValueRatio() * 100)%"></div>
                    </div>
                </div>
                <div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600 dark:text-gray-400">Most Common Service</span>
                        <span class="font-medium text-gray-900 dark:text-white">
                            @GetMostCommonMaintenanceType()
                        </span>
                    </div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        Based on service history
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- No Maintenance Records State -->
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">
                No maintenance records
            </h3>
            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                Keep track of your asset's service history and maintenance costs.
            </p>
            <div class="mt-6">
                <button @onclick="() => OnAddMaintenance.InvokeAsync(Asset)" 
                        class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                    <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Add Maintenance Record
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Asset Asset { get; set; } = null!;
    [Parameter] public EventCallback<Asset> OnAddMaintenance { get; set; }
    [Parameter] public EventCallback<AssetMaintenance> OnEditMaintenance { get; set; }
    [Parameter] public EventCallback<AssetMaintenance> OnDeleteMaintenance { get; set; }

    private string GetLastServiceDate()
    {
        var lastService = Asset.MaintenanceRecords?
            .OrderByDescending(r => r.ServiceDate)
            .FirstOrDefault()?.ServiceDate;

        return lastService?.ToString("MMM dd") ?? "Never";
    }

    private decimal GetAverageMaintenanceCost()
    {
        var records = Asset.MaintenanceRecords?.Where(r => r.Cost > 0).ToList();
        return records?.Any() == true ? records.Average(r => r.Cost) : 0;
    }

    private double GetMaintenanceToValueRatio()
    {
        var totalCost = Asset.MaintenanceCostTotal;
        return Asset.CurrentValue > 0 ? (double)(totalCost / Asset.CurrentValue) : 0;
    }

    private string GetMostCommonMaintenanceType()
    {
        var mostCommon = Asset.MaintenanceRecords?
            .GroupBy(r => r.ServiceType)
            .OrderByDescending(g => g.Count())
            .FirstOrDefault()?.Key;

        return mostCommon ?? "N/A";
    }

    private (string Icon, string BgColor) GetMaintenanceTypeInfo(string? maintenanceType)
    {
        var type = maintenanceType?.ToLowerInvariant();
        if (string.IsNullOrWhiteSpace(type))
        {
            return ("📋", "bg-gray-500");
        }

        if (type.Contains("repair")) return ("🔧", "bg-red-500");
        if (type.Contains("service")) return ("⚙️", "bg-blue-500");
        if (type.Contains("inspection")) return ("🔍", "bg-green-500");
        if (type.Contains("cleaning")) return ("🧽", "bg-cyan-500");
        if (type.Contains("maintenance")) return ("🛠️", "bg-orange-500");
        if (type.Contains("upgrade")) return ("⬆️", "bg-purple-500");
        if (type.Contains("replacement")) return ("🔄", "bg-yellow-500");
        return ("📋", "bg-gray-500");
    }
}