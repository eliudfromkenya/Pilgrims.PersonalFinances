@using Pilgrims.PersonalFinances.Models

@code {
    [Parameter] public Asset Asset { get; set; } = null!;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowQuickActions { get; set; } = false;
    [Parameter] public EventCallback<Asset> OnViewDetails { get; set; }
    [Parameter] public EventCallback<Asset> OnEdit { get; set; }
    [Parameter] public EventCallback<Asset> OnDelete { get; set; }

    private bool showDropdown = false;

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }

    private string GetConditionBadgeClass()
    {
        return Asset?.Condition?.ToLower() switch
        {
            "excellent" => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            "good" => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            "fair" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
            "poor" => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300"
        };
    }

    private string GetValueChangeClass()
    {
        if (Asset?.PurchasePrice == null || Asset?.CurrentValue == null)
            return "text-gray-500";

        var change = Asset.CurrentValue - Asset.PurchasePrice;
        return change >= 0 ? "text-green-600" : "text-red-600";
    }

    protected override void OnInitialized()
    {
        // Component initialization logic if needed
    }
}

<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border border-gray-200 dark:border-gray-700 overflow-hidden">
    <!-- Asset Header -->
    <div class="p-6 border-b border-gray-100 dark:border-gray-700">
        <div class="flex items-start justify-between">
            <div class="flex items-center space-x-3">
                <div class="w-12 h-12 rounded-lg flex items-center justify-center text-2xl" 
                     style="background-color: @(Asset.AssetCategory?.Color ?? "#6B7280"); color: white;">
                    @(Asset.AssetCategory?.Icon ?? "ðŸ“¦")
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white truncate max-w-48">
                        @Asset.Name
                    </h3>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                        @Asset.AssetCategory?.Name
                    </p>
                </div>
            </div>
            <div class="flex items-center space-x-2">
                <span class="px-2 py-1 text-xs font-medium rounded-full @GetConditionBadgeClass()">
                    @Asset.Condition
                </span>
                @if (ShowActions)
                {
                    <div class="relative">
                        <button @onclick="ToggleDropdown" 
                                class="p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
                            <svg class="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"></path>
                            </svg>
                        </button>
                        @if (showDropdown)
                        {
                            <div class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg z-10 border border-gray-200 dark:border-gray-700">
                                <div class="py-1">
                                    <button @onclick="() => OnViewDetails.InvokeAsync(Asset)" 
                                            class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                                        View Details
                                    </button>
                                    <button @onclick="() => OnEdit.InvokeAsync(Asset)" 
                                            class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                                        Edit Asset
                                    </button>
                                    <button @onclick="() => OnDelete.InvokeAsync(Asset)" 
                                            class="block w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700">
                                        Delete Asset
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Asset Details -->
    <div class="p-6 space-y-4">
        <!-- Financial Information -->
        <div class="grid grid-cols-2 gap-4">
            <div>
                <p class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide">Purchase Price</p>
                <p class="text-lg font-semibold text-gray-900 dark:text-white">
                    @(Asset.PurchasePrice?.ToString("C") ?? "N/A")
                </p>
            </div>
            <div>
                <p class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide">Current Value</p>
                <p class="text-lg font-semibold @GetValueChangeClass()">
                    @(Asset.CurrentValue?.ToString("C") ?? "N/A")
                </p>
            </div>
        </div>

        <!-- Depreciation -->
        @if (Asset.PurchasePrice.HasValue && Asset.CurrentValue.HasValue)
        {
            var change = Asset.CurrentValue.Value - Asset.PurchasePrice.Value;
            var changePercent = Asset.PurchasePrice.Value != 0 ? (change / Asset.PurchasePrice.Value) * 100 : 0;
            
            <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3">
                <div class="flex items-center justify-between">
                    <span class="text-sm text-gray-600 dark:text-gray-300">Value Change</span>
                    <div class="text-right">
                        <span class="text-sm font-medium @GetValueChangeClass()">
                            @(change >= 0 ? "+" : "")@change.ToString("C")
                        </span>
                        <span class="text-xs text-gray-500 dark:text-gray-400 ml-1">
                            (@(changePercent >= 0 ? "+" : "")@changePercent.ToString("F1")%)
                        </span>
                    </div>
                </div>
            </div>
        }

        <!-- Age and Location -->
        <div class="grid grid-cols-2 gap-4 text-sm">
            <div>
                <span class="text-gray-500 dark:text-gray-400">Age:</span>
                <span class="ml-1 text-gray-900 dark:text-white">
                    @if (Asset.PurchaseDate.HasValue)
                    {
                        var age = DateTime.Now - Asset.PurchaseDate.Value;
                        @($"{age.Days / 365} years")
                    }
                    else
                    {
                        @("Unknown")
                    }
                </span>
            </div>
            <div>
                <span class="text-gray-500 dark:text-gray-400">Location:</span>
                <span class="ml-1 text-gray-900 dark:text-white">@(Asset.Location ?? "Not specified")</span>
            </div>
        </div>

        <!-- Insurance Status -->
        @if (Asset.InsurancePolicies?.Any(i => i.IsActive && i.PolicyEndDate > DateTime.Now) == true)
        {
            var activeInsurance = Asset.InsurancePolicies.FirstOrDefault(i => i.IsActive && i.PolicyEndDate > DateTime.Now);
            <div class="flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <div class="flex items-center space-x-2">
                    <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="text-sm font-medium text-blue-900 dark:text-blue-100">Insured</span>
                </div>
                <span class="text-xs text-blue-700 dark:text-blue-300">
                    Expires: @activeInsurance?.PolicyEndDate.ToString("MMM yyyy")
                </span>
            </div>
        }

        <!-- Maintenance Indicator -->
        @if (Asset.MaintenanceRecords?.Any() == true)
        {
            var lastMaintenance = Asset.MaintenanceRecords.OrderByDescending(m => m.ServiceDate).FirstOrDefault();
            if (lastMaintenance != null)
            {
                <div class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-300">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path>
                    </svg>
                    <span>Last maintained: @lastMaintenance.ServiceDate.ToString("MMM dd, yyyy")</span>
                </div>
            }
        }
    </div>

    <!-- Action Footer -->
    @if (ShowQuickActions)
    {
        <div class="px-6 py-4 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600">
            <div class="flex space-x-3">
                <button @onclick="() => OnViewDetails.InvokeAsync(Asset)" 
                        class="flex-1 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium py-2 px-4 rounded-lg transition-colors">
                    View Details
                </button>
                <button @onclick="() => OnEdit.InvokeAsync(Asset)" 
                        class="flex-1 bg-gray-600 hover:bg-gray-700 text-white text-sm font-medium py-2 px-4 rounded-lg transition-colors">
                    Edit
                </button>
            </div>
        </div>
    }
</div>