@using Pilgrims.PersonalFinances.Components.Shared
@using Pilgrims.PersonalFinances.Components.Layout
@using Pilgrims.PersonalFinances.Core.Messaging.Services
@using Pilgrims.PersonalFinances.Core.Messaging.Interfaces

@inherits LayoutComponentBase
@inject IThemeService ThemeService
@inject IJSRuntime JSRuntime
@inject IJsInteropInitializationService JsInit
@implements IDisposable

<div class="page min-h-screen bg-blue-50 dark:bg-slate-900 transition-colors duration-300" id="app-container">
    <!-- Custom Title Bar -->
    <TitleBar />
    
    <!-- Theme Toggle Button -->
    <button class="fixed top-4 right-4 z-50 p-3 rounded-full bg-white dark:bg-slate-800 shadow-lg border border-gray-200 dark:border-slate-700 hover:shadow-xl transition-all duration-300 hover:scale-105"
            @onclick="ToggleDarkMode"
            title="Toggle Dark Mode">
        @if (isDarkMode)
        {
            <!-- Sun Icon for Light Mode -->
            <svg class="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
            </svg>
        }
        else
        {
            <!-- Moon Icon for Dark Mode -->
            <svg class="w-5 h-5 text-slate-700" fill="currentColor" viewBox="0 0 20 20">
                <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
            </svg>
        }
    </button>
    
    <!-- Mobile Menu Button -->
    <button class="md:hidden fixed top-16 left-4 z-40 p-2 rounded-lg bg-white dark:bg-slate-800 border border-gray-200 dark:border-slate-700 shadow-lg transition-all duration-200 hover:scale-105 hover:shadow-xl" 
            @onclick="ToggleMobileMenu">
        <svg class="w-6 h-6 text-blue-900 dark:text-blue-100" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
    </button>

    <!-- Sidebar -->
    <div class="fixed left-0 top-12 h-full w-64 z-40 transform transition-transform duration-300 ease-in-out @(isMobileMenuOpen ? "translate-x-0" : "-translate-x-full md:translate-x-0")"
         style="height: calc(100vh - 3rem);">
        <NavMenu />
    </div>

    <!-- Main Content -->
    <main class="ml-0 md:ml-64 min-h-screen transition-all duration-300 bg-blue-50 dark:bg-slate-900" style="padding-top: 3rem;">
        <!-- Content Area -->
        <article class="p-6">
            @Body
        </article>
    </main>

    <!-- Global UI Message Handler -->
    <UIMessageHandler />
</div>

@code {
    private bool isMobileMenuOpen = false;
    private bool isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to theme changes
        ThemeService.ThemeChanged += OnThemeChanged;
        
        // Get initial theme
        var savedTheme = await ThemeService.GetSavedThemeAsync();
        isDarkMode = savedTheme.Contains("dark");
        
        // Apply initial theme
        await ApplyTheme();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Mark JS interop as ready once the first render has occurred
            JsInit.MarkReady();
        }
        return Task.CompletedTask;
    }

    private void OnThemeChanged(string theme)
    {
        isDarkMode = theme.Contains("dark");
        _ = InvokeAsync(async () =>
        {
            await ApplyTheme();
            StateHasChanged();
        });
    }

    private async Task ToggleDarkMode()
    {
        await ThemeService.ToggleDarkModeAsync();
        isDarkMode = !isDarkMode;
        await ApplyTheme();
    }

    private async Task ApplyTheme()
    {
        var appContainer = "app-container";
        if (isDarkMode)
        {
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{appContainer}')?.classList.add('dark')");
            await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.add('dark')");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{appContainer}')?.classList.remove('dark')");
            await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.remove('dark')");
        }
    }

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
    }

    private void CloseMobileMenu()
    {
        isMobileMenuOpen = false;
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}
