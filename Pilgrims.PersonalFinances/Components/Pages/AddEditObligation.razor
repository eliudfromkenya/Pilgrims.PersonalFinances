@page "/obligations/add"
@page "/obligations/edit/{ObligationId}"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@inject IObligationService ObligationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(IsEditMode ? "Edit Obligation" : "Add New Obligation") - Personal Finance</PageTitle>

<div class="min-h-screen relative overflow-hidden" style="background: var(--primary-bg);">
    <!-- Animated Background -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="particles"></div>
        <div class="absolute inset-0" style="background: linear-gradient(135deg, var(--accent-color)/5 0%, var(--secondary-color)/5 100%);"></div>
    </div>

    <!-- Main Content -->
    <div class="relative z-10 container mx-auto px-4 py-8 max-w-4xl">
        <!-- Header -->
        <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 mb-8 animate-slide-up"
             style="background: var(--card-bg); border-color: var(--border-color);">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold mb-2 bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                        @(IsEditMode ? "Edit Obligation" : "Add New Obligation")
                    </h1>
                    <p class="text-lg" style="color: var(--text-secondary);">
                        @(IsEditMode ? "Update your financial obligation details" : "Create a new financial obligation to track")
                    </p>
                </div>
                <button @onclick="NavigateBack" 
                        class="btn-secondary transform hover:scale-105 transition-all duration-200">
                    <i class="fas fa-arrow-left mr-2"></i>
                    Back to List
                </button>
            </div>
        </div>

        <!-- Form -->
        <EditForm Model="@obligationModel" OnValidSubmit="@HandleValidSubmit" class="space-y-8">
            <DataAnnotationsValidator />

            <!-- Basic Information -->
            <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-1"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                    <i class="fas fa-info-circle mr-3 text-indigo-600"></i>
                    Basic Information
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Obligation Name <span class="text-red-500">*</span>
                        </label>
                        <InputText @bind-Value="obligationModel.Name" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                   placeholder="Enter obligation name (e.g., Chase Credit Card, Student Loan)" />
                        <ValidationMessage For="@(() => obligationModel.Name)" class="text-red-500 text-sm mt-1" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Type <span class="text-red-500">*</span>
                        </label>
                        <InputSelect @bind-Value="obligationModel.Type" 
                                     @bind-Value:after="OnTypeChanged"
                                     class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                     style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);">
                            <option value="">Select Type</option>
                            @foreach (var type in Enum.GetValues<ObligationType>())
                            {
                                <option value="@type">@GetObligationTypeDisplay(type)</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => obligationModel.Type)" class="text-red-500 text-sm mt-1" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Organization/Lender
                        </label>
                        <InputText @bind-Value="obligationModel.OrganizationName" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                   placeholder="Enter organization name" />
                    </div>

                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Description
                        </label>
                        <InputTextArea @bind-Value="obligationModel.Description" 
                                       class="w-full px-4 py-3 rounded-lg border transition-all duration-300 resize-none"
                                       style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                       rows="3"
                                       placeholder="Enter additional details about this obligation" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Status <span class="text-red-500">*</span>
                        </label>
                        <InputSelect @bind-Value="obligationModel.Status" 
                                     class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                     style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);">
                            @foreach (var status in Enum.GetValues<ObligationStatus>())
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => obligationModel.Status)" class="text-red-500 text-sm mt-1" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Payment Frequency <span class="text-red-500">*</span>
                        </label>
                        <InputSelect @bind-Value="obligationModel.PaymentFrequency" 
                                     class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                     style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);">
                            @foreach (var frequency in Enum.GetValues<PaymentFrequency>())
                            {
                                <option value="@frequency">@frequency</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => obligationModel.PaymentFrequency)" class="text-red-500 text-sm mt-1" />
                    </div>
                </div>
            </div>

            <!-- Financial Details -->
            <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-2"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                    <i class="fas fa-dollar-sign mr-3 text-green-600"></i>
                    Financial Details
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    @if (ShowDebtFields)
                    {
                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Current Balance <span class="text-red-500">*</span>
                            </label>
                            <div class="relative">
                                <span class="absolute left-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">$</span>
                                <InputNumber @bind-Value="obligationModel.CurrentBalance" 
                                             class="w-full pl-8 pr-4 py-3 rounded-lg border transition-all duration-300"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" />
                            </div>
                            <ValidationMessage For="@(() => obligationModel.CurrentBalance)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Original Amount
                            </label>
                            <div class="relative">
                                <span class="absolute left-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">$</span>
                                <InputNumber @bind-Value="obligationModel.OriginalAmount" 
                                             class="w-full pl-8 pr-4 py-3 rounded-lg border transition-all duration-300"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" />
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Interest Rate (%)
                            </label>
                            <div class="relative">
                                <InputNumber @bind-Value="obligationModel.InterestRate" 
                                             class="w-full pr-8 pl-4 py-3 rounded-lg border transition-all duration-300"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" />
                                <span class="absolute right-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">%</span>
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Minimum Payment
                            </label>
                            <div class="relative">
                                <span class="absolute left-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">$</span>
                                <InputNumber @bind-Value="obligationModel.MinimumPayment" 
                                             class="w-full pl-8 pr-4 py-3 rounded-lg border transition-all duration-300"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" />
                            </div>
                        </div>

                        @if (obligationModel.Type == ObligationType.CreditCard)
                        {
                            <div>
                                <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                    Credit Limit
                                </label>
                                <div class="relative">
                                    <span class="absolute left-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">$</span>
                                    <InputNumber @bind-Value="obligationModel.CreditLimit" 
                                                 class="w-full pl-8 pr-4 py-3 rounded-lg border transition-all duration-300"
                                                 style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                                 placeholder="0.00" />
                                </div>
                            </div>
                        }

                        @if (IsLoanType(obligationModel.Type))
                        {
                            <div>
                                <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                    Term (Months)
                                </label>
                                <InputNumber @bind-Value="obligationModel.TermInMonths" 
                                             class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="360" />
                            </div>
                        }

                        <div class="flex items-center">
                            <label class="flex items-center cursor-pointer">
                                <InputCheckbox @bind-Value="obligationModel.IsCompoundInterest" 
                                               class="mr-3 w-4 h-4 text-indigo-600 rounded focus:ring-indigo-500" />
                                <span style="color: var(--text-primary);">Compound Interest</span>
                            </label>
                        </div>
                    }
                    else
                    {
                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Contribution Amount <span class="text-red-500">*</span>
                            </label>
                            <div class="relative">
                                <span class="absolute left-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">$</span>
                                <InputNumber @bind-Value="obligationModel.ContributionAmount" 
                                             class="w-full pl-8 pr-4 py-3 rounded-lg border transition-all duration-300"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" />
                            </div>
                            <ValidationMessage For="@(() => obligationModel.ContributionAmount)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Expected Annual Return (%)
                            </label>
                            <div class="relative">
                                <InputNumber @bind-Value="obligationModel.ExpectedAnnualReturn" 
                                             class="w-full pr-8 pl-4 py-3 rounded-lg border transition-all duration-300"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" />
                                <span class="absolute right-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">%</span>
                            </div>
                        </div>
                    }

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Late Fee Amount
                        </label>
                        <div class="relative">
                            <span class="absolute left-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">$</span>
                            <InputNumber @bind-Value="obligationModel.LateFeeAmount" 
                                         class="w-full pl-8 pr-4 py-3 rounded-lg border transition-all duration-300"
                                         style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                         placeholder="0.00" />
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Grace Period (Days)
                        </label>
                        <InputNumber @bind-Value="obligationModel.GracePeriodDays" 
                                     class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                     style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                     placeholder="0" />
                    </div>
                </div>
            </div>

            <!-- Dates -->
            <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-3"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                    <i class="fas fa-calendar-alt mr-3 text-blue-600"></i>
                    Important Dates
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Start Date <span class="text-red-500">*</span>
                        </label>
                        <InputDate @bind-Value="obligationModel.StartDate" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);" />
                        <ValidationMessage For="@(() => obligationModel.StartDate)" class="text-red-500 text-sm mt-1" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            End Date
                        </label>
                        <InputDate @bind-Value="obligationModel.EndDate" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Next Due Date <span class="text-red-500">*</span>
                        </label>
                        <InputDate @bind-Value="obligationModel.NextContributionDueDate" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);" />
                        <ValidationMessage For="@(() => obligationModel.NextContributionDueDate)" class="text-red-500 text-sm mt-1" />
                    </div>

                    @if (ShowDebtFields)
                    {
                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Last Payment Date
                            </label>
                            <InputDate @bind-Value="obligationModel.LastPaymentDate" 
                                       class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                       style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);" />
                        </div>
                    }
                    else
                    {
                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Last Dividend Date
                            </label>
                            <InputDate @bind-Value="obligationModel.LastDividendDate" 
                                       class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                       style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);" />
                        </div>
                    }
                </div>
            </div>

            <!-- Contact Information -->
            <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-4"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                    <i class="fas fa-address-book mr-3 text-purple-600"></i>
                    Contact Information
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Contact Person
                        </label>
                        <InputText @bind-Value="obligationModel.ContactPerson" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                   placeholder="Enter contact person name" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Contact Phone
                        </label>
                        <InputText @bind-Value="obligationModel.ContactPhone" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                   placeholder="Enter phone number" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Contact Email
                        </label>
                        <InputText @bind-Value="obligationModel.ContactEmail" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                   placeholder="Enter email address" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                            Website
                        </label>
                        <InputText @bind-Value="obligationModel.Website" 
                                   class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                                   style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                   placeholder="Enter website URL" />
                    </div>
                </div>
            </div>

            <!-- Additional Information -->
            @if (!ShowDebtFields)
            {
                <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-5"
                     style="background: var(--card-bg); border-color: var(--border-color);">
                    <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                        <i class="fas fa-gift mr-3 text-yellow-600"></i>
                        Benefits Information
                    </h2>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Benefits Description
                            </label>
                            <InputTextArea @bind-Value="obligationModel.BenefitsDescription" 
                                           class="w-full px-4 py-3 rounded-lg border transition-all duration-300 resize-none"
                                           style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                           rows="3"
                                           placeholder="Describe the benefits of this obligation" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Last Dividend Amount
                            </label>
                            <div class="relative">
                                <span class="absolute left-3 top-1/2 transform -translate-y-1/2" style="color: var(--text-secondary);">$</span>
                                <InputNumber @bind-Value="obligationModel.LastDividendAmount" 
                                             class="w-full pl-8 pr-4 py-3 rounded-lg border transition-all duration-300"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" />
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Form Actions -->
            <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-6"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <div class="flex flex-col sm:flex-row gap-4 justify-end">
                    <button type="button" @onclick="NavigateBack" 
                            class="btn-secondary px-8 py-3 transform hover:scale-105 transition-all duration-200">
                        <i class="fas fa-times mr-2"></i>
                        Cancel
                    </button>
                    
                    @if (IsEditMode)
                    {
                        <button type="button" @onclick="DeleteObligation" 
                                class="btn-danger px-8 py-3 transform hover:scale-105 transition-all duration-200"
                                @onclick:preventDefault="true">
                            <i class="fas fa-trash mr-2"></i>
                            Delete
                        </button>
                    }
                    
                    <button type="submit" disabled="@isSubmitting"
                            class="btn-primary px-8 py-3 transform hover:scale-105 transition-all duration-200 disabled:opacity-50">
                        @if (isSubmitting)
                        {
                            <i class="fas fa-spinner fa-spin mr-2"></i>
                            <span>@(IsEditMode ? "Updating..." : "Creating...")</span>
                        }
                        else
                        {
                            <i class="fas fa-save mr-2"></i>
                            <span>@(IsEditMode ? "Update Obligation" : "Create Obligation")</span>
                        }
                    </button>
                </div>
            </div>

            <!-- Validation Summary -->
            <ValidationSummary class="backdrop-blur-lg rounded-xl shadow-xl border p-4 text-red-600"
                              style="background: var(--card-bg); border-color: var(--border-color);" />
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public string? ObligationId { get; set; }

    private ObligationModel obligationModel = new();
    private bool isSubmitting = false;
    private bool IsEditMode => !string.IsNullOrEmpty(ObligationId);
    private bool ShowDebtFields => IsDebtType(obligationModel.Type);

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            await LoadObligation();
        }
        else
        {
            // Set default values for new obligation
            obligationModel.StartDate = DateTime.Today;
            obligationModel.NextContributionDueDate = DateTime.Today.AddMonths(1);
            obligationModel.Status = ObligationStatus.Active;
            obligationModel.PaymentFrequency = PaymentFrequency.Monthly;
        }
    }

    private async Task LoadObligation()
    {
        try
        {
            var obligation = await ObligationService.GetObligationByIdAsync(ObligationId!);
            if (obligation != null)
            {
                obligationModel = new ObligationModel
                {
                    Id = obligation.Id,
                    Name = obligation.Name,
                    Type = obligation.Type,
                    OrganizationName = obligation.OrganizationName,
                    Description = obligation.Description,
                    ContributionAmount = obligation.ContributionAmount,
                    PaymentFrequency = obligation.PaymentFrequency,
                    StartDate = obligation.StartDate,
                    EndDate = obligation.EndDate,
                    NextContributionDueDate = obligation.NextContributionDueDate ?? DateTime.Today.AddMonths(1),
                    Status = obligation.Status,
                    LateFeeAmount = obligation.LateFeeAmount,
                    GracePeriodDays = obligation.GracePeriodDays,
                    ContactPerson = obligation.ContactPerson,
                    ContactPhone = obligation.ContactPhone,
                    ContactEmail = obligation.ContactEmail,
                    Website = obligation.Website,
                    ExpectedAnnualReturn = obligation.ExpectedAnnualReturn,
                    BenefitsDescription = obligation.BenefitsDescription,
                    LastDividendDate = obligation.LastDividendDate,
                    LastDividendAmount = obligation.LastDividendAmount,
                    CurrentBalance = obligation.CurrentBalance,
                    OriginalAmount = obligation.OriginalAmount,
                    InterestRate = obligation.InterestRate,
                    MinimumPayment = obligation.MinimumPayment,
                    LastPaymentDate = obligation.LastPaymentDate,
                    TermInMonths = obligation.TermInMonths,
                    CreditLimit = obligation.CreditLimit,
                    IsCompoundInterest = obligation.IsCompoundInterest
                };
            }
            else
            {
                Navigation.NavigateTo("/obligations");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading obligation: {ex.Message}");
            Navigation.NavigateTo("/obligations");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;

            var obligation = new Obligation
            {
                Id = obligationModel.Id ?? Guid.NewGuid().ToString(),
                Name = obligationModel.Name,
                Type = obligationModel.Type,
                OrganizationName = obligationModel.OrganizationName,
                Description = obligationModel.Description,
                ContributionAmount = obligationModel.ContributionAmount,
                ContributionFrequency = obligationModel.PaymentFrequency,
                StartDate = obligationModel.StartDate,
                EndDate = obligationModel.EndDate,
                NextContributionDueDate = obligationModel.NextContributionDueDate,
                Status = obligationModel.Status,
                LateFeeAmount = obligationModel.LateFeeAmount ?? 0,
                GracePeriodDays = obligationModel.GracePeriodDays ?? 0,
                ContactPerson = obligationModel.ContactPerson,
                ContactPhone = obligationModel.ContactPhone,
                ContactEmail = obligationModel.ContactEmail,
                Website = obligationModel.Website,
                ExpectedAnnualReturn = obligationModel.ExpectedAnnualReturn,
                BenefitsDescription = obligationModel.BenefitsDescription,
                LastDividendDate = obligationModel.LastDividendDate,
                LastDividendAmount = obligationModel.LastDividendAmount,
                CurrentBalance = obligationModel.CurrentBalance,
                OriginalAmount = obligationModel.OriginalAmount,
                InterestRate = obligationModel.InterestRate,
                MinimumPayment = obligationModel.MinimumPayment,
                LastPaymentDate = obligationModel.LastPaymentDate,
                TermInMonths = obligationModel.TermInMonths,
                CreditLimit = obligationModel.CreditLimit,
                IsCompoundInterest = obligationModel.IsCompoundInterest
            };

            if (IsEditMode)
            {
                await ObligationService.UpdateObligationAsync(obligation);
            }
            else
            {
                await ObligationService.CreateObligationAsync(obligation);
            }

            Navigation.NavigateTo("/obligations");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving obligation: {ex.Message}");
            // TODO: Show error message to user
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteObligation()
    {
        if (IsEditMode && await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this obligation? This action cannot be undone."))
        {
            try
            {
                await ObligationService.DeleteObligationAsync(ObligationId!);
                Navigation.NavigateTo("/obligations");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting obligation: {ex.Message}");
                // TODO: Show error message to user
            }
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/obligations");
    }

    private void OnTypeChanged()
    {
        // Reset fields that don't apply to the new type
        if (ShowDebtFields)
        {
            obligationModel.ExpectedAnnualReturn = null;
            obligationModel.BenefitsDescription = null;
            obligationModel.LastDividendDate = null;
            obligationModel.LastDividendAmount = null;
        }
        else
        {
            obligationModel.CurrentBalance = null;
            obligationModel.OriginalAmount = null;
            obligationModel.InterestRate = null;
            obligationModel.MinimumPayment = null;
            obligationModel.LastPaymentDate = null;
            obligationModel.TermInMonths = null;
            obligationModel.CreditLimit = null;
            obligationModel.IsCompoundInterest = false;
        }
    }

    // Helper methods
    private bool IsDebtType(ObligationType type)
    {
        return type == ObligationType.CreditCard ||
               type == ObligationType.Mortgage ||
               type == ObligationType.PersonalLoan ||
               type == ObligationType.StudentLoan ||
               type == ObligationType.AutoLoan ||
               type == ObligationType.BusinessLoan ||
               type == ObligationType.MedicalDebt;
    }

    private bool IsLoanType(ObligationType type)
    {
        return type == ObligationType.Mortgage ||
               type == ObligationType.PersonalLoan ||
               type == ObligationType.StudentLoan ||
               type == ObligationType.AutoLoan ||
               type == ObligationType.BusinessLoan;
    }

    private string GetObligationTypeDisplay(ObligationType type)
    {
        return type switch
        {
            ObligationType.CreditCard => "Credit Card",
            ObligationType.PersonalLoan => "Personal Loan",
            ObligationType.StudentLoan => "Student Loan",
            ObligationType.AutoLoan => "Auto Loan",
            ObligationType.BusinessLoan => "Business Loan",
            ObligationType.MedicalDebt => "Medical Debt",
            ObligationType.MonthlySubscription => "Monthly Subscription",
            ObligationType.AnnualSubscription => "Annual Subscription",
            ObligationType.CharitableDonation => "Charitable Donation",
            ObligationType.MembershipFee => "Membership Fee",
            ObligationType.ServiceContract => "Service Contract",
            ObligationType.EstimatedTaxPayment => "Estimated Tax",
            ObligationType.PropertyTax => "Property Tax",
            ObligationType.TaxLiability => "Tax Liability",
            ObligationType.InsurancePremium => "Insurance Premium",
            ObligationType.UtilityBill => "Utility Bill",
            ObligationType.InternetService => "Internet Service",
            ObligationType.PhoneService => "Phone Service",
            _ => type.ToString()
        };
    }

    // Model class for form binding
    public class ObligationModel
    {
        public string? Id { get; set; }

        [Required(ErrorMessage = "Obligation name is required")]
        [StringLength(200, ErrorMessage = "Name cannot exceed 200 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Type is required")]
        public ObligationType Type { get; set; }

        [StringLength(200, ErrorMessage = "Organization name cannot exceed 200 characters")]
        public string OrganizationName { get; set; } = string.Empty;

        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string? Description { get; set; }

        [Required(ErrorMessage = "Contribution amount is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Contribution amount must be greater than 0")]
        public decimal ContributionAmount { get; set; }

        [Required(ErrorMessage = "Payment frequency is required")]
        public PaymentFrequency PaymentFrequency { get; set; }

        [Required(ErrorMessage = "Start date is required")]
        public DateTime StartDate { get; set; }

        public DateTime? EndDate { get; set; }

        [Required(ErrorMessage = "Next due date is required")]
        public DateTime NextContributionDueDate { get; set; }

        [Required(ErrorMessage = "Status is required")]
        public ObligationStatus Status { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Late fee amount cannot be negative")]
        public decimal? LateFeeAmount { get; set; }

        [Range(0, 365, ErrorMessage = "Grace period must be between 0 and 365 days")]
        public int? GracePeriodDays { get; set; }

        [StringLength(100, ErrorMessage = "Contact person name cannot exceed 100 characters")]
        public string? ContactPerson { get; set; }

        [StringLength(20, ErrorMessage = "Contact phone cannot exceed 20 characters")]
        public string? ContactPhone { get; set; }

        [EmailAddress(ErrorMessage = "Invalid email address")]
        [StringLength(100, ErrorMessage = "Contact email cannot exceed 100 characters")]
        public string? ContactEmail { get; set; }

        [Url(ErrorMessage = "Invalid website URL")]
        [StringLength(200, ErrorMessage = "Website URL cannot exceed 200 characters")]
        public string? Website { get; set; }

        [Range(0, 100, ErrorMessage = "Expected annual return must be between 0 and 100%")]
        public decimal? ExpectedAnnualReturn { get; set; }

        [StringLength(1000, ErrorMessage = "Benefits description cannot exceed 1000 characters")]
        public string? BenefitsDescription { get; set; }

        public DateTime? LastDividendDate { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Last dividend amount cannot be negative")]
        public decimal? LastDividendAmount { get; set; }

        // Debt-specific fields
        [Range(0, double.MaxValue, ErrorMessage = "Current balance cannot be negative")]
        public decimal? CurrentBalance { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Original amount cannot be negative")]
        public decimal? OriginalAmount { get; set; }

        [Range(0, 100, ErrorMessage = "Interest rate must be between 0 and 100%")]
        public decimal? InterestRate { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Minimum payment cannot be negative")]
        public decimal? MinimumPayment { get; set; }

        public DateTime? LastPaymentDate { get; set; }

        [Range(1, 600, ErrorMessage = "Term must be between 1 and 600 months")]
        public int? TermInMonths { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Credit limit cannot be negative")]
        public decimal? CreditLimit { get; set; }

        public bool IsCompoundInterest { get; set; } = false;
    }
}