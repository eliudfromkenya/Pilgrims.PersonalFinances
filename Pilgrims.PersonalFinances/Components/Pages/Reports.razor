@page "/reports"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Models.Enums
@using Pilgrims.PersonalFinances.Models.DTOs
@using Pilgrims.PersonalFinances.Core.ViewModels
@using Pilgrims.PersonalFinances.Core.Interfaces
@inject ReportsViewModel ViewModel
@inject NavigationManager Navigation
@inject ICurrencyService CurrencyService

<PageTitle>Reports - Pilgrims Personal Finance</PageTitle>

<!-- Particle Background -->
<div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-indigo-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-indigo-900 dark:to-purple-900"></div>
    <div class="particles-container">
        @for (int i = 0; i < 25; i++)
        {
            <div class="particle" style="animation-delay: @(i * 0.15)s;"></div>
        }
    </div>
</div>

<!-- Main Content -->
<div class="relative z-10 min-h-screen p-6">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                        üìä Financial Reports
                    </h1>
                    <p class="text-[var(--text-secondary)] mt-2">Comprehensive insights into your financial health</p>
                </div>
                <div class="flex items-center space-x-3">
                    <!-- Date Range Selector -->
                    <div class="flex items-center space-x-2">
                        <input type="date" @bind="ViewModel.StartDate" @bind:event="onchange"
                               class="px-3 py-2 bg-white/50 dark:bg-gray-700/50 rounded-lg border border-white/20 text-sm" />
                        <span class="text-gray-500">to</span>
                        <input type="date" @bind="ViewModel.EndDate" @bind:event="onchange"
                               class="px-3 py-2 bg-white/50 dark:bg-gray-700/50 rounded-lg border border-white/20 text-sm" />
                    </div>
                    
                    <!-- Quick Date Range Selector -->
                    <select @bind="ViewModel.SelectedPeriod" @bind:event="onchange"
                            class="px-4 py-2 bg-white/50 dark:bg-gray-700/50 rounded-lg border border-white/20">
                        <option value="custom">Custom Range</option>
                        <option value="last30">Last 30 Days</option>
                        <option value="last90">Last 90 Days</option>
                        <option value="last6months">Last 6 Months</option>
                        <option value="last12months">Last 12 Months</option>
                        <option value="thisyear">This Year</option>
                        <option value="lastyear">Last Year</option>
                    </select>
                    
                    <!-- Export Options -->
                    <div class="relative">
                        <button @onclick="ViewModel.ToggleExportMenuCommand.Execute" 
                                class="px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                            <span class="mr-2">üì•</span> Export
                        </button>
                        @if (ViewModel.ShowExportMenu)
                        {
                            <div class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50">
                                <button @onclick="() => ViewModel.ExportReportCommand.Execute(ExportFormat.PDF)" class="w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-t-lg">
                                    üìÑ Export as PDF
                                </button>
                                <button @onclick="() => ViewModel.ExportReportCommand.Execute(ExportFormat.CSV)" class="w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700">
                                    üìä Export as CSV
                                </button>
                                <button @onclick="() => ViewModel.ExportReportCommand.Execute(ExportFormat.JPEG)" class="w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-b-lg">
                                    üñºÔ∏è Export as Image
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Key Metrics Cards -->
            @if (ViewModel.BalanceSheet != null)
            {
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                    <div class="bg-gradient-to-r from-indigo-400 to-indigo-600 p-4 rounded-xl text-white">
                        <div class="text-sm opacity-90">Net Worth</div>
                        <div class="text-2xl font-bold">@(formattedAmounts.TryGetValue(ViewModel.BalanceSheet.NetWorth, out var netWorthFormatted) ? netWorthFormatted : ViewModel.BalanceSheet.NetWorth.ToString("C"))</div>
                        @if (ViewModel.PreviousBalanceSheet != null)
                        {
                            var change = ViewModel.BalanceSheet.NetWorth - ViewModel.PreviousBalanceSheet.NetWorth;
                            var changePercent = ViewModel.PreviousBalanceSheet.NetWorth != 0 ? (change / ViewModel.PreviousBalanceSheet.NetWorth) * 100 : 0;
                            <div class="text-xs opacity-75 mt-1">
                                @(change >= 0 ? "üìà" : "üìâ") @changePercent.ToString("F1")% vs Previous
                            </div>
                        }
                    </div>
                    <div class="bg-gradient-to-r from-purple-400 to-purple-600 p-4 rounded-xl text-white">
                        <div class="text-sm opacity-90">Total Income</div>
                        <div class="text-2xl font-bold">@(ViewModel.IncomeStatement != null && formattedAmounts.TryGetValue(ViewModel.IncomeStatement.TotalIncome, out var incomeFormatted) ? incomeFormatted : (ViewModel.IncomeStatement?.TotalIncome.ToString("C") ?? "$0.00"))</div>
                        <div class="text-xs opacity-75 mt-1">Selected period</div>
                    </div>
                    <div class="bg-gradient-to-r from-pink-400 to-pink-600 p-4 rounded-xl text-white">
                        <div class="text-sm opacity-90">Total Expenses</div>
                        <div class="text-2xl font-bold">@(ViewModel.IncomeStatement != null && formattedAmounts.TryGetValue(ViewModel.IncomeStatement.TotalExpenses, out var expensesFormatted) ? expensesFormatted : (ViewModel.IncomeStatement?.TotalExpenses.ToString("C") ?? "$0.00"))</div>
                        <div class="text-xs opacity-75 mt-1">@(ViewModel.IncomeStatement != null && ViewModel.IncomeStatement.TotalIncome > 0 ? ((ViewModel.IncomeStatement.TotalExpenses / ViewModel.IncomeStatement.TotalIncome) * 100).ToString("F0") + "% of income" : "N/A")</div>
                    </div>
                    <div class="bg-gradient-to-r from-rose-400 to-rose-600 p-4 rounded-xl text-white">
                        <div class="text-sm opacity-90">Net Income</div>
                        <div class="text-2xl font-bold">@(ViewModel.IncomeStatement != null && formattedAmounts.TryGetValue(ViewModel.IncomeStatement.NetIncome, out var netIncomeFormatted) ? netIncomeFormatted : (ViewModel.IncomeStatement?.NetIncome.ToString("C") ?? "$0.00"))</div>
                        <div class="text-xs opacity-75 mt-1">@(ViewModel.IncomeStatement != null && ViewModel.IncomeStatement.TotalIncome > 0 ? ((ViewModel.IncomeStatement.NetIncome / ViewModel.IncomeStatement.TotalIncome) * 100).ToString("F0") + "% savings rate" : "N/A")</div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Report Type Selector -->
    <div class="mb-6">
        <div class="flex flex-wrap gap-2">
            <button @onclick="() => ViewModel.SetActiveReportCommand.Execute(ReportType.IncomeStatement)" 
                    class="px-4 py-2 rounded-lg transition-all @(ViewModel.ActiveReportType == ReportType.IncomeStatement ? "bg-indigo-600 text-white" : "bg-white/50 dark:bg-gray-700/50 text-gray-700 dark:text-gray-300")">
                Income Statement
            </button>
            <button @onclick="() => ViewModel.SetActiveReportCommand.Execute(ReportType.BalanceSheet)" 
                    class="px-4 py-2 rounded-lg transition-all @(ViewModel.ActiveReportType == ReportType.BalanceSheet ? "bg-indigo-600 text-white" : "bg-white/50 dark:bg-gray-700/50 text-gray-700 dark:text-gray-300")">
                Balance Sheet
            </button>
            <button @onclick="() => ViewModel.SetActiveReportCommand.Execute(ReportType.CashFlowStatement)"
                    class="px-4 py-2 rounded-lg transition-all @(ViewModel.ActiveReportType == ReportType.CashFlowStatement ? "bg-indigo-600 text-white" : "bg-white/50 dark:bg-gray-700/50 text-gray-700 dark:text-gray-300")">
                Cash Flow
            </button>
            <button @onclick="() => ViewModel.SetActiveReportCommand.Execute(ReportType.BudgetVarianceReport)"
                    class="px-4 py-2 rounded-lg transition-all @(ViewModel.ActiveReportType == ReportType.BudgetVarianceReport ? "bg-indigo-600 text-white" : "bg-white/50 dark:bg-gray-700/50 text-gray-700 dark:text-gray-300")">
                Budget Variance
            </button>
            <button @onclick="() => ViewModel.SetActiveReportCommand.Execute(ReportType.NetWorthTrend)" 
                    class="px-4 py-2 rounded-lg transition-all @(ViewModel.ActiveReportType == ReportType.NetWorthTrend ? "bg-indigo-600 text-white" : "bg-white/50 dark:bg-gray-700/50 text-gray-700 dark:text-gray-300")">
                Net Worth Trend
            </button>
            <button @onclick="() => ViewModel.SetActiveReportCommand.Execute(ReportType.CategoryAnalysis)" 
                    class="px-4 py-2 rounded-lg transition-all @(ViewModel.ActiveReportType == ReportType.CategoryAnalysis ? "bg-indigo-600 text-white" : "bg-white/50 dark:bg-gray-700/50 text-gray-700 dark:text-gray-300")">
                Category Analysis
            </button>
            <button @onclick="() => ViewModel.SetActiveReportCommand.Execute(ReportType.AccountSummary)" 
                    class="px-4 py-2 rounded-lg transition-all @(ViewModel.ActiveReportType == ReportType.AccountSummary ? "bg-indigo-600 text-white" : "bg-white/50 dark:bg-gray-700/50 text-gray-700 dark:text-gray-300")">
                Account Summary
            </button>
        </div>
    </div>

    <!-- Loading Indicator -->
    @if (ViewModel.IsBusy)
    {
        <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
            <span class="ml-3 text-gray-600 dark:text-gray-300">Loading report data...</span>
        </div>
    }

    <!-- Report Content -->
    @if (!ViewModel.IsBusy)
    {
        @switch (ViewModel.ActiveReportType)
        {
            case ReportType.IncomeStatement:
                @if (ViewModel.IncomeStatement != null)
                {
                    <IncomeStatementReport Report="ViewModel.IncomeStatement" OnCategoryClick="OnCategoryClick" />
                }
                break;
            
            case ReportType.BalanceSheet:
                @if (ViewModel.BalanceSheet != null)
                {
                    <BalanceSheetReport Report="ViewModel.BalanceSheet" />
                }
                break;
            
            case ReportType.CashFlowStatement:
                @if (ViewModel.CashFlowStatement != null)
                {
                    <CashFlowReport Report="ViewModel.CashFlowStatement" />
                }
                break;
            
            case ReportType.BudgetVarianceReport:
                @if (ViewModel.BudgetVariance != null)
                {
                    <BudgetVarianceReport Report="ViewModel.BudgetVariance" />
                }
                break;
            
            case ReportType.NetWorthTrend:
                @if (ViewModel.NetWorthTrend != null)
                {
                    <NetWorthTrendReport Trends="ViewModel.NetWorthTrend" />
                }
                break;
            
            case ReportType.CategoryAnalysis:
                @if (ViewModel.CategoryAnalysis != null)
                {
                    <CategoryAnalysisReport Report="ViewModel.CategoryAnalysis" OnCategoryClick="OnCategoryClick" />
                }
                break;
            
            case ReportType.AccountSummary:
                @if (ViewModel.AccountSummary != null)
                {
                    <AccountSummaryReport Accounts="ViewModel.AccountSummary" OnAccountClick="OnAccountClick" />
                }
                break;
        }
    }

    <!-- Comparison Section -->
    @if (ViewModel.ComparisonData != null && ViewModel.ShowComparison)
    {
        <div class="mt-8">
            <ComparisonChart Title="Period Comparison" 
                           Subtitle="@ViewModel.ComparisonData.ComparisonType Analysis"
                           ComparisonData="ViewModel.ComparisonData"
                           OnMetricChange="OnComparisonMetricChanged"
                           OnPeriodChange="OnComparisonPeriodChanged" />
        </div>
    }

    <!-- Comparison Controls -->
    <div class="mt-6 flex justify-center space-x-4">
        <button @onclick="ViewModel.GenerateYearOverYearComparisonCommand.Execute" 
                class="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
            Year-over-Year Comparison
        </button>
        <button @onclick="ViewModel.GenerateMonthOverMonthComparisonCommand.Execute" 
                class="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
            Month-over-Month Comparison
        </button>
    </div>
</div>

<style>
    .particles-container {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    .particle {
        position: absolute;
        width: 3px;
        height: 3px;
        background: linear-gradient(45deg, #8b5cf6, #ec4899);
        border-radius: 50%;
        animation: float 8s ease-in-out infinite;
        opacity: 0.7;
    }

    .particle:nth-child(odd) {
        left: 15%;
        animation-duration: 10s;
    }

    .particle:nth-child(even) {
        right: 15%;
        animation-duration: 12s;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(100vh) rotate(0deg); opacity: 0; }
        10% { opacity: 0.7; }
        90% { opacity: 0.7; }
        50% { transform: translateY(-10vh) rotate(180deg); }
    }

    .glass-card {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    }
</style>

@code {
    private Dictionary<decimal, string> formattedAmounts = new();

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitializeCommand.ExecuteAsync(null);
        await PreformatAmounts();
    }

    private async Task PreformatAmounts()
    {
        var amounts = new HashSet<decimal>();
        
        // Collect all amounts that need formatting
        if (ViewModel.BalanceSheet != null)
        {
            amounts.Add(ViewModel.BalanceSheet.NetWorth);
        }
        
        if (ViewModel.IncomeStatement != null)
        {
            amounts.Add(ViewModel.IncomeStatement.TotalIncome);
            amounts.Add(ViewModel.IncomeStatement.TotalExpenses);
            amounts.Add(ViewModel.IncomeStatement.NetIncome);
        }

        // Format all amounts
        foreach (var amount in amounts)
        {
            formattedAmounts[amount] = await CurrencyService.FormatAmountAsync(amount);
        }
    }

    private void OnCategoryClick(string categoryName)
    {
        // Navigate to category details or show category-specific report
        Navigation.NavigateTo($"/transactions?category={categoryName}");
    }

    private void OnAccountClick(string accountId)
    {
        // Navigate to account details
        Navigation.NavigateTo($"/accounts/{accountId}");
    }

    private void OnComparisonMetricChanged(string metric)
    {
        // Handle comparison metric change
        ViewModel.UpdateComparisonMetricCommand.Execute(metric);
    }

    private void OnComparisonPeriodChanged(string period)
    {
        // Handle comparison period change
        ViewModel.UpdateComparisonPeriodCommand.Execute(period);
    }
}
