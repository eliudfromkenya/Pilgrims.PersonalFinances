@page "/obligations"
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@inject IObligationService ObligationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Obligation Management - Personal Finance</PageTitle>

<div class="min-h-screen relative overflow-hidden" style="background: var(--primary-bg);">
    <!-- Animated Background -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="particles"></div>
        <div class="absolute inset-0" style="background: linear-gradient(135deg, var(--accent-color)/5 0%, var(--secondary-color)/5 100%);"></div>
    </div>

    <!-- Main Content -->
    <div class="relative z-10 container mx-auto px-4 py-8">
        <!-- Header Section -->
        <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 mb-8 animate-slide-up"
             style="background: var(--card-bg); border-color: var(--border-color);">
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                <div>
                    <h1 class="text-3xl font-bold mb-2 bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                        Obligation Management
                    </h1>
                    <p class="text-lg" style="color: var(--text-secondary);">
                        Track and manage your financial obligations, debts, and recurring commitments
                    </p>
                </div>
                <div class="flex gap-3">
                    <button @onclick="NavigateToPayoffCalculator" 
                            class="btn-secondary transform hover:scale-105 transition-all duration-200">
                        <i class="fas fa-calculator mr-2"></i>
                        Payoff Calculator
                    </button>
                    <button @onclick="NavigateToDashboard" 
                            class="btn-secondary transform hover:scale-105 transition-all duration-200">
                        <i class="fas fa-chart-line mr-2"></i>
                        Dashboard
                    </button>
                    <button @onclick="AddNewObligation" 
                            class="btn-primary transform hover:scale-105 transition-all duration-200">
                        <i class="fas fa-plus mr-2"></i>
                        Add Obligation
                    </button>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="backdrop-blur-lg rounded-xl shadow-xl border p-6 animate-slide-up stagger-1"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 bg-gradient-to-r from-red-500 to-pink-600 rounded-lg flex items-center justify-center">
                            <i class="fas fa-credit-card text-white text-xl"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium" style="color: var(--text-secondary);">Total Debt</p>
                        <p class="text-2xl font-bold" style="color: var(--text-primary);">@totalDebt.ToString("C")</p>
                        <p class="text-xs" style="color: var(--text-secondary);">@debtCount obligations</p>
                    </div>
                </div>
            </div>

            <div class="backdrop-blur-lg rounded-xl shadow-xl border p-6 animate-slide-up stagger-2"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
                            <i class="fas fa-calendar-alt text-white text-xl"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium" style="color: var(--text-secondary);">Monthly Payments</p>
                        <p class="text-2xl font-bold" style="color: var(--text-primary);">@monthlyPayments.ToString("C")</p>
                        <p class="text-xs" style="color: var(--text-secondary);">Across all obligations</p>
                    </div>
                </div>
            </div>

            <div class="backdrop-blur-lg rounded-xl shadow-xl border p-6 animate-slide-up stagger-3"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 bg-gradient-to-r from-yellow-500 to-orange-600 rounded-lg flex items-center justify-center">
                            <i class="fas fa-exclamation-triangle text-white text-xl"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium" style="color: var(--text-secondary);">Overdue</p>
                        <p class="text-2xl font-bold text-red-600">@overdueCount</p>
                        <p class="text-xs" style="color: var(--text-secondary);">Require attention</p>
                    </div>
                </div>
            </div>

            <div class="backdrop-blur-lg rounded-xl shadow-xl border p-6 animate-slide-up stagger-4"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-600 rounded-lg flex items-center justify-center">
                            <i class="fas fa-percentage text-white text-xl"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium" style="color: var(--text-secondary);">Avg Interest Rate</p>
                        <p class="text-2xl font-bold" style="color: var(--text-primary);">@averageInterestRate.ToString("F1")%</p>
                        <p class="text-xs" style="color: var(--text-secondary);">Weighted average</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 mb-8 animate-slide-up stagger-5"
             style="background: var(--card-bg); border-color: var(--border-color);">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                <div class="lg:col-span-2">
                    <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Search Obligations</label>
                    <div class="relative">
                        <input @bind="searchTerm" @oninput="OnSearchChanged" 
                               type="text" 
                               placeholder="Search by name, organization, or description..."
                               class="w-full pl-10 pr-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105"
                               style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);" />
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search" style="color: var(--text-secondary);"></i>
                        </div>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Type</label>
                    <select @bind="selectedTypeFilter" @bind:after="ApplyFilters"
                            class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                            style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);">
                        <option value="">All Types</option>
                        @foreach (var type in Enum.GetValues<ObligationType>())
                        {
                            <option value="@type">@GetObligationTypeDisplay(type)</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Status</label>
                    <select @bind="selectedStatusFilter" @bind:after="ApplyFilters"
                            class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                            style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);">
                        <option value="">All Statuses</option>
                        @foreach (var status in Enum.GetValues<ObligationStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Sort By</label>
                    <select @bind="sortBy" @bind:after="ApplyFilters"
                            class="w-full px-4 py-3 rounded-lg border transition-all duration-300"
                            style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);">
                        <option value="name">Name</option>
                        <option value="balance">Balance</option>
                        <option value="dueDate">Due Date</option>
                        <option value="interestRate">Interest Rate</option>
                        <option value="type">Type</option>
                    </select>
                </div>
            </div>

            <div class="flex justify-between items-center mt-4">
                <div class="flex gap-2">
                    <button @onclick="() => SetViewMode(ViewMode.Grid)" 
                            class="@(viewMode == ViewMode.Grid ? "btn-primary" : "btn-secondary") px-3 py-2 text-sm">
                        <i class="fas fa-th mr-1"></i> Grid
                    </button>
                    <button @onclick="() => SetViewMode(ViewMode.List)" 
                            class="@(viewMode == ViewMode.List ? "btn-primary" : "btn-secondary") px-3 py-2 text-sm">
                        <i class="fas fa-list mr-1"></i> List
                    </button>
                </div>
                <div class="text-sm" style="color: var(--text-secondary);">
                    Showing @filteredObligations.Count of @obligations.Count obligations
                </div>
            </div>
        </div>

        <!-- Loading State -->
        @if (isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
            </div>
        }
        else if (!filteredObligations.Any())
        {
            <!-- Empty State -->
            <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-12 text-center animate-slide-up"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                <div class="text-6xl mb-4" style="color: var(--text-secondary);">
                    <i class="fas fa-file-contract"></i>
                </div>
                <h3 class="text-xl font-semibold mb-2" style="color: var(--text-primary);">No Obligations Found</h3>
                <p class="mb-6" style="color: var(--text-secondary);">
                    @if (HasActiveFilters())
                    {
                        <span>No obligations match your current filters. Try adjusting your search criteria.</span>
                    }
                    else
                    {
                        <span>You haven't added any obligations yet. Start by adding your first financial obligation.</span>
                    }
                </p>
                @if (!HasActiveFilters())
                {
                    <button @onclick="AddNewObligation" 
                            class="btn-primary transform hover:scale-105 transition-all duration-200">
                        <i class="fas fa-plus mr-2"></i>
                        Add First Obligation
                    </button>
                }
                else
                {
                    <button @onclick="ClearFilters" 
                            class="btn-secondary transform hover:scale-105 transition-all duration-200">
                        <i class="fas fa-times mr-2"></i>
                        Clear Filters
                    </button>
                }
            </div>
        }
        else
        {
            <!-- Obligations Display -->
            @if (viewMode == ViewMode.Grid)
            {
                <!-- Grid View -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    @foreach (var obligation in paginatedObligations)
                    {
                        <div class="backdrop-blur-lg rounded-xl shadow-xl border p-6 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer animate-slide-up"
                             style="background: var(--card-bg); border-color: var(--border-color);"
                             @onclick="() => ViewObligation(obligation.Id)">
                            
                            <!-- Header -->
                            <div class="flex justify-between items-start mb-4">
                                <div class="flex items-center">
                                    <div class="w-10 h-10 rounded-lg flex items-center justify-center mr-3 @GetObligationTypeColor(obligation.Type)">
                                        <i class="@GetObligationTypeIcon(obligation.Type) text-white"></i>
                                    </div>
                                    <div>
                                        <h3 class="font-semibold text-lg" style="color: var(--text-primary);">@obligation.Name</h3>
                                        <p class="text-sm" style="color: var(--text-secondary);">@GetObligationTypeDisplay(obligation.Type)</p>
                                    </div>
                                </div>
                                <div class="@GetStatusBadgeClass(obligation.Status) px-2 py-1 rounded-full text-xs font-medium">
                                    @obligation.Status
                                </div>
                            </div>

                            <!-- Financial Info -->
                            <div class="space-y-3 mb-4">
                                @if (obligation.CurrentBalance.HasValue)
                                {
                                    <div class="flex justify-between">
                                        <span style="color: var(--text-secondary);">Current Balance:</span>
                                        <span class="font-semibold" style="color: var(--text-primary);">@obligation.CurrentBalance.Value.ToString("C")</span>
                                    </div>
                                }
                                @if (obligation.MinimumPayment.HasValue)
                                {
                                    <div class="flex justify-between">
                                        <span style="color: var(--text-secondary);">Min Payment:</span>
                                        <span class="font-semibold" style="color: var(--text-primary);">@obligation.MinimumPayment.Value.ToString("C")</span>
                                    </div>
                                }
                                @if (obligation.InterestRate.HasValue)
                                {
                                    <div class="flex justify-between">
                                        <span style="color: var(--text-secondary);">Interest Rate:</span>
                                        <span class="font-semibold" style="color: var(--text-primary);">@obligation.InterestRate.Value.ToString("F2")%</span>
                                    </div>
                                }
                                <div class="flex justify-between">
                                    <span style="color: var(--text-secondary);">Next Due:</span>
                                    <span class="font-semibold @(obligation.IsOverdue ? "text-red-600" : "")" style="color: var(--text-primary);">
                                        @(obligation.NextContributionDueDate?.ToString("MMM dd, yyyy") ?? "Not set")
                                    </span>
                                </div>
                            </div>

                            <!-- Progress Bar for Credit Cards -->
                            @if (obligation.Type == ObligationType.CreditCard && obligation.CreditLimit.HasValue)
                            {
                                <div class="mb-4">
                                    <div class="flex justify-between text-sm mb-1">
                                        <span style="color: var(--text-secondary);">Credit Utilization</span>
                                        <span style="color: var(--text-primary);">@obligation.CreditUtilization.ToString("F1")%</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2">
                                        <div class="@GetUtilizationColor(obligation.CreditUtilization) h-2 rounded-full transition-all duration-300" 
                                             style="width: @Math.Min(obligation.CreditUtilization, 100)%"></div>
                                    </div>
                                </div>
                            }

                            <!-- Actions -->
                            <div class="flex gap-2 pt-4 border-t" style="border-color: var(--border-color);">
                                <button @onclick:stopPropagation="true" @onclick="() => MakePayment(obligation.Id)" 
                                        class="btn-primary flex-1 text-sm py-2">
                                    <i class="fas fa-credit-card mr-1"></i> Pay
                                </button>
                                <button @onclick:stopPropagation="true" @onclick="() => EditObligation(obligation.Id)" 
                                        class="btn-secondary flex-1 text-sm py-2">
                                    <i class="fas fa-edit mr-1"></i> Edit
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- List View -->
                <div class="backdrop-blur-lg rounded-2xl shadow-2xl border overflow-hidden animate-slide-up"
                     style="background: var(--card-bg); border-color: var(--border-color);">
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead style="background: var(--secondary-bg);">
                                <tr>
                                    <th class="text-left py-4 px-6 font-semibold" style="color: var(--text-primary);">Obligation</th>
                                    <th class="text-left py-4 px-6 font-semibold" style="color: var(--text-primary);">Type</th>
                                    <th class="text-left py-4 px-6 font-semibold" style="color: var(--text-primary);">Balance</th>
                                    <th class="text-left py-4 px-6 font-semibold" style="color: var(--text-primary);">Payment</th>
                                    <th class="text-left py-4 px-6 font-semibold" style="color: var(--text-primary);">Due Date</th>
                                    <th class="text-left py-4 px-6 font-semibold" style="color: var(--text-primary);">Status</th>
                                    <th class="text-left py-4 px-6 font-semibold" style="color: var(--text-primary);">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var obligation in paginatedObligations)
                                {
                                    <tr class="border-b hover:bg-opacity-50 transition-colors duration-200 cursor-pointer"
                                        style="border-color: var(--border-color);"
                                        @onclick="() => ViewObligation(obligation.Id)">
                                        <td class="py-4 px-6">
                                            <div class="flex items-center">
                                                <div class="w-8 h-8 rounded-lg flex items-center justify-center mr-3 @GetObligationTypeColor(obligation.Type)">
                                                    <i class="@GetObligationTypeIcon(obligation.Type) text-white text-sm"></i>
                                                </div>
                                                <div>
                                                    <div class="font-medium" style="color: var(--text-primary);">@obligation.Name</div>
                                                    <div class="text-sm" style="color: var(--text-secondary);">@obligation.OrganizationName</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="py-4 px-6" style="color: var(--text-primary);">
                                            @GetObligationTypeDisplay(obligation.Type)
                                        </td>
                                        <td class="py-4 px-6">
                                            <div class="font-semibold" style="color: var(--text-primary);">
                                                @(obligation.CurrentBalance?.ToString("C") ?? "N/A")
                                            </div>
                                            @if (obligation.Type == ObligationType.CreditCard && obligation.CreditLimit.HasValue)
                                            {
                                                <div class="text-sm" style="color: var(--text-secondary);">
                                                    @obligation.CreditUtilization.ToString("F1")% utilization
                                                </div>
                                            }
                                        </td>
                                        <td class="py-4 px-6" style="color: var(--text-primary);">
                                            @(obligation.MinimumPayment?.ToString("C") ?? obligation.ContributionAmount.ToString("C") ?? "N/A")
                                        </td>
                                        <td class="py-4 px-6">
                                            <div class="@(obligation.IsOverdue ? "text-red-600 font-semibold" : "")" style="color: var(--text-primary);">
                                                @(obligation.NextContributionDueDate?.ToString("MMM dd, yyyy") ?? "Not set")
                                            </div>
                                            @if (obligation.IsOverdue)
                                            {
                                                <div class="text-sm text-red-600">
                                                    @obligation.DaysOverdue days overdue
                                                </div>
                                            }
                                        </td>
                                        <td class="py-4 px-6">
                                            <span class="@GetStatusBadgeClass(obligation.Status) px-2 py-1 rounded-full text-xs font-medium">
                                                @obligation.Status
                                            </span>
                                        </td>
                                        <td class="py-4 px-6">
                                            <div class="flex gap-2">
                                                <button @onclick:stopPropagation="true" @onclick="() => MakePayment(obligation.Id)" 
                                                        class="btn-primary text-sm px-3 py-1">
                                                    <i class="fas fa-credit-card"></i>
                                                </button>
                                                <button @onclick:stopPropagation="true" @onclick="() => EditObligation(obligation.Id)" 
                                                        class="btn-secondary text-sm px-3 py-1">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="flex justify-center items-center mt-8 gap-2">
                    <button @onclick="PreviousPage" disabled="@(currentPage == 0)" 
                            class="btn-secondary px-3 py-2 disabled:opacity-50">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    
                    @for (int i = Math.Max(0, currentPage - 2); i <= Math.Min(totalPages - 1, currentPage + 2); i++)
                    {
                        int pageIndex = i;
                        <button @onclick="() => GoToPage(pageIndex)" 
                                class="@(currentPage == pageIndex ? "btn-primary" : "btn-secondary") px-3 py-2">
                            @(pageIndex + 1)
                        </button>
                    }
                    
                    <button @onclick="NextPage" disabled="@(currentPage >= totalPages - 1)" 
                            class="btn-secondary px-3 py-2 disabled:opacity-50">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<Obligation> obligations = new();
    private List<Obligation> filteredObligations = new();
    private List<Obligation> paginatedObligations = new();
    
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string selectedTypeFilter = string.Empty;
    private string selectedStatusFilter = string.Empty;
    private string sortBy = "name";
    private ViewMode viewMode = ViewMode.Grid;
    
    // Pagination
    private int currentPage = 0;
    private int pageSize = 12;
    private int totalPages = 0;
    
    // Summary data
    private decimal totalDebt = 0;
    private int debtCount = 0;
    private decimal monthlyPayments = 0;
    private int overdueCount = 0;
    private decimal averageInterestRate = 0;

    private enum ViewMode { Grid, List }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            obligations = (await ObligationService.GetAllObligationsAsync()).ToList();
            CalculateSummaryData();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading obligations: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateSummaryData()
    {
        totalDebt = obligations.Where(o => o.IsDebt).Sum(o => o.CurrentBalance ?? 0);
        debtCount = obligations.Count(o => o.IsDebt);
        monthlyPayments = obligations.Where(o => o.Status == ObligationStatus.Active)
                                   .Sum(o => o.MinimumPayment ?? o.ContributionAmount);
        overdueCount = obligations.Count(o => o.IsOverdue);
        
        var debtObligations = obligations.Where(o => o.IsDebt && o.InterestRate.HasValue).ToList();
        if (debtObligations.Any())
        {
            averageInterestRate = debtObligations.Average(o => o.InterestRate.GetValueOrDefault());
        }
    }

    private void ApplyFilters()
    {
        var filtered = obligations.AsEnumerable();

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(o => 
                o.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.OrganizationName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (o.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Type filter
        if (!string.IsNullOrEmpty(selectedTypeFilter) && Enum.TryParse<ObligationType>(selectedTypeFilter, out var type))
        {
            filtered = filtered.Where(o => o.Type == type);
        }

        // Status filter
        if (!string.IsNullOrEmpty(selectedStatusFilter) && Enum.TryParse<ObligationStatus>(selectedStatusFilter, out var status))
        {
            filtered = filtered.Where(o => o.Status == status);
        }

        // Sorting
        filtered = sortBy switch
        {
            "balance" => filtered.OrderByDescending(o => o.CurrentBalance ?? 0),
            "dueDate" => filtered.OrderBy(o => o.NextContributionDueDate),
            "interestRate" => filtered.OrderByDescending(o => o.InterestRate ?? 0),
            "type" => filtered.OrderBy(o => o.Type),
            _ => filtered.OrderBy(o => o.Name)
        };

        filteredObligations = filtered.ToList();
        totalPages = (int)Math.Ceiling((double)filteredObligations.Count / pageSize);
        currentPage = Math.Min(currentPage, Math.Max(0, totalPages - 1));
        UpdatePagination();
    }

    private void UpdatePagination()
    {
        paginatedObligations = filteredObligations
            .Skip(currentPage * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
        await Task.CompletedTask;
    }

    private void SetViewMode(ViewMode mode)
    {
        viewMode = mode;
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrWhiteSpace(searchTerm) ||
               !string.IsNullOrEmpty(selectedTypeFilter) ||
               !string.IsNullOrEmpty(selectedStatusFilter);
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedTypeFilter = string.Empty;
        selectedStatusFilter = string.Empty;
        sortBy = "name";
        ApplyFilters();
    }

    private void PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
            UpdatePagination();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages - 1)
        {
            currentPage++;
            UpdatePagination();
        }
    }

    private void GoToPage(int page)
    {
        currentPage = page;
        UpdatePagination();
    }

    // Navigation methods
    private void AddNewObligation()
    {
        Navigation.NavigateTo("/obligations/add");
    }

    private void ViewObligation(string obligationId)
    {
        Navigation.NavigateTo($"/obligations/view/{obligationId}");
    }

    private void EditObligation(string obligationId)
    {
        Navigation.NavigateTo($"/obligations/edit/{obligationId}");
    }

    private void MakePayment(string obligationId)
    {
        Navigation.NavigateTo($"/obligations/payment/{obligationId}");
    }

    private void NavigateToDashboard()
    {
        Navigation.NavigateTo("/obligations/dashboard");
    }

    private void NavigateToPayoffCalculator()
    {
        Navigation.NavigateTo("/obligations/payoff-calculator");
    }

    // UI Helper methods
    private string GetObligationTypeDisplay(ObligationType type)
    {
        return type switch
        {
            ObligationType.CreditCard => "Credit Card",
            ObligationType.PersonalLoan => "Personal Loan",
            ObligationType.StudentLoan => "Student Loan",
            ObligationType.AutoLoan => "Auto Loan",
            ObligationType.BusinessLoan => "Business Loan",
            ObligationType.MedicalDebt => "Medical Debt",
            ObligationType.MonthlySubscription => "Monthly Subscription",
            ObligationType.AnnualSubscription => "Annual Subscription",
            ObligationType.CharitableDonation => "Charitable Donation",
            ObligationType.MembershipFee => "Membership Fee",
            ObligationType.ServiceContract => "Service Contract",
            ObligationType.EstimatedTaxPayment => "Estimated Tax",
            ObligationType.PropertyTax => "Property Tax",
            ObligationType.TaxLiability => "Tax Liability",
            ObligationType.InsurancePremium => "Insurance Premium",
            ObligationType.UtilityBill => "Utility Bill",
            ObligationType.InternetService => "Internet Service",
            ObligationType.PhoneService => "Phone Service",
            _ => type.ToString()
        };
    }

    private string GetObligationTypeIcon(ObligationType type)
    {
        return type switch
        {
            ObligationType.CreditCard => "fas fa-credit-card",
            ObligationType.Mortgage => "fas fa-home",
            ObligationType.PersonalLoan or ObligationType.StudentLoan or ObligationType.AutoLoan or ObligationType.BusinessLoan => "fas fa-hand-holding-usd",
            ObligationType.MedicalDebt => "fas fa-user-md",
            ObligationType.MonthlySubscription or ObligationType.AnnualSubscription => "fas fa-sync-alt",
            ObligationType.Membership or ObligationType.MembershipFee => "fas fa-users",
            ObligationType.CharitableDonation => "fas fa-heart",
            ObligationType.ServiceContract => "fas fa-file-contract",
            ObligationType.EstimatedTaxPayment or ObligationType.PropertyTax or ObligationType.TaxLiability => "fas fa-receipt",
            ObligationType.InsurancePremium => "fas fa-shield-alt",
            ObligationType.UtilityBill => "fas fa-bolt",
            ObligationType.InternetService => "fas fa-wifi",
            ObligationType.PhoneService => "fas fa-phone",
            _ => "fas fa-file-contract"
        };
    }

    private string GetObligationTypeColor(ObligationType type)
    {
        return type switch
        {
            ObligationType.CreditCard => "bg-gradient-to-r from-red-500 to-pink-600",
            ObligationType.Mortgage => "bg-gradient-to-r from-green-500 to-emerald-600",
            ObligationType.PersonalLoan or ObligationType.StudentLoan or ObligationType.AutoLoan or ObligationType.BusinessLoan => "bg-gradient-to-r from-blue-500 to-indigo-600",
            ObligationType.MedicalDebt => "bg-gradient-to-r from-purple-500 to-violet-600",
            ObligationType.MonthlySubscription or ObligationType.AnnualSubscription => "bg-gradient-to-r from-orange-500 to-amber-600",
            ObligationType.Membership or ObligationType.MembershipFee => "bg-gradient-to-r from-teal-500 to-cyan-600",
            ObligationType.CharitableDonation => "bg-gradient-to-r from-pink-500 to-rose-600",
            ObligationType.ServiceContract => "bg-gradient-to-r from-gray-500 to-slate-600",
            ObligationType.EstimatedTaxPayment or ObligationType.PropertyTax or ObligationType.TaxLiability => "bg-gradient-to-r from-yellow-500 to-orange-600",
            ObligationType.InsurancePremium => "bg-gradient-to-r from-indigo-500 to-purple-600",
            ObligationType.UtilityBill => "bg-gradient-to-r from-lime-500 to-green-600",
            ObligationType.InternetService => "bg-gradient-to-r from-sky-500 to-blue-600",
            ObligationType.PhoneService => "bg-gradient-to-r from-violet-500 to-purple-600",
            _ => "bg-gradient-to-r from-gray-500 to-slate-600"
        };
    }

    private string GetStatusBadgeClass(ObligationStatus status)
    {
        return status switch
        {
            ObligationStatus.Active => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
            ObligationStatus.Inactive => "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200",
            ObligationStatus.Suspended => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
            ObligationStatus.Terminated => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
            ObligationStatus.Completed => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
            ObligationStatus.PendingApproval => "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200",
            ObligationStatus.OnHold => "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200",
            ObligationStatus.Defaulted => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200"
        };
    }

    private string GetUtilizationColor(decimal utilization)
    {
        return utilization switch
        {
            <= 30 => "bg-green-500",
            <= 60 => "bg-yellow-500",
            <= 90 => "bg-orange-500",
            _ => "bg-red-500"
        };
    }
}