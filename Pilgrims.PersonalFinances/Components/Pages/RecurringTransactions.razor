@page "/transactions/recurring"

@using Pilgrims.PersonalFinances.Core.Models
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Services.Interfaces

@inject IScheduledTransactionService ScheduledTransactionService
@inject ITransactionService TransactionService
@inject IAccountService AccountService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Recurring Transactions - Pilgrims Personal Finance</PageTitle>

<!-- Particle Background -->
<div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-purple-50 via-indigo-50 to-blue-50 dark:from-gray-900 dark:via-purple-900 dark:to-indigo-900"></div>
    <div class="particles-container">
        @for (int i = 0; i < 25; i++)
        {
            <div class="particle" style="animation-delay: @(i * 0.15)s;"></div>
        }
    </div>
</div>

<!-- Main Content -->
<div class="relative z-10 min-h-screen p-6">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">
                        ðŸ”„ Recurring Transactions
                    </h1>
                    <p class="text-[var(--text-secondary)] mt-2">Automate your regular income and expenses</p>
                </div>
                <div class="flex gap-3">
                    <button @onclick="ShowCreateModal" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-indigo-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                        <span class="mr-2">âž•</span> Create Recurring Transaction
                    </button>
                </div>
            </div>
            
            <!-- Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                <div class="bg-gradient-to-r from-green-400 to-green-600 p-4 rounded-xl text-white">
                    <div class="text-sm opacity-90">Active Schedules</div>
                    <div class="text-2xl font-bold">@activeSchedules</div>
                    <div class="text-xs opacity-75 mt-1">Currently running</div>
                </div>
                <div class="bg-gradient-to-r from-orange-400 to-orange-600 p-4 rounded-xl text-white">
                    <div class="text-sm opacity-90">Due Today</div>
                    <div class="text-2xl font-bold">@dueToday</div>
                    <div class="text-xs opacity-75 mt-1">Requires attention</div>
                </div>
                <div class="bg-gradient-to-r from-red-400 to-red-600 p-4 rounded-xl text-white">
                    <div class="text-sm opacity-90">Overdue</div>
                    <div class="text-2xl font-bold">@overdue</div>
                    <div class="text-xs opacity-75 mt-1">Needs processing</div>
                </div>
                <div class="bg-gradient-to-r from-blue-400 to-blue-600 p-4 rounded-xl text-white">
                    <div class="text-sm opacity-90">Monthly Total</div>
                    <div class="text-2xl font-bold">@monthlyTotal.ToString("C")</div>
                    <div class="text-xs opacity-75 mt-1">Estimated impact</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            <div class="lg:col-span-2">
                <input @bind="searchTerm" @oninput="OnSearchChanged" type="text" placeholder="Search recurring transactions..." 
                       class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>
            <div>
                <select @bind="selectedStatus" @bind:after="OnFilterChanged" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                    <option value="">All Status</option>
                    <option value="Active">Active</option>
                    <option value="Paused">Paused</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>
            <div>
                <select @bind="selectedFrequency" @bind:after="OnFilterChanged" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                    <option value="">All Frequencies</option>
                    <option value="Daily">Daily</option>
                    <option value="Weekly">Weekly</option>
                    <option value="Monthly">Monthly</option>
                    <option value="Quarterly">Quarterly</option>
                    <option value="Annually">Annually</option>
                </select>
            </div>
            <div>
                <select @bind="selectedType" @bind:after="OnFilterChanged" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                    <option value="">All Types</option>
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                    <option value="Transfer">Transfer</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Recurring Transactions List -->
    <div class="glass-card rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 overflow-hidden">
        <div class="p-6 border-b border-white/10">
            <div class="flex items-center justify-between">
                <h2 class="text-xl font-semibold text-[var(--text-primary)]">Scheduled Transactions</h2>
                <div class="flex items-center gap-2">
                    <span class="text-sm text-[var(--text-secondary)]">@filteredTransactions.Count() of @scheduledTransactions.Count() transactions</span>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="p-12 text-center">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
                <p class="mt-4 text-[var(--text-secondary)]">Loading recurring transactions...</p>
            </div>
        }
        else if (!filteredTransactions.Any())
        {
            <div class="p-12 text-center">
                <div class="text-6xl mb-4">ðŸ“…</div>
                <h3 class="text-xl font-semibold text-[var(--text-primary)] mb-2">No Recurring Transactions</h3>
                <p class="text-[var(--text-secondary)] mb-6">Create your first recurring transaction to automate your finances.</p>
                <button @onclick="ShowCreateModal" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-indigo-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                    Create Recurring Transaction
                </button>
            </div>
        }
        else
        {
            <div class="divide-y divide-white/10">
                @foreach (var transaction in filteredTransactions)
                {
                    <div class="p-6 hover:bg-white/5 transition-colors duration-200">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-4">
                                <!-- Status Indicator -->
                                <div class="flex-shrink-0">
                                    @if (transaction.IsActive)
                                    {
                                        @if (transaction.IsOverdue)
                                        {
                                            <div class="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                                        }
                                        else if (transaction.IsDueToday)
                                        {
                                            <div class="w-3 h-3 bg-orange-500 rounded-full animate-pulse"></div>
                                        }
                                        else
                                        {
                                            <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="w-3 h-3 bg-gray-400 rounded-full"></div>
                                    }
                                </div>

                                <!-- Transaction Icon -->
                                <div class="flex-shrink-0">
                                    <div class="w-12 h-12 rounded-full flex items-center justify-center @GetTransactionTypeClass(transaction.TransactionType)">
                                        @GetTransactionIcon(transaction.TransactionType)
                                    </div>
                                </div>

                                <!-- Transaction Details -->
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-center space-x-2">
                                        <h3 class="text-lg font-semibold text-[var(--text-primary)] truncate">@transaction.Name</h3>
                                        @if (!string.IsNullOrEmpty(transaction.Description))
                                        {
                                            <span class="text-sm text-[var(--text-secondary)] truncate">â€¢ @transaction.Description</span>
                                        }
                                    </div>
                                    <div class="flex items-center space-x-4 mt-1">
                                        <span class="text-sm text-[var(--text-secondary)]">@transaction.RecurrenceDescription</span>
                                        <span class="text-sm text-[var(--text-secondary)]">Next: @(transaction.NextDueDate?.ToString("MMM dd, yyyy") ?? "Not scheduled")</span>
                                        @if (transaction.Category != null)
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                                                @transaction.Category.Name
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Amount and Actions -->
                            <div class="flex items-center space-x-4">
                                <div class="text-right">
                                    <div class="text-lg font-bold @GetAmountColorClass(transaction.TransactionType)">
                                        @transaction.FormattedAmount
                                    </div>
                                    <div class="text-sm text-[var(--text-secondary)]">
                                        @transaction.Account?.Name
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                <div class="flex items-center space-x-2">
                                    @if (transaction.IsOverdue || transaction.IsDueToday)
                                    {
                                        <button @onclick="() => ProcessTransaction(transaction)" 
                                                class="px-3 py-1 bg-green-500 text-white text-sm rounded-lg hover:bg-green-600 transition-colors">
                                            Process Now
                                        </button>
                                    }
                                    
                                    <button @onclick="() => EditTransaction(transaction)" 
                                            class="p-2 text-blue-500 hover:bg-blue-100 dark:hover:bg-blue-900 rounded-lg transition-colors">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                    </button>
                                    
                                    <button @onclick="() => ToggleTransactionStatus(transaction)" 
                                            class="p-2 @(transaction.IsActive ? "text-orange-500 hover:bg-orange-100 dark:hover:bg-orange-900" : "text-green-500 hover:bg-green-100 dark:hover:bg-green-900") rounded-lg transition-colors">
                                        @if (transaction.IsActive)
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                        }
                                    </button>
                                    
                                    <button @onclick="() => DeleteTransaction(transaction)" 
                                            class="p-2 text-red-500 hover:bg-red-100 dark:hover:bg-red-900 rounded-lg transition-colors">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<ScheduledTransaction> scheduledTransactions = new();
    private List<ScheduledTransaction> filteredTransactions = new();
    private List<Account> accounts = new();
    private List<Category> categories = new();
    
    private bool isLoading = true;
    private string searchTerm = "";
    private string selectedStatus = "";
    private string selectedFrequency = "";
    private string selectedType = "";
    
    // Summary statistics
    private int activeSchedules = 0;
    private int dueToday = 0;
    private int overdue = 0;
    private decimal monthlyTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            scheduledTransactions = (await ScheduledTransactionService.GetAllScheduledTransactionsAsync()).ToList();
            accounts = (await AccountService.GetAllAccountsAsync()).ToList();
            categories = await TransactionService.GetCategoriesAsync();
            
            CalculateStatistics();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Handle error
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading data:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateStatistics()
    {
        activeSchedules = scheduledTransactions.Count(t => t.IsActive);
        dueToday = scheduledTransactions.Count(t => t.IsDueToday);
        overdue = scheduledTransactions.Count(t => t.IsOverdue);
        
        // Calculate estimated monthly impact
        monthlyTotal = scheduledTransactions
            .Where(t => t.IsActive)
            .Sum(t => GetMonthlyAmount(t));
    }

    private decimal GetMonthlyAmount(ScheduledTransaction transaction)
    {
        return transaction.RecurrenceType switch
        {
            RecurrenceType.Daily => transaction.Amount * 30,
            RecurrenceType.Weekly => transaction.Amount * 4.33m,
            RecurrenceType.Monthly => transaction.Amount,
            RecurrenceType.Quarterly => transaction.Amount / 3,
            RecurrenceType.SemiAnnually => transaction.Amount / 6,
            RecurrenceType.Annually => transaction.Amount / 12,
            _ => 0
        };
    }

    private void ApplyFilters()
    {
        filteredTransactions = scheduledTransactions.AsEnumerable().ToList();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTransactions = filteredTransactions.Where(t => 
                t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (t.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)).ToList();
        }

        if (!string.IsNullOrWhiteSpace(selectedStatus))
        {
            filteredTransactions = selectedStatus switch
            {
                "Active" => filteredTransactions.Where(t => t.IsActive).ToList(),
                "Paused" => filteredTransactions.Where(t => !t.IsActive).ToList(),
                "Completed" => filteredTransactions.Where(t => t.EndType != RecurrenceEndType.Never && t.CurrentOccurrences >= t.MaxOccurrences).ToList(),
                _ => filteredTransactions
            };
        }

        if (!string.IsNullOrWhiteSpace(selectedFrequency))
        {
            if (Enum.TryParse<RecurrenceType>(selectedFrequency, out var pattern))
            {
                filteredTransactions = filteredTransactions.Where(t => t.RecurrenceType == pattern).ToList();
            }
        }

        if (!string.IsNullOrWhiteSpace(selectedType))
        {
            if (Enum.TryParse<TransactionType>(selectedType, out var type))
            {
                filteredTransactions = filteredTransactions.Where(t => t.TransactionType == type).ToList();
            }
        }

        filteredTransactions = filteredTransactions.OrderBy(t => t.NextDueDate).ToList();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
        await Task.CompletedTask;
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }

    private void ShowCreateModal()
    {
        Navigation.NavigateTo("/recurring-transactions/create");
    }

    private void EditTransaction(ScheduledTransaction transaction)
    {
        Navigation.NavigateTo($"/recurring-transactions/edit/{transaction.Id}");
    }

    private async Task ProcessTransaction(ScheduledTransaction transaction)
    {
        try
        {
            await ScheduledTransactionService.ProcessDueTransactionAsync(transaction.Id);
            await LoadData(); // Refresh data
            await JSRuntime.InvokeVoidAsync("showToast", "Transaction processed successfully", "success");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error processing transaction: {ex.Message}", "error");
        }
    }

    private async Task ToggleTransactionStatus(ScheduledTransaction transaction)
    {
        try
        {
            if (transaction.IsActive)
            {
                await ScheduledTransactionService.PauseAsync(transaction.Id);
                await JSRuntime.InvokeVoidAsync("showToast", "Transaction paused", "info");
            }
            else
            {
                await ScheduledTransactionService.ResumeAsync(transaction.Id);
                await JSRuntime.InvokeVoidAsync("showToast", "Transaction resumed", "success");
            }
            await LoadData(); // Refresh data
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Error updating transaction: {ex.Message}", "error");
        }
    }

    private async Task DeleteTransaction(ScheduledTransaction transaction)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{transaction.Name}'?");
        if (confirmed)
        {
            try
            {
                await ScheduledTransactionService.DeleteAsync(transaction.Id);
                await LoadData(); // Refresh data
                await JSRuntime.InvokeVoidAsync("showToast", "Transaction deleted successfully", "success");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", $"Error deleting transaction: {ex.Message}", "error");
            }
        }
    }

    private string GetTransactionTypeClass(TransactionType type)
    {
        return type switch
        {
            TransactionType.Income => "bg-green-100 text-green-600 dark:bg-green-900 dark:text-green-300",
            TransactionType.Expense => "bg-red-100 text-red-600 dark:bg-red-900 dark:text-red-300",
            TransactionType.Transfer => "bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-300",
            _ => "bg-gray-100 text-gray-600 dark:bg-gray-900 dark:text-gray-300"
        };
    }

    private string GetTransactionIcon(TransactionType type)
    {
        return type switch
        {
            TransactionType.Income => "ðŸ’°",
            TransactionType.Expense => "ðŸ’¸",
            TransactionType.Transfer => "ðŸ”„",
            _ => "ðŸ’³"
        };
    }

    private string GetAmountColorClass(TransactionType type)
    {
        return type switch
        {
            TransactionType.Income => "text-green-600 dark:text-green-400",
            TransactionType.Expense => "text-red-600 dark:text-red-400",
            TransactionType.Transfer => "text-blue-600 dark:text-blue-400",
            _ => "text-[var(--text-primary)]"
        };
    }
}