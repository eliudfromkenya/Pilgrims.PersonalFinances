@page "/insurance/list"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Models.Enums
@using Pilgrims.PersonalFinances.Services.Interfaces
@inject IInsuranceService InsuranceService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Insurance Policies - Personal Finance Manager</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-4 sm:p-6 lg:p-8">
    <div class="max-w-7xl mx-auto">
        <!-- Header Section -->
        <div class="mb-8">
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900 mb-2">Insurance Policies</h1>
                    <p class="text-gray-600">Manage your insurance policies, track premiums, and monitor coverage</p>
                </div>
                <div class="flex flex-col sm:flex-row gap-3">
                    <button @onclick="NavigateToAddPolicy" 
                            class="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200 flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                        </svg>
                        Add Policy
                    </button>
                    <button @onclick="RefreshData" 
                            class="bg-white hover:bg-gray-50 text-gray-700 px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl border border-gray-200 transform hover:-translate-y-0.5 transition-all duration-200 flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>
        </div>

        <!-- Quick Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-gradient-to-r from-emerald-500 to-teal-600 p-6 rounded-2xl text-white shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-emerald-100 text-sm font-medium">Total Coverage</p>
                        <p class="text-2xl font-bold">@totalCoverage?.ToString("C0")</p>
                    </div>
                    <div class="bg-white bg-opacity-20 p-3 rounded-xl">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
                        </svg>
                    </div>
                </div>
            </div>

            <div class="bg-gradient-to-r from-blue-500 to-cyan-600 p-6 rounded-2xl text-white shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-blue-100 text-sm font-medium">Annual Premiums</p>
                        <p class="text-2xl font-bold">@totalAnnualPremiums.ToString("C0")</p>
                    </div>
                    <div class="bg-white bg-opacity-20 p-3 rounded-xl">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                        </svg>
                    </div>
                </div>
            </div>

            <div class="bg-gradient-to-r from-purple-500 to-indigo-600 p-6 rounded-2xl text-white shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-purple-100 text-sm font-medium">Active Policies</p>
                        <p class="text-2xl font-bold">@activePolicyCount</p>
                    </div>
                    <div class="bg-white bg-opacity-20 p-3 rounded-xl">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                        </svg>
                    </div>
                </div>
            </div>

            <div class="bg-gradient-to-r from-orange-500 to-red-600 p-6 rounded-2xl text-white shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-orange-100 text-sm font-medium">Expiring Soon</p>
                        <p class="text-2xl font-bold">@expiringPoliciesCount</p>
                    </div>
                    <div class="bg-white bg-opacity-20 p-3 rounded-xl">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
                        </svg>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Search Policies</label>
                    <div class="relative">
                        <input @bind="searchTerm" @oninput="OnSearchChanged" 
                               class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                               placeholder="Search by policy number, name, or company...">
                        <svg class="absolute left-3 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                        </svg>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Policy Type</label>
                    <select @bind="selectedPolicyType" @bind:after="OnFilterChanged" 
                            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="">All Types</option>
                        <option value="Life">Life Insurance</option>
                        <option value="Health">Health Insurance</option>
                        <option value="Auto">Auto Insurance</option>
                        <option value="Property">Property Insurance</option>
                        <option value="Disability">Disability Insurance</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                    <select @bind="selectedStatus" @bind:after="OnFilterChanged" 
                            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="">All Statuses</option>
                        <option value="Active">Active</option>
                        <option value="Expired">Expired</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Suspended">Suspended</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Company</label>
                    <select @bind="selectedCompany" @bind:after="OnFilterChanged" 
                            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="">All Companies</option>
                        @foreach (var company in companies)
                        {
                            <option value="@company">@company</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Insurance Policies List -->
        <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
            @if (isLoading)
            {
                <div class="flex items-center justify-center py-12">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                    <span class="ml-3 text-gray-600">Loading policies...</span>
                </div>
            }
            else if (!filteredPolicies.Any())
            {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No insurance policies found</h3>
                    <p class="mt-1 text-sm text-gray-500">Get started by creating your first insurance policy.</p>
                    <div class="mt-6">
                        <button @onclick="NavigateToAddPolicy" 
                                class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200">
                            Add Your First Policy
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Policy Details</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Coverage</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Premium</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expiry</th>
                                <th class="px-6 py-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var policy in filteredPolicies)
                            {
                                <tr class="hover:bg-gray-50 transition-colors duration-150">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-12 w-12">
                                                <div class="h-12 w-12 rounded-xl bg-gradient-to-r @GetPolicyTypeGradient(policy.PolicyType) flex items-center justify-center">
                                                    <span class="text-white font-bold text-lg">@GetPolicyTypeIcon(policy.PolicyType)</span>
                                                </div>
                                            </div>
                                            <div class="ml-4">
                                                <div class="text-sm font-medium text-gray-900">@policy.PolicyName</div>
                                                <div class="text-sm text-gray-500">@policy.PolicyNumber</div>
                                                <div class="text-xs text-gray-400">@policy.InsuranceCompany</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">@policy.CoverageAmount?.ToString("C0")</div>
                                        <div class="text-sm text-gray-500">@policy.PolicyType</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">@policy.PremiumAmount.ToString("C")</div>
                                        <div class="text-sm text-gray-500">@policy.PremiumFrequency</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex px-3 py-1 text-xs font-semibold rounded-full @GetStatusBadgeClass(policy.Status)">
                                            @policy.Status
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-900">@policy.PolicyEndDate?.ToString("MMM dd, yyyy")</div>
                                        <div class="text-xs @GetExpiryTextClass(policy.DaysUntilExpiry)">
                                            @GetExpiryText(policy.DaysUntilExpiry)
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <div class="flex items-center justify-end space-x-2">
                                            <button @onclick="() => ViewPolicy(policy.Id)" 
                                                    class="text-blue-600 hover:text-blue-900 p-2 rounded-lg hover:bg-blue-50 transition-colors duration-150"
                                                    title="View Policy">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                                                </svg>
                                            </button>
                                            <button @onclick="() => EditPolicy(policy.Id)" 
                                                    class="text-indigo-600 hover:text-indigo-900 p-2 rounded-lg hover:bg-indigo-50 transition-colors duration-150"
                                                    title="Edit Policy">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                                                </svg>
                                            </button>
                                            <button @onclick="() => DeletePolicy(policy.Id)" 
                                                    class="text-red-600 hover:text-red-900 p-2 rounded-lg hover:bg-red-50 transition-colors duration-150"
                                                    title="Delete Policy">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                                </svg>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Models.Insurance> policies = new();
    private List<Models.Insurance> filteredPolicies = new();
    private List<string> companies = new();
    private bool isLoading = true;

    // Filter properties
    private string searchTerm = string.Empty;
    private string selectedPolicyType = string.Empty;
    private string selectedStatus = string.Empty;
    private string selectedCompany = string.Empty;

    // Stats properties
    private decimal? totalCoverage = 0;
    private decimal totalAnnualPremiums = 0;
    private int activePolicyCount = 0;
    private int expiringPoliciesCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var allPolicies = await InsuranceService.GetAllInsurancePoliciesAsync();
            policies = allPolicies.ToList();
            companies = policies.Select(p => p.InsuranceCompany).Distinct().OrderBy(c => c).ToList();
            
            await LoadStats();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Handle error - could show toast notification
            Console.WriteLine($"Error loading insurance data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStats()
    {
        totalCoverage = await InsuranceService.GetTotalCoverageAmountAsync();
        totalAnnualPremiums = await InsuranceService.GetTotalAnnualPremiumsAsync();
        activePolicyCount = await InsuranceService.GetActivePolicyCountAsync();
        var expiringPolicies = await InsuranceService.GetPoliciesExpiringInDaysAsync(30);
        expiringPoliciesCount = expiringPolicies.Count();
    }

    private void ApplyFilters()
    {
        filteredPolicies = policies.ToList();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower();
            filteredPolicies = filteredPolicies.Where(p => 
                p.PolicyNumber.ToLower().Contains(term) ||
                p.PolicyName.ToLower().Contains(term) ||
                p.InsuranceCompany.ToLower().Contains(term) ||
                p.PolicyType.ToLower().Contains(term) ||
                p.Description.ToLower().Contains(term))
                .ToList();
        }

        if (!string.IsNullOrWhiteSpace(selectedPolicyType))
        {
            filteredPolicies = filteredPolicies.Where(p => p.PolicyType == selectedPolicyType).ToList();
        }

        if (!string.IsNullOrWhiteSpace(selectedStatus))
        {
            if (Enum.TryParse<InsuranceStatus>(selectedStatus, out var status))
            {
                filteredPolicies = filteredPolicies.Where(p => p.Status == status).ToList();
            }
        }

        if (!string.IsNullOrWhiteSpace(selectedCompany))
        {
            filteredPolicies = filteredPolicies.Where(p => p.InsuranceCompany == selectedCompany).ToList();
        }

        filteredPolicies = filteredPolicies.ToList();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
        await Task.CompletedTask;
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        ApplyFilters();
        await Task.CompletedTask;
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void NavigateToAddPolicy()
    {
        Navigation.NavigateTo("/insurance/add");
    }

    private void ViewPolicy(string policyId)
    {
        Navigation.NavigateTo($"/insurance/view/{policyId}");
    }

    private void EditPolicy(string policyId)
    {
        Navigation.NavigateTo($"/insurance/edit/{policyId}");
    }

    private async Task DeletePolicy(string policyId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this insurance policy?");
        if (confirmed)
        {
            try
            {
                await InsuranceService.DeleteInsurancePolicyAsync(policyId);
                await LoadData();
            }
            catch (Exception ex)
            {
                // Handle error - could show toast notification
                Console.WriteLine($"Error deleting policy: {ex.Message}");
            }
        }
    }

    private string GetPolicyTypeGradient(string policyType) => policyType.ToLower() switch
    {
        "life" => "from-purple-500 to-indigo-600",
        "health" => "from-green-500 to-emerald-600",
        "auto" => "from-blue-500 to-cyan-600",
        "property" => "from-orange-500 to-red-600",
        "disability" => "from-pink-500 to-rose-600",
        _ => "from-gray-500 to-slate-600"
    };

    private string GetPolicyTypeIcon(string policyType) => policyType.ToLower() switch
    {
        "life" => "♥",
        "health" => "⚕",
        "auto" => "🚗",
        "property" => "🏠",
        "disability" => "🛡",
        _ => "📋"
    };

    private string GetStatusBadgeClass(InsuranceStatus status) => status switch
    {
        InsuranceStatus.Active => "bg-green-100 text-green-800",
        InsuranceStatus.Expired => "bg-red-100 text-red-800",
        InsuranceStatus.Cancelled => "bg-gray-100 text-gray-800",
        InsuranceStatus.Suspended => "bg-yellow-100 text-yellow-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string GetExpiryTextClass(int daysUntilExpiry) => daysUntilExpiry switch
    {
        <= 0 => "text-red-600",
        <= 30 => "text-orange-600",
        <= 90 => "text-yellow-600",
        _ => "text-gray-500"
    };

    private string GetExpiryText(int daysUntilExpiry) => daysUntilExpiry switch
    {
        <= 0 => "Expired",
        1 => "Expires tomorrow",
        <= 7 => $"Expires in {daysUntilExpiry} days",
        <= 30 => $"Expires in {daysUntilExpiry} days",
        _ => $"{daysUntilExpiry} days remaining"
    };
}