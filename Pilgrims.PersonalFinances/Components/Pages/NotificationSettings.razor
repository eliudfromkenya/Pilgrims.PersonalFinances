@page "/notification-settings"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@using Pilgrims.PersonalFinances.Core.Messaging.Interfaces
@using Pilgrims.PersonalFinances.Core.Messaging.Extensions

@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IMessagingService MessagingService

<PageTitle>Notification Settings - Pilgrims Personal Finance</PageTitle>

<!-- Particle Background -->
<div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-purple-50 via-indigo-50 to-blue-50 dark:from-gray-900 dark:via-purple-900 dark:to-indigo-900"></div>
    <div class="particles-container">
        @for (int i = 0; i < 25; i++)
        {
            <div class="particle" style="animation-delay: @(i * 0.15)s;"></div>
        }
    </div>
</div>

<!-- Main Content -->
<div class="relative z-10 min-h-screen p-6">
    <!-- Header -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">
                        ‚öôÔ∏è Notification Settings
                    </h1>
                    <p class="text-[var(--text-secondary)] mt-2">Customize your notification preferences and manage alerts</p>
                </div>
                <div class="flex items-center space-x-4">
                    <button @onclick="SaveAllSettings" 
                            class="px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-xl hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1 @(isSaving ? "opacity-50 cursor-not-allowed" : "")">
                        @if (isSaving)
                        {
                            <span class="flex items-center">
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Saving...
                            </span>
                        }
                        else
                        {
                            <span>üíæ Save Settings</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <h2 class="text-2xl font-bold text-[var(--text-primary)] mb-4">üöÄ Quick Actions</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <button @onclick="EnableAllNotifications" 
                        class="p-4 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-xl hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors">
                    <div class="text-2xl mb-2">‚úÖ</div>
                    <div class="font-semibold">Enable All</div>
                    <div class="text-sm opacity-75">Turn on all notifications</div>
                </button>
                
                <button @onclick="DisableAllNotifications" 
                        class="p-4 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 rounded-xl hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors">
                    <div class="text-2xl mb-2">üîï</div>
                    <div class="font-semibold">Disable All</div>
                    <div class="text-sm opacity-75">Turn off all notifications</div>
                </button>
                
                <button @onclick="ResetToDefaults" 
                        class="p-4 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-xl hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors">
                    <div class="text-2xl mb-2">üîÑ</div>
                    <div class="font-semibold">Reset Defaults</div>
                    <div class="text-sm opacity-75">Restore default settings</div>
                </button>
            </div>
        </div>
    </div>

    <!-- Notification Categories -->
    <div class="space-y-6">
        @foreach (var category in notificationCategories)
        {
            <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="text-3xl">@category.Icon</div>
                        <div>
                            <h3 class="text-xl font-bold text-[var(--text-primary)]">@category.Name</h3>
                            <p class="text-[var(--text-secondary)]">@category.Description</p>
                        </div>
                    </div>
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" @bind="category.IsEnabled" class="sr-only peer">
                        <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                    </label>
                </div>

                @if (category.IsEnabled)
                {
                    <div class="space-y-4 border-t border-[var(--border-color)] pt-6">
                        <!-- Timing Settings -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-[var(--text-primary)] mb-2">Days in Advance</label>
                                <input type="number" @bind="category.DaysInAdvance" min="0" max="30" 
                                       class="w-full px-3 py-2 border border-[var(--border-color)] rounded-lg bg-[var(--input-bg)] text-[var(--text-primary)] focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-[var(--text-primary)] mb-2">Preferred Time</label>
                                <input type="time" @bind="category.PreferredTime" @bind:format="HH:mm"
                                       class="w-full px-3 py-2 border border-[var(--border-color)] rounded-lg bg-[var(--input-bg)] text-[var(--text-primary)] focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            </div>
                        </div>

                        <!-- Notification Channels -->
                        <div>
                            <label class="block text-sm font-medium text-[var(--text-primary)] mb-2">Notification Channels</label>
                            <div class="flex flex-wrap gap-2">
                                @foreach (var channel in Enum.GetValues<NotificationChannel>())
                                {
                                    <label class="flex items-center space-x-2 px-3 py-2 bg-[var(--input-bg)] rounded-lg border border-[var(--border-color)] cursor-pointer hover:bg-purple-50 dark:hover:bg-purple-900/20">
                                        <input type="checkbox" @onchange="(e) => ToggleChannel(category, channel, (bool)e.Value!)" 
                                               checked="@category.PreferredChannels.HasFlag(channel)"
                                               class="text-purple-600 focus:ring-purple-500">
                                        <span class="text-sm text-[var(--text-primary)]">@GetChannelDisplayName(channel)</span>
                                    </label>
                                }
                            </div>
                        </div>

                        <!-- Snooze Settings -->
                        <div class="flex items-center justify-between p-4 bg-[var(--input-bg)] rounded-lg border border-[var(--border-color)]">
                            <div>
                                <div class="font-medium text-[var(--text-primary)]">Allow Snoozing</div>
                                <div class="text-sm text-[var(--text-secondary)]">Enable snooze functionality for this notification type</div>
                            </div>
                            <label class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" @bind="category.AllowSnooze" class="sr-only peer">
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                            </label>
                        </div>

                        @if (category.AllowSnooze)
                        {
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-[var(--text-primary)] mb-2">Default Snooze Duration (minutes)</label>
                                    <select @bind="category.DefaultSnoozeDurationMinutes" 
                                            class="w-full px-3 py-2 border border-[var(--border-color)] rounded-lg bg-[var(--input-bg)] text-[var(--text-primary)] focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                        <option value="15">15 minutes</option>
                                        <option value="30">30 minutes</option>
                                        <option value="60">1 hour</option>
                                        <option value="120">2 hours</option>
                                        <option value="240">4 hours</option>
                                        <option value="480">8 hours</option>
                                        <option value="1440">1 day</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-[var(--text-primary)] mb-2">Max Snoozes</label>
                                    <input type="number" @bind="category.MaxSnoozeCount" min="1" max="10" 
                                           class="w-full px-3 py-2 border border-[var(--border-color)] rounded-lg bg-[var(--input-bg)] text-[var(--text-primary)] focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>

    <!-- Advanced Settings -->
    <div class="mt-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <h2 class="text-2xl font-bold text-[var(--text-primary)] mb-6">üîß Advanced Settings</h2>
            
            <div class="space-y-6">
                <!-- Auto-cleanup -->
                <div class="flex items-center justify-between p-4 bg-[var(--input-bg)] rounded-lg border border-[var(--border-color)]">
                    <div>
                        <div class="font-medium text-[var(--text-primary)]">Auto-cleanup Old Notifications</div>
                        <div class="text-sm text-[var(--text-secondary)]">Automatically delete notifications older than specified days</div>
                    </div>
                    <div class="flex items-center space-x-3">
                        <input type="number" @bind="autoCleanupDays" min="7" max="365" 
                               class="w-20 px-2 py-1 border border-[var(--border-color)] rounded bg-[var(--input-bg)] text-[var(--text-primary)] text-center">
                        <span class="text-sm text-[var(--text-secondary)]">days</span>
                    </div>
                </div>

                <!-- Quiet Hours -->
                <div class="p-4 bg-[var(--input-bg)] rounded-lg border border-[var(--border-color)]">
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <div class="font-medium text-[var(--text-primary)]">Quiet Hours</div>
                            <div class="text-sm text-[var(--text-secondary)]">Suppress notifications during specified hours</div>
                        </div>
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" @bind="enableQuietHours" class="sr-only peer">
                            <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                        </label>
                    </div>
                    
                    @if (enableQuietHours)
                    {
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-[var(--text-primary)] mb-1">Start Time</label>
                                <input type="time" @bind="quietHoursStart" 
                                       class="w-full px-3 py-2 border border-[var(--border-color)] rounded-lg bg-white dark:bg-gray-800 text-[var(--text-primary)]">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-[var(--text-primary)] mb-1">End Time</label>
                                <input type="time" @bind="quietHoursEnd" 
                                       class="w-full px-3 py-2 border border-[var(--border-color)] rounded-lg bg-white dark:bg-gray-800 text-[var(--text-primary)]">
                            </div>
                        </div>
                    }
                </div>

                <!-- Bulk Actions -->
                <div class="p-4 bg-[var(--input-bg)] rounded-lg border border-[var(--border-color)]">
                    <div class="font-medium text-[var(--text-primary)] mb-4">Bulk Actions</div>
                    <div class="flex flex-wrap gap-3">
                        <button @onclick="MarkAllNotificationsRead" 
                                class="px-4 py-2 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors">
                            Mark All as Read
                        </button>
                        <button @onclick="DeleteOldNotifications" 
                                class="px-4 py-2 bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 rounded-lg hover:bg-orange-200 dark:hover:bg-orange-900/50 transition-colors">
                            Delete Old Notifications
                        </button>
                        <button @onclick="ClearAllNotifications" 
                                class="px-4 py-2 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 rounded-lg hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors">
                            Clear All Notifications
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private List<NotificationCategorySettings> notificationCategories = new();
    private bool isSaving = false;
    private int autoCleanupDays = 30;
    private bool enableQuietHours = false;

    private TimeOnly quietHoursStart = new TimeOnly(22, 0);
    private TimeOnly quietHoursEnd = new TimeOnly(8,0);

    protected override async Task OnInitializedAsync()
    {
        await LoadNotificationSettings();
    }

    private async Task LoadNotificationSettings()
    {
        // Initialize notification categories with default settings
        notificationCategories = new List<NotificationCategorySettings>
        {
            new NotificationCategorySettings
            {
                NotificationType = AppNotificationType.BillReminder,
                Name = "Bill Reminders",
                Description = "Get notified about upcoming bill payments",
                Icon = "üí≥",
                IsEnabled = true,
                DaysInAdvance = 3,
                PreferredChannels = NotificationChannel.InApp | NotificationChannel.SystemNotification,
                AllowSnooze = true,
                DefaultSnoozeDurationMinutes = 60,
                MaxSnoozeCount = 3
            },
            new NotificationCategorySettings
            {
                NotificationType = AppNotificationType.BudgetAlert,
                Name = "Budget Alerts",
                Description = "Alerts when you're approaching or exceeding budget limits",
                Icon = "üìä",
                IsEnabled = true,
                DaysInAdvance = 0,
                PreferredChannels = NotificationChannel.InApp,
                AllowSnooze = false,
                DefaultSnoozeDurationMinutes = 30,
                MaxSnoozeCount = 1
            },
            new NotificationCategorySettings
            {
                NotificationType = AppNotificationType.DebtPayment,
                Name = "Debt Payments",
                Description = "Reminders for debt payment due dates",
                Icon = "üí∞",
                IsEnabled = true,
                DaysInAdvance = 5,
                PreferredChannels = NotificationChannel.InApp | NotificationChannel.SystemNotification,
                AllowSnooze = true,
                DefaultSnoozeDurationMinutes = 120,
                MaxSnoozeCount = 2
            },
            new NotificationCategorySettings
            {
                NotificationType = AppNotificationType.ReconciliationReminder,
                Name = "Account Reconciliation",
                Description = "Reminders to reconcile your accounts",
                Icon = "‚öñÔ∏è",
                IsEnabled = true,
                DaysInAdvance = 0,
                PreferredChannels = NotificationChannel.InApp,
                AllowSnooze = true,
                DefaultSnoozeDurationMinutes = 1440,
                MaxSnoozeCount = 5
            },
            new NotificationCategorySettings
            {
                NotificationType = AppNotificationType.IncomeExpectation,
                Name = "Income Expectations",
                Description = "Notifications about expected income",
                Icon = "üíµ",
                IsEnabled = true,
                DaysInAdvance = 1,
                PreferredChannels = NotificationChannel.InApp,
                AllowSnooze = true,
                DefaultSnoozeDurationMinutes = 60,
                MaxSnoozeCount = 3
            },
            new NotificationCategorySettings
            {
                NotificationType = AppNotificationType.SystemAlert,
                Name = "System Alerts",
                Description = "Important system notifications and updates",
                Icon = "‚ö†Ô∏è",
                IsEnabled = true,
                DaysInAdvance = 0,
                PreferredChannels = NotificationChannel.InApp | NotificationChannel.SystemNotification,
                AllowSnooze = false,
                DefaultSnoozeDurationMinutes = 15,
                MaxSnoozeCount = 1
            }
        };

        // TODO: Load actual settings from database
        StateHasChanged();
    }

    private async Task SaveAllSettings()
    {
        isSaving = true;
        try
        {
            // TODO: Save settings to database via NotificationService
            await Task.Delay(1000); // Simulate save operation
            
            MessagingService.ShowSuccessToast("Notification settings saved successfully!");
        }
        catch (Exception ex)
        {
            await MessagingService.ShowErrorToastAsync($"Error saving settings: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void EnableAllNotifications()
    {
        foreach (var category in notificationCategories)
        {
            category.IsEnabled = true;
        }
    }

    private void DisableAllNotifications()
    {
        foreach (var category in notificationCategories)
        {
            category.IsEnabled = false;
        }
    }

    private async Task ResetToDefaults()
    {
        await LoadNotificationSettings();
        await MessagingService.ShowInfoToastAsync("Settings reset to defaults");
    }

    private void ToggleChannel(NotificationCategorySettings category, NotificationChannel channel, bool isChecked)
    {
        if (isChecked)
        {
            category.PreferredChannels |= channel;
        }
        else
        {
            category.PreferredChannels &= ~channel;
        }
    }

    private string GetChannelDisplayName(NotificationChannel channel)
    {
        return channel switch
        {
            NotificationChannel.InApp => "In-App",
            NotificationChannel.SystemNotification => "System",
            NotificationChannel.Email => "Email",
            NotificationChannel.SMS => "SMS",
            _ => channel.ToString()
        };
    }

    private async Task MarkAllNotificationsRead()
    {
        try
        {
            await NotificationService.MarkAllAsReadAsync();
            await MessagingService.ShowSuccessToastAsync("All notifications marked as read");
        }
        catch (Exception ex)
        {
            await MessagingService.ShowErrorToastAsync($"Error: {ex.Message}");
        }
    }

    private async Task DeleteOldNotifications()
    {
        try
        {
            await NotificationService.DeleteOldNotificationsAsync(autoCleanupDays);
            await MessagingService.ShowSuccessToastAsync($"Deleted notifications older than {autoCleanupDays} days");
        }
        catch (Exception ex)
        {
            await MessagingService.ShowErrorToastAsync($"Error: {ex.Message}");
        }
    }

    private async Task ClearAllNotifications()
    {
        if (await MessagingService.ShowConfirmationAsync("Are you sure you want to delete all notifications? This action cannot be undone."))
        {
            try
            {
                // TODO: Implement clear all notifications in service
                await MessagingService.ShowSuccessToastAsync("All notifications cleared");
            }
            catch (Exception ex)
            {
                await MessagingService.ShowErrorToastAsync($"Error: {ex.Message}");
            }
        }
    }

    public class NotificationCategorySettings
    {
        public AppNotificationType NotificationType { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public bool IsEnabled { get; set; } = true;
        public int DaysInAdvance { get; set; } = 3;
        public NotificationChannel PreferredChannels { get; set; } = NotificationChannel.InApp;
        public bool AllowSnooze { get; set; } = true;
        public int DefaultSnoozeDurationMinutes { get; set; } = 60;
        public int MaxSnoozeCount { get; set; } = 3;
        
        public string PreferredTimeString 
        { 
            get => PreferredTime.ToString("HH:mm"); 
            set 
            {
                if (TimeOnly.TryParse(value, out var time))
                {
                    PreferredTime = time;
                }
            }
        }
        
        public TimeOnly PreferredTime { get; set; } = new TimeOnly(9, 0, 0);
    }
}