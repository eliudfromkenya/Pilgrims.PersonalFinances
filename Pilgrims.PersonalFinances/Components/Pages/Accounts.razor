@page "/accounts"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Services
@using Pilgrims.PersonalFinances.Core.Messaging.Interfaces
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject IMessagingService MessagingService

<PageTitle>Accounts - Pilgrims Personal Finance</PageTitle>

<!-- Particle Background -->
<div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0" style="background: var(--primary-bg);"></div>
    <div class="particles-container">
        @for (int i = 0; i < 20; i++)
        {
            <div class="particle" style="animation-delay: @(i * 0.2)s;"></div>
        }
    </div>
</div>

<!-- Main Content -->
<div class="relative z-10 min-h-screen p-6">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border backdrop-blur-lg" 
             style="border-color: var(--border-color); background: var(--card-bg);">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-4xl font-bold" style="color: var(--accent-color);">
                        üí≥ Account Management
                    </h1>
                    <p class="mt-2" style="color: var(--text-secondary);">Manage your financial accounts and track balances</p>
                </div>
                <button @onclick="CreateNewAccount" 
                        class="px-6 py-3 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300"
                        style="background: linear-gradient(135deg, var(--accent-color), var(--secondary-color));">
                    <span class="mr-2">‚ûï</span> Add Account
                </button>
            </div>
            
            <!-- Quick Stats -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                <div class="p-4 rounded-xl text-white" style="background: linear-gradient(135deg, var(--success-color), #10b981);">
                    <div class="text-sm opacity-90">Total Balance</div>
                    <div class="text-2xl font-bold">@totalBalance.ToString("C")</div>
                    <div class="text-xs opacity-75 mt-1">‚ÜóÔ∏è @accounts.Count() accounts</div>
                </div>
                <div class="p-4 rounded-xl text-white" style="background: linear-gradient(135deg, var(--info-color), #3b82f6);">
                    <div class="text-sm opacity-90">Active Accounts</div>
                    <div class="text-2xl font-bold">@activeAccountsCount</div>
                    <div class="text-xs opacity-75 mt-1">@bankingAccountsCount banking, @investmentAccountsCount investment</div>
                </div>
                <div class="p-4 rounded-xl text-white" style="background: linear-gradient(135deg, var(--accent-color), var(--secondary-color));">
                    <div class="text-sm opacity-90">Banking Balance</div>
                    <div class="text-2xl font-bold">@bankingBalance.ToString("C")</div>
                    <div class="text-xs opacity-75 mt-1">Checking & Savings</div>
                </div>
                <div class="p-4 rounded-xl text-white" style="background: linear-gradient(135deg, var(--warning-color), #f59e0b);">
                    <div class="text-sm opacity-90">Investment Balance</div>
                    <div class="text-2xl font-bold">@investmentBalance.ToString("C")</div>
                    <div class="text-xs opacity-75 mt-1">Portfolio value</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Account Type Filter -->
    <div class="mb-6">
        <div class="flex flex-wrap gap-2">
            <button @onclick="() => FilterByType(null)" 
                    class="px-4 py-2 rounded-lg transition-all duration-300 hover:scale-105 @(selectedAccountType == null ? "font-semibold" : "")"
                    style="background: @(selectedAccountType == null ? "var(--accent-color)" : "var(--card-bg)"); 
                           color: @(selectedAccountType == null ? "white" : "var(--text-primary)"); 
                           border: 1px solid var(--border-color);">
                All Accounts
            </button>
            @foreach (var type in Enum.GetValues<AccountType>())
            {
                <button @onclick="() => FilterByType(type)" 
                        class="px-4 py-2 rounded-lg transition-all duration-300 hover:scale-105 @(selectedAccountType == type ? "font-semibold" : "")"
                        style="background: @(selectedAccountType == type ? "var(--accent-color)" : "var(--card-bg)"); 
                               color: @(selectedAccountType == type ? "white" : "var(--text-primary)"); 
                               border: 1px solid var(--border-color);">
                    @GetAccountTypeIcon(type) @GetAccountTypeDisplay(type)
                </button>
            }
        </div>
    </div>

    <!-- Accounts Grid -->
    @if (isLoading)
    {
        <div class="flex justify-center items-center py-20">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2" style="border-color: var(--accent-color);"></div>
        </div>
    }
    else if (!filteredAccounts.Any())
    {
        <div class="text-center py-20">
            <div class="text-6xl mb-4">üè¶</div>
            <h3 class="text-2xl font-bold mb-2" style="color: var(--text-primary);">No Accounts Found</h3>
            <p class="mb-6" style="color: var(--text-secondary);">
                @if (selectedAccountType == null)
                {
                    <text>Get started by creating your first account</text>
                }
                else
                {
                    <text>No @GetAccountTypeDisplay(selectedAccountType.Value) accounts found</text>
                }
            </p>
            <button @onclick="CreateNewAccount" 
                    class="px-6 py-3 rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg font-semibold"
                    style="background: var(--accent-color); color: white;">
                Create Your First Account
            </button>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var account in filteredAccounts)
            {
                <div class="group relative overflow-hidden rounded-xl shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-2xl border backdrop-blur-lg cursor-pointer"
                     style="background: var(--card-bg); border-color: var(--border-color);"
                     @onclick="() => ViewAccountDetails(account.Id)">
                    
                    <!-- Color indicator -->
                    <div class="absolute top-0 left-0 w-full h-1 transition-all duration-300 group-hover:h-2"
                         style="background-color: @account.ColorCode;"></div>
                    
                    <!-- Account Header -->
                    <div class="p-6">
                        <div class="flex items-start justify-between mb-4">
                            <div class="flex items-center gap-3">
                                <div class="w-12 h-12 rounded-full flex items-center justify-center text-2xl transition-transform duration-300 group-hover:scale-110"
                                     style="background-color: @account.ColorCode; color: white;">
                                    @GetAccountTypeIcon(account.AccountType)
                                </div>
                                <div>
                                    <h3 class="font-bold text-lg" style="color: var(--text-primary);">
                                        @account.Name
                                    </h3>
                                    <p class="text-sm" style="color: var(--text-secondary);">
                                        @GetAccountTypeDisplay(account.AccountType)
                                    </p>
                                </div>
                            </div>
                            <div class="flex flex-col items-end gap-1">
                                <span class="text-xs px-2 py-1 rounded-full font-medium"
                                      style="background: @GetStatusColor(account.Status)/10; color: @GetStatusColor(account.Status);">
                                    @account.Status
                                </span>
                            </div>
                        </div>

                        <!-- Balance -->
                        <div class="mb-4">
                            <div class="flex items-baseline gap-2">
                                <span class="text-3xl font-bold" style="color: var(--text-primary);">
                                    @account.CurrentBalance.ToString("C")
                                </span>
                                <span class="text-sm" style="color: var(--text-secondary);">
                                    @account.Currency
                                </span>
                            </div>
                            
                            @if (account.AccountType == AccountType.Credit && account.CreditLimit.HasValue)
                            {
                                <div class="mt-2">
                                    <div class="flex justify-between text-sm mb-1" style="color: var(--text-secondary);">
                                        <span>Available: @account.AvailableBalance.ToString("C")</span>
                                        <span>@account.UtilizationPercentage.ToString("F1")%</span>
                                    </div>
                                    <div class="w-full rounded-full h-2" style="background: var(--border-color);">
                                        <div class="h-2 rounded-full transition-all duration-300"
                                             style="width: @(account.UtilizationPercentage)%; 
                                                    background-color: @(account.UtilizationPercentage > 80 ? "var(--error-color)" : 
                                                                       account.UtilizationPercentage > 60 ? "var(--warning-color)" : 
                                                                       "var(--success-color)");">
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Account Details -->
                        <div class="space-y-2 text-sm" style="color: var(--text-secondary);">
                            @if (!string.IsNullOrEmpty(account.BankName))
                            {
                                <div class="flex items-center gap-2">
                                    <span>üèõÔ∏è</span>
                                    <span>@account.BankName</span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(account.AccountNumber))
                            {
                                <div class="flex items-center gap-2">
                                    <span>üî¢</span>
                                    <span>****@account.AccountNumber.Substring(Math.Max(0, account.AccountNumber.Length - 4))</span>
                                </div>
                            }
                        </div>

                        <!-- Quick Actions -->
                        <div class="flex gap-2 mt-4 pt-4 border-t" style="border-color: var(--border-color);">
                            <button @onclick:stopPropagation="true" @onclick="() => EditAccount(account.Id)"
                                    class="flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-300 hover:scale-105"
                                    style="background: var(--accent-color)/10; color: var(--accent-color);">
                                ‚úèÔ∏è Edit
                            </button>
                            <button @onclick:stopPropagation="true" @onclick="() => TransferFunds(account.Id)"
                                    class="flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-300 hover:scale-105"
                                    style="background: var(--success-color)/10; color: var(--success-color);">
                                üí∏ Transfer
                            </button>
                            <button @onclick:stopPropagation="true" @onclick="() => ReconcileAccount(account.Id)"
                                    class="flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all duration-300 hover:scale-105"
                                    style="background: var(--info-color)/10; color: var(--info-color);">
                                üîÑ Reconcile
                            </button>
                            <button @onclick:stopPropagation="true" @onclick="() => DeleteAccount(account.Id)"
                                    class="py-2 px-3 rounded-lg text-sm font-medium transition-all duration-300 hover:scale-105"
                                    style="background: var(--error-color)/10; color: var(--error-color);">
                                üóëÔ∏è Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .particles-container {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    .particle {
        position: absolute;
        width: 4px;
        height: 4px;
        background: linear-gradient(45deg, #3b82f6, #8b5cf6);
        border-radius: 50%;
        animation: float 6s ease-in-out infinite;
        opacity: 0.6;
    }

    .particle:nth-child(odd) {
        left: 20%;
        animation-duration: 8s;
    }

    .particle:nth-child(even) {
        right: 20%;
        animation-duration: 10s;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(100vh) rotate(0deg); opacity: 0; }
        10% { opacity: 0.6; }
        90% { opacity: 0.6; }
        50% { transform: translateY(-10vh) rotate(180deg); }
    }

    .glass-card {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    }
</style>

@code {
    private List<Account> accounts = new();
    private List<Account> filteredAccounts = new();
    private AccountType? selectedAccountType = null;
    private bool isLoading = true;
    private decimal totalBalance = 0;
    private int activeAccountsCount = 0;
    private int bankingAccountsCount = 0;
    private int investmentAccountsCount = 0;
    private decimal bankingBalance = 0;
    private decimal investmentBalance = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }

    private async Task LoadAccounts()
    {
        try
        {
            isLoading = true;
            accounts = (await AccountService.GetAllAccountsAsync()).ToList();
            filteredAccounts = accounts;
            CalculateStats();
        }
        catch (Exception ex)
        {
            // Handle error - could show notification
            Console.WriteLine($"Error loading accounts: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateStats()
    {
        totalBalance = accounts.Sum(a => a.CurrentBalance);
        activeAccountsCount = accounts.Count(a => a.Status == AccountStatus.Active);
        bankingAccountsCount = accounts.Count(a => a.AccountType == AccountType.Checking || a.AccountType == AccountType.Savings);
        investmentAccountsCount = accounts.Count(a => a.AccountType == AccountType.Investment);
        bankingBalance = accounts.Where(a => a.AccountType == AccountType.Checking || a.AccountType == AccountType.Savings).Sum(a => a.CurrentBalance);
        investmentBalance = accounts.Where(a => a.AccountType == AccountType.Investment).Sum(a => a.CurrentBalance);
    }

    private void FilterByType(AccountType? accountType)
    {
        selectedAccountType = accountType;
        filteredAccounts = accountType == null 
            ? accounts 
            : accounts.Where(a => a.AccountType == accountType).ToList();
    }

    private string GetAccountTypeIcon(AccountType accountType)
    {
        return accountType switch
        {
            AccountType.Checking => "üè¶",
            AccountType.Savings => "üí∞",
            AccountType.Cash => "üíµ",
            AccountType.CreditCard => "üí≥",
            AccountType.Investment => "üìà",
            AccountType.Loan => "üè†",
            AccountType.Credit => "üí≥",
            AccountType.Other => "üìã",
            _ => "üìã"
        };
    }

    private string GetAccountTypeDisplay(AccountType accountType)
    {
        return accountType switch
        {
            AccountType.Checking => "Checking",
            AccountType.Savings => "Savings",
            AccountType.Cash => "Cash",
            AccountType.CreditCard => "Credit Card",
            AccountType.Investment => "Investment",
            AccountType.Loan => "Loan",
            AccountType.Credit => "Credit",
            AccountType.Other => "Other",
            _ => "Unknown"
        };
    }

    private string GetStatusColor(AccountStatus status)
    {
        return status switch
        {
            AccountStatus.Active => "var(--success-color)",
            AccountStatus.Inactive => "var(--warning-color)",
            AccountStatus.Closed => "var(--error-color)",
            _ => "var(--text-secondary)"
        };
    }

    private void CreateNewAccount()
    {
        NavigationManager.NavigateTo("/accounts/create");
    }

    private void ViewAccountDetails(string? accountId)
    {
        NavigationManager.NavigateTo($"/accounts/{accountId}");
    }

    private void EditAccount(string? accountId)
    {
        NavigationManager.NavigateTo($"/accounts/{accountId}/edit");
    }

    private void TransferFunds(string? accountId)
    {
        NavigationManager.NavigateTo($"/accounts/transfer?from={accountId}");
    }

    private void ReconcileAccount(string? accountId)
    {
        NavigationManager.NavigateTo($"/accounts/{accountId}/reconcile");
    }

    private async Task DeleteAccount(string? accountId)
    {
        if (string.IsNullOrEmpty(accountId)) return;

        try
        {
            // Check if account can be deleted
            var canDelete = await AccountService.CanDeleteAccountAsync(accountId);
            
            if (!canDelete)
            {
                await MessagingService.ShowAlertAsync("Cannot delete account with existing transactions. Archive it instead.");
                return;
            }

            // Confirm deletion
            var confirmed = await MessagingService.ShowConfirmationAsync("Are you sure you want to delete this account? This action cannot be undone.");
            
            if (confirmed)
            {
                var success = await AccountService.DeleteAccountAsync(accountId);
                
                if (success)
                {
                    await MessagingService.ShowAlertAsync("Account deleted successfully!");
                    await LoadAccounts(); // Refresh the accounts list
                }
                else
                {
                    await MessagingService.ShowAlertAsync("Failed to delete account. Please try again.");
                }
            }
        }
        catch (Exception ex)
        {
            await MessagingService.ShowAlertAsync($"Error deleting account: {ex.Message}");
        }
    }
}
