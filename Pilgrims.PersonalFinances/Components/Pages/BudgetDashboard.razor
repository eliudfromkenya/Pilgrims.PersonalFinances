@page "/budget-dashboard"

@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Models.DTOs
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@inject IBudgetService BudgetService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Budget Dashboard - Pilgrims Personal Finance</PageTitle>

<!-- Particle Background -->
<div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-blue-900 dark:to-purple-900"></div>
    <div class="particles-container">
        @for (int i = 0; i < 25; i++)
        {
            <div class="particle" style="animation-delay: @(i * 0.15)s;"></div>
        }
    </div>
</div>

<!-- Main Content -->
<div class="relative z-10 min-h-screen p-6">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent animate-fade-in">
                        üí∞ Budget Dashboard
                    </h1>
                    <p class="text-gray-600 dark:text-gray-300 mt-2 animate-slide-up">Real-time budget tracking and insights</p>
                </div>
                <div class="flex space-x-3">
                    <button @onclick="NavigateToCreateBudget" class="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 animate-bounce-in">
                        <i class="fas fa-plus mr-2"></i>Create Budget
                    </button>
                    <button @onclick="RefreshDashboard" class="px-4 py-3 bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh
                    </button>
                </div>
            </div>
            
            <!-- Real-time Budget Overview Cards -->
            @if (dashboardData != null)
            {
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                    <div class="bg-gradient-to-r from-green-400 to-green-600 p-4 rounded-xl text-white transform hover:scale-105 transition-all duration-300 animate-slide-up" style="animation-delay: 0.1s;">
                        <div class="text-sm opacity-90">Total Budgeted</div>
                        <div class="text-2xl font-bold">@((decimal)((dynamic)dashboardData).Summary.TotalBudgetAmount).ToString("C")</div>
                        <div class="text-xs opacity-75 mt-1">üìà @((int)((dynamic)dashboardData).Summary.TotalBudgets) active budgets</div>
                    </div>
                    <div class="bg-gradient-to-r from-blue-400 to-blue-600 p-4 rounded-xl text-white transform hover:scale-105 transition-all duration-300 animate-slide-up" style="animation-delay: 0.2s;">
                        <div class="text-sm opacity-90">Total Spent</div>
                        <div class="text-2xl font-bold">@((decimal)((dynamic)dashboardData).Summary.TotalSpentAmount).ToString("C")</div>
                        <div class="text-xs opacity-75 mt-1">@Math.Round((decimal)((dynamic)dashboardData).Summary.AverageUtilization, 1)% average utilization</div>
                    </div>
                    <div class="bg-gradient-to-r from-orange-400 to-orange-600 p-4 rounded-xl text-white transform hover:scale-105 transition-all duration-300 animate-slide-up" style="animation-delay: 0.3s;">
                        <div class="text-sm opacity-90">Remaining</div>
                        <div class="text-2xl font-bold">@(((decimal)((dynamic)dashboardData).Summary.TotalBudgetAmount - (decimal)((dynamic)dashboardData).Summary.TotalSpentAmount)).ToString("C")</div>
                        <div class="text-xs opacity-75 mt-1">@Math.Round((((decimal)((dynamic)dashboardData).Summary.TotalBudgetAmount - (decimal)((dynamic)dashboardData).Summary.TotalSpentAmount) / (decimal)((dynamic)dashboardData).Summary.TotalBudgetAmount) * 100, 1)% left</div>
                    </div>
                    <div class="bg-gradient-to-r from-purple-400 to-purple-600 p-4 rounded-xl text-white transform hover:scale-105 transition-all duration-300 animate-slide-up" style="animation-delay: 0.4s;">
                        <div class="text-sm opacity-90">Over Budget</div>
                        <div class="text-2xl font-bold">@((int)((dynamic)dashboardData).Summary.OverBudgetCount)</div>
                        <div class="text-xs opacity-75 mt-1">@(((int)((dynamic)dashboardData).Summary.OverBudgetCount) > 0 ? "‚ö†Ô∏è Needs attention" : "üéØ All on track")</div>
                    </div>
                </div>
            }
            else
            {
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                    @for (int i = 0; i < 4; i++)
                    {
                        <div class="bg-gradient-to-r from-gray-300 to-gray-400 p-4 rounded-xl animate-pulse">
                            <div class="h-4 bg-gray-200 rounded mb-2"></div>
                            <div class="h-8 bg-gray-200 rounded mb-2"></div>
                            <div class="h-3 bg-gray-200 rounded"></div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Budget Progress Overview -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <!-- Monthly Progress -->
        <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.5s;">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                <span class="mr-2">üìä</span> Monthly Progress
            </h3>
            @if (dashboardData != null)
            {
                <div class="space-y-4">
                    <div class="text-center mb-6">
                        <div class="relative w-32 h-32 mx-auto">
                            <svg class="w-32 h-32 transform -rotate-90" viewBox="0 0 36 36">
                                <path class="text-gray-300 dark:text-gray-600" stroke="currentColor" stroke-width="3" fill="none" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"></path>
                                <path class="text-blue-500 animate-draw-circle" stroke="currentColor" stroke-width="3" fill="none" stroke-dasharray="@Math.Round(((dynamic)dashboardData).Summary.AverageUtilization, 0), 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"></path>
                            </svg>
                            <div class="absolute inset-0 flex items-center justify-center">
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-gray-800 dark:text-white">@Math.Round(((dynamic)dashboardData).Summary.AverageUtilization, 1)%</div>
                                    <div class="text-xs text-gray-500">Used</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="mt-4 text-center">
                        <div class="text-sm text-gray-600 dark:text-gray-300">@DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month - DateTime.Now.Day) days remaining in month</div>
                        <div class="text-xs text-gray-500">Average daily spend: @((((dynamic)dashboardData).Summary.TotalSpentAmount / DateTime.Now.Day).ToString("C"))</div>
                    </div>
                </div>
            }
            else
            {
                <div class="animate-pulse">
                    <div class="w-32 h-32 bg-gray-300 rounded-full mx-auto mb-4"></div>
                    <div class="h-4 bg-gray-300 rounded mx-auto w-3/4 mb-2"></div>
                    <div class="h-3 bg-gray-300 rounded mx-auto w-1/2"></div>
                </div>
            }
        </div>

        <!-- Budget vs Actual Chart -->
        <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.6s;">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                <span class="mr-2">üìà</span> Budget vs Actual (Last 6 Months)
            </h3>
            @if (monthlyData != null && monthlyData.Any())
            {
                <div class="h-48 flex items-end justify-between space-x-2">
                    @{
                        var maxAmount = monthlyData.Max(t => Math.Max(t.BudgetedAmount, t.ActualAmount));
                    }
                    @foreach (var (trend, index) in monthlyData.Select((t, i) => (t, i)))
                    {
                        var budgetHeight = maxAmount > 0 ? (trend.BudgetedAmount / maxAmount) * 100 : 0;
                        var actualHeight = maxAmount > 0 ? (trend.ActualAmount / maxAmount) * 100 : 0;
                        
                        <div class="flex-1 flex flex-col items-center">
                            <div class="w-full flex justify-center space-x-1">
                                <div class="bg-gradient-to-t from-blue-400 to-blue-600 rounded-t-lg transition-all duration-1000 w-1/2 animate-grow-up" 
                                     style="height: @budgetHeight%; animation-delay: @(index * 0.1)s;">
                                </div>
                                <div class="bg-gradient-to-t from-purple-400 to-purple-600 rounded-t-lg transition-all duration-1000 w-1/2 animate-grow-up" 
                                     style="height: @actualHeight%; animation-delay: @(index * 0.1 + 0.05)s;">
                                </div>
                            </div>
                            <span class="text-xs text-gray-500 mt-2">@trend.MonthName</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="h-48 flex items-end justify-between space-x-2 animate-pulse">
                    @for (int i = 0; i < 6; i++)
                    {
                        <div class="flex-1 flex flex-col items-center">
                            <div class="w-full flex justify-center space-x-1">
                                <div class="bg-gray-300 rounded-t-lg w-1/2" style="height: @(Random.Shared.Next(30, 80))%;"></div>
                                <div class="bg-gray-400 rounded-t-lg w-1/2" style="height: @(Random.Shared.Next(30, 80))%;"></div>
                            </div>
                            <div class="h-3 bg-gray-300 rounded w-8 mt-2"></div>
                        </div>
                    }
                </div>
            }
            <div class="flex justify-center space-x-4 mt-4">
                <div class="flex items-center">
                    <div class="w-3 h-3 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full mr-2"></div>
                    <span class="text-xs text-gray-600 dark:text-gray-300">Budget</span>
                </div>
                <div class="flex items-center">
                    <div class="w-3 h-3 bg-gradient-to-r from-purple-400 to-purple-600 rounded-full mr-2"></div>
                    <span class="text-xs text-gray-600 dark:text-gray-300">Actual</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Active Budgets List -->
    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 mb-8 animate-slide-up" style="animation-delay: 0.7s;">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-white flex items-center">
                <span class="mr-2">üéØ</span> Active Budgets
            </h3>
            <div class="flex space-x-2">
                <button @onclick="NavigateToBudgetTemplates" class="px-4 py-2 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-lg hover:shadow-lg transform hover:scale-105 transition-all duration-300 text-sm">
                    <i class="fas fa-layer-group mr-2"></i>Templates
                </button>
                <button @onclick="NavigateToBudgetAnalytics" class="px-4 py-2 bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-lg hover:shadow-lg transform hover:scale-105 transition-all duration-300 text-sm">
                    <i class="fas fa-chart-line mr-2"></i>Analytics
                </button>
            </div>
        </div>
        
        @if (activeBudgets != null && activeBudgets.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var (budget, index) in activeBudgets.Select((b, i) => (b, i)))
                {
                    var utilizationPercentage = budget.LimitAmount > 0 ? (budget.SpentAmount / budget.LimitAmount) * 100 : 0;
                    var isOverBudget = budget.SpentAmount > budget.LimitAmount;
                    var remainingAmount = budget.LimitAmount - budget.SpentAmount;
                    
                    <div class="bg-white/50 dark:bg-gray-700/50 p-4 rounded-xl hover:shadow-lg transition-all duration-300 transform hover:scale-105 animate-fade-in" style="animation-delay: @((index * 0.1) + 0.8)s;">
                        <div class="flex items-center justify-between mb-3">
                            <div class="flex items-center">
                                <span class="text-2xl mr-3">
                                    @(budget.BudgetType switch
                                    {
                                        BudgetType.Category => "üìÇ",
                                        BudgetType.Account => "üè¶",
                                        BudgetType.Tag => "üè∑Ô∏è",
                                        BudgetType.TimePeriod => "üìÖ",
                                        _ => "üí∞"
                                    })
                                </span>
                                <div>
                                    <h4 class="font-medium text-gray-800 dark:text-white">@budget.Name</h4>
                                    <p class="text-xs text-gray-500">@budget.SpentAmount.ToString("C") / @budget.LimitAmount.ToString("C")</p>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-sm font-semibold @(isOverBudget ? "text-red-600" : "text-green-600")">
                                    @Math.Round(utilizationPercentage, 1)%
                                </div>
                                <div class="text-xs text-gray-500">
                                    @(remainingAmount >= 0 ? $"{remainingAmount:C} left" : $"{Math.Abs(remainingAmount):C} over")
                                </div>
                            </div>
                        </div>
                        
                        <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2 mb-3">
                            <div class="@(isOverBudget ? "bg-gradient-to-r from-red-400 to-red-600 animate-pulse" : "bg-gradient-to-r from-blue-400 to-purple-600") h-2 rounded-full transition-all duration-1000 animate-grow-width" 
                                 style="width: @Math.Min(utilizationPercentage, 100)%; animation-delay: @((index * 0.1) + 1)s;"></div>
                        </div>
                        
                        @if (isOverBudget)
                        {
                            <div class="mt-2 text-xs text-red-600 flex items-center animate-pulse">
                                <span class="mr-1">‚ö†Ô∏è</span> Over budget by @Math.Abs(remainingAmount).ToString("C")
                            </div>
                        }
                        
                        <div class="mt-3 flex justify-between items-center">
                            <span class="text-xs text-gray-500">@budget.Period.ToString() ‚Ä¢ @budget.StartDate.ToString("MMM dd") - @budget.EndDate.ToString("MMM dd")</span>
                            <button @onclick="() => NavigateToEditBudget(int.Parse(budget.Id))" class="text-blue-600 hover:text-blue-800 text-xs font-medium">
                                <i class="fas fa-edit mr-1"></i>Edit
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else if (activeBudgets != null)
        {
            <div class="text-center py-12">
                <div class="text-6xl mb-4">üìä</div>
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-2">No Active Budgets</h3>
                <p class="text-gray-600 dark:text-gray-300 mb-6">Create your first budget to start tracking your spending</p>
                <button @onclick="NavigateToCreateBudget" class="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                    <i class="fas fa-plus mr-2"></i>Create Your First Budget
                </button>
            </div>
        }
        else
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="bg-white/50 dark:bg-gray-700/50 p-4 rounded-xl animate-pulse">
                        <div class="flex items-center justify-between mb-3">
                            <div class="flex items-center">
                                <div class="w-8 h-8 bg-gray-300 rounded-full mr-3"></div>
                                <div>
                                    <div class="h-4 bg-gray-300 rounded w-24 mb-1"></div>
                                    <div class="h-3 bg-gray-300 rounded w-16"></div>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="h-4 bg-gray-300 rounded w-12 mb-1"></div>
                                <div class="h-3 bg-gray-300 rounded w-16"></div>
                            </div>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2 mb-3"></div>
                        <div class="h-3 bg-gray-300 rounded w-full"></div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Budget Insights & Recommendations -->
    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 mb-8 animate-slide-up" style="animation-delay: 0.9s;">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-white flex items-center">
                <span class="mr-2">üí°</span> Budget Insights & Recommendations
            </h3>
            <button @onclick="RefreshInsights" class="px-4 py-2 bg-gradient-to-r from-yellow-500 to-orange-600 text-white rounded-lg hover:shadow-lg transform hover:scale-105 transition-all duration-300 text-sm">
                <i class="fas fa-sync-alt mr-2"></i>Refresh
            </button>
        </div>
        
        @if (budgetInsights != null && budgetInsights.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                @foreach (var (insight, index) in budgetInsights.Select((i, idx) => (i, idx)))
                {
                    <div class="bg-white/50 dark:bg-gray-700/50 p-4 rounded-xl hover:shadow-lg transition-all duration-300 animate-fade-in" style="animation-delay: @((index * 0.1) + 1)s;">
                        <div class="flex items-start">
                            <div class="text-2xl mr-3">
                                @(insight.Type switch
                                {
                                    "warning" => "‚ö†Ô∏è",
                                    "success" => "‚úÖ",
                                    "info" => "‚ÑπÔ∏è",
                                    "tip" => "üí°",
                                    _ => "üìä"
                                })
                            </div>
                            <div class="flex-1">
                                <h4 class="font-medium text-gray-800 dark:text-white mb-2">@insight.Title</h4>
                                <p class="text-sm text-gray-600 dark:text-gray-300 mb-3">@insight.Description</p>
                                @if (!string.IsNullOrEmpty(insight.ActionText))
                                {
                                    <button @onclick="() => ExecuteInsightAction(insight)" class="text-xs text-blue-600 hover:text-blue-800 font-medium">
                                        @insight.ActionText <i class="fas fa-arrow-right ml-1"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (budgetInsights != null)
        {
            <div class="text-center py-8">
                <div class="text-4xl mb-3">üéâ</div>
                <h4 class="text-lg font-medium text-gray-800 dark:text-white mb-2">All Good!</h4>
                <p class="text-gray-600 dark:text-gray-300">Your budgets are on track. Keep up the great work!</p>
            </div>
        }
        else
        {
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                @for (int i = 0; i < 4; i++)
                {
                    <div class="bg-white/50 dark:bg-gray-700/50 p-4 rounded-xl animate-pulse">
                        <div class="flex items-start">
                            <div class="w-8 h-8 bg-gray-300 rounded-full mr-3"></div>
                            <div class="flex-1">
                                <div class="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
                                <div class="h-3 bg-gray-300 rounded w-full mb-2"></div>
                                <div class="h-3 bg-gray-300 rounded w-1/2"></div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Quick Actions -->
    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 1.1s;">
        <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
            <span class="mr-2">‚ö°</span> Quick Actions
        </h3>
        
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <button @onclick="NavigateToCreateBudget" class="p-4 bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 text-center">
                <div class="text-2xl mb-2">‚ûï</div>
                <div class="text-sm font-medium">Create Budget</div>
            </button>
            
            <button @onclick="NavigateToBudgetTemplates" class="p-4 bg-gradient-to-br from-purple-500 to-purple-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 text-center">
                <div class="text-2xl mb-2">üìã</div>
                <div class="text-sm font-medium">Templates</div>
            </button>
            
            <button @onclick="NavigateToBudgetAnalytics" class="p-4 bg-gradient-to-br from-green-500 to-green-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 text-center">
                <div class="text-2xl mb-2">üìà</div>
                <div class="text-sm font-medium">Analytics</div>
            </button>
            
            <button @onclick="NavigateToBudgetAlerts" class="p-4 bg-gradient-to-br from-orange-500 to-orange-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 text-center">
                <div class="text-2xl mb-2">üîî</div>
                <div class="text-sm font-medium">Alerts</div>
            </button>
        </div>
    </div>
</div>

<style>
    .particles-container {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    .particle {
        position: absolute;
        width: 3px;
        height: 3px;
        background: linear-gradient(45deg, #3b82f6, #8b5cf6);
        border-radius: 50%;
        animation: float 8s ease-in-out infinite;
        opacity: 0.7;
    }

    .particle:nth-child(odd) {
        left: 15%;
        animation-duration: 10s;
    }

    .particle:nth-child(even) {
        right: 15%;
        animation-duration: 12s;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(100vh) rotate(0deg); opacity: 0; }
        10% { opacity: 0.7; }
        90% { opacity: 0.7; }
        50% { transform: translateY(-10vh) rotate(180deg); }
    }

    .glass-card {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    }
</style>

@code {
    private object? dashboardData;
    private IEnumerable<Budget>? activeBudgets;
    private List<BudgetInsight>? budgetInsights;
    private IEnumerable<MonthlyBudgetPerformanceDto>? monthlyData;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load dashboard data
            dashboardData = await BudgetService.GetBudgetDashboardDataAsync();
            
            // Load active budgets
            activeBudgets = await BudgetService.GetActiveBudgetsAsync();
            
            // Load budget insights
            budgetInsights = await GenerateBudgetInsights();
            
            // Load monthly data for charts
            var currentYear = DateTime.Now.Year;
            monthlyData = await BudgetService.GetMonthlyBudgetPerformanceAsync(currentYear);
        }
        catch (Exception ex)
        {
            // Handle error - could show notification
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<List<BudgetInsight>> GenerateBudgetInsights()
    {
        var insights = new List<BudgetInsight>();
        
        if (activeBudgets?.Any() == true)
        {
            // Check for over-budget situations
            var overBudgetItems = activeBudgets.Where(b => b.SpentAmount > b.LimitAmount).ToList();
            foreach (var budget in overBudgetItems)
            {
                insights.Add(new BudgetInsight
                {
                    Type = "warning",
                    Title = $"{budget.Name} Over Budget",
                    Description = $"You've exceeded your {budget.Name} budget by {(budget.SpentAmount - budget.LimitAmount):C}. Consider adjusting your spending.",
                    ActionText = "View Details",
                    ActionData = budget.Id.ToString()
                });
            }

            // Check for budgets nearing limits
            var nearLimitBudgets = activeBudgets.Where(b => 
                b.LimitAmount > 0 && 
                (b.SpentAmount / b.LimitAmount) >= 0.8m && 
                (b.SpentAmount / b.LimitAmount) < 1.0m).ToList();
            
            foreach (var budget in nearLimitBudgets)
            {
                var percentage = Math.Round((budget.SpentAmount / budget.LimitAmount) * 100, 0);
                insights.Add(new BudgetInsight
                {
                    Type = "warning",
                    Title = $"{budget.Name} Near Limit",
                    Description = $"You've used {percentage}% of your {budget.Name} budget. {(budget.LimitAmount - budget.SpentAmount):C} remaining.",
                    ActionText = "Adjust Budget",
                    ActionData = budget.Id.ToString()
                });
            }

            // Check for under-utilized budgets
            var underUtilizedBudgets = activeBudgets.Where(b => 
                b.LimitAmount > 0 && 
                (b.SpentAmount / b.LimitAmount) < 0.5m &&
                b.EndDate <= DateTime.Now.AddDays(7)).ToList();
            
            foreach (var budget in underUtilizedBudgets)
            {
                var remaining = budget.LimitAmount - budget.SpentAmount;
                insights.Add(new BudgetInsight
                {
                    Type = "success",
                    Title = $"Savings Opportunity",
                    Description = $"You have {remaining:C} unused in your {budget.Name} budget. Consider moving to savings or other categories.",
                    ActionText = "Transfer Funds",
                    ActionData = budget.Id.ToString()
                });
            }

            // Add general insights if no specific issues
            if (!insights.Any())
            {
                insights.Add(new BudgetInsight
                {
                    Type = "success",
                    Title = "Great Budget Management!",
                    Description = "All your budgets are on track. Keep up the excellent financial discipline.",
                    ActionText = "",
                    ActionData = ""
                });
            }
        }

        return insights;
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
    }

    private async Task RefreshInsights()
    {
        budgetInsights = await GenerateBudgetInsights();
        StateHasChanged();
    }

    private void NavigateToCreateBudget()
    {
        Navigation.NavigateTo("/budget/create");
    }

    private void NavigateToEditBudget(int budgetId)
    {
        Navigation.NavigateTo($"/budget/edit/{budgetId}");
    }

    private void NavigateToBudgetTemplates()
    {
        Navigation.NavigateTo("/budget/templates");
    }

    private void NavigateToBudgetAnalytics()
    {
        Navigation.NavigateTo("/budget/analytics");
    }

    private void NavigateToBudgetAlerts()
    {
        Navigation.NavigateTo("/budget/alerts");
    }

    private async Task ExecuteInsightAction(BudgetInsight insight)
    {
        switch (insight.ActionText)
        {
            case "View Details":
            case "Adjust Budget":
                if (int.TryParse(insight.ActionData, out int budgetId))
                {
                    NavigateToEditBudget(budgetId);
                }
                break;
            case "Transfer Funds":
                // Could implement a transfer funds modal or navigate to transfer page
                Navigation.NavigateTo("/budget/transfer");
                break;
        }
    }

    // Helper classes for data structure
    public class BudgetInsight
    {
        public string Type { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string ActionText { get; set; } = "";
        public string ActionData { get; set; } = "";
    }
}
