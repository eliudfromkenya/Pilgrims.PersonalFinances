@page "/accounts/create"

@using Pilgrims.PersonalFinances.Core.Models.Enums

@using Pilgrims.PersonalFinances.Core.Messaging.Interfaces
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject IMessagingService MessagingService
@inject IJSRuntime JSRuntime
@inject ICurrencyService CurrencyService

<PageTitle>Create Account - Personal Finance</PageTitle>

<div class="min-h-screen relative overflow-hidden" style="background: var(--primary-bg);">
    <!-- Animated Background -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="particles"></div>
        <div class="absolute inset-0" style="background: linear-gradient(135deg, var(--accent-color)/5 0%, var(--secondary-color)/5 100%);"></div>
    </div>

    <!-- Main Content -->
    <div class="relative z-10 container mx-auto px-4 py-3">
        <!-- Header -->
        <div class="text-center mb-3">
            <div class="inline-flex items-center gap-3 mb-2">
                <div class="w-16 h-16 rounded-full flex items-center justify-center text-3xl transition-transform duration-300 hover:scale-110"
                     style="background: var(--accent-color); color: white;">
                    üè¶
                </div>
                <h1 class="text-4xl font-bold" style="color: var(--text-primary);">
                    Create New Account
                </h1>
                 <p class="text-lg" style="color: var(--text-secondary);">
                    Set up a new financial account to track your money
                 </p>
            </div>           
        </div>

        <!-- Form Container -->
        <div class="max-w-5xl mx-auto">
            <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-8 transition-all duration-300 hover:shadow-3xl"
                 style="background: var(--card-bg); border-color: var(--border-color);">
                
                <EditForm Model="@accountModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <!-- Grid for form fields: responsive 1-col on small, 2-col on md+ -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Account Name -->
                        <div>
                            <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                Account Name *
                            </label>
                            <InputText @bind-Value="accountModel.Name" 
                                       class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg"
                                       style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                       placeholder="e.g., Chase Checking, Emergency Savings" />
                            <ValidationMessage For="@(() => accountModel.Name)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <!-- Account Type -->
                        <div>
                            <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                Account Type *
                            </label>
                            <InputSelect @bind-Value="accountModel.AccountType" 
                                         class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg"
                                         style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);">
                                <option value="">Select account type...</option>
                                @foreach (var type in Enum.GetValues<AccountType>())
                                {
                                    <option value="@type">@GetAccountTypeIcon(type) @GetAccountTypeDisplay(type)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => accountModel.AccountType)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <!-- Currency (Autocomplete) -->
                        <div>
                            <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                Currency *
                            </label>
                            <CurrencyAutocomplete Value="@accountModel.Currency" ValueChanged="@(v => accountModel.Currency = v)" CssClass="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg" />
                            <ValidationMessage For="@(() => accountModel.Currency)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <!-- Initial Balance -->
                        <div>
                            <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                Initial Balance *
                            </label>
                            <InputNumber @bind-Value="accountModel.InitialBalance" 
                                         class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg"
                                         style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                         placeholder="0.00" 
                                         step="0.01" />
                            <ValidationMessage For="@(() => accountModel.InitialBalance)" class="text-red-500 text-sm mt-1" />
                            <p class="text-xs mt-1" style="color: var(--text-secondary);">
                                Enter the current balance of this account
                            </p>
                        </div>

                        <!-- Color Selection -->
                        <div>
                            <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                Account Color
                            </label>
                            <div class="flex flex-wrap gap-3">
                                @foreach (var color in predefinedColors)
                                {
                                    <button type="button" 
                                            @onclick="() => SelectColor(color)"
                                            class="w-12 h-12 rounded-full border-4 transition-all duration-300 hover:scale-110 @(accountModel.ColorCode == color ? "ring-4 ring-offset-2" : "")"
                                            style="background-color: @color; border-color: @(accountModel.ColorCode == color ? "var(--accent-color)" : "var(--border-color)"); ring-color: var(--accent-color);">
                                    </button>
                                }
                            <InputText @bind-Value="accountModel.ColorCode" 
                                           class="w-32 px-3 py-2 rounded-lg border text-sm"
                                           style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                           placeholder="#3B82F6" />
                            </div>
                            
                        </div>

                        <!-- Account-Specific Fields -->
                        @if (accountModel.AccountType == AccountType.Credit || accountModel.AccountType == AccountType.CreditCard)
                        {
                            <div>
                                <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                    Credit Limit
                                </label>
                                <InputNumber @bind-Value="accountModel.CreditLimit" 
                                             class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" 
                                             step="0.01" />
                            </div>
                        }

                        @if (accountModel.AccountType == AccountType.Savings)
                        {
                            <div>
                                <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                    Interest Rate (%)
                                </label>
                                <InputNumber @bind-Value="accountModel.InterestRate" 
                                             class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg"
                                             style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                             placeholder="0.00" 
                                             step="0.01" />
                            </div>
                        }

                        @if (accountModel.AccountType == AccountType.Investment)
                        {
                            <div>
                                <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                    Broker Name
                                </label>
                                <InputText @bind-Value="accountModel.BrokerName" 
                                           class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg"
                                           style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                           placeholder="e.g., Fidelity, Charles Schwab" />
                            </div>
                        }

                        <!-- Optional Fields -->
                        <div>
                            <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                Bank Name
                            </label>
                            <InputText @bind-Value="accountModel.BankName" 
                                       class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg"
                                       style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                       placeholder="e.g., Chase, Wells Fargo" />
                        </div>
                        <div>
                            <label class="block text-sm font-semibold mb-2" style="color: var(--text-primary);">
                                Account Number
                            </label>
                            <InputText @bind-Value="accountModel.AccountNumber" 
                                       class="w-full px-4 py-3 rounded-lg border transition-all duration-300 focus:scale-105 focus:shadow-lg"
                                       style="background: var(--input-bg); border-color: var(--border-color); color: var(--text-primary);"
                                       placeholder="****1234" />
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="flex gap-4 pt-6 border-t" style="border-color: var(--border-color);">
                        <button type="button" 
                                @onclick="Cancel"
                                class="flex-1 py-3 px-6 rounded-lg font-semibold transition-all duration-300 hover:scale-105"
                                style="background: var(--card-bg); color: var(--text-primary); border: 2px solid var(--border-color);">
                            Cancel
                        </button>
                        <button type="submit" 
                                disabled="@isSubmitting"
                                class="flex-1 py-3 px-6 rounded-lg font-semibold transition-all duration-300 hover:scale-105 hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
                                style="background: var(--accent-color); color: white;">
                            @if (isSubmitting)
                            {
                                <span class="flex items-center justify-center gap-2">
                                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                    Creating...
                                </span>
                            }
                            else
                            {
                                <span>Create Account</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Particles CSS -->
<style>
    .particles {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    .particles::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background-image: 
            radial-gradient(2px 2px at 20px 30px, rgba(255,255,255,0.1), transparent),
            radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.1), transparent),
            radial-gradient(1px 1px at 90px 40px, rgba(255,255,255,0.1), transparent),
            radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.1), transparent);
        background-repeat: repeat;
        background-size: 200px 200px;
        animation: particles 20s linear infinite;
    }

    @@keyframes particles {
        0% { transform: translate(0, 0); }
        100% { transform: translate(-200px, -200px); }
    }

    .glass-card {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    }
</style>

@code {
    private CreateAccountModel accountModel = new();
    private bool isSubmitting = false;
    
    private readonly string[] predefinedColors = {
        "#3B82F6", "#EF4444", "#10B981", "#F59E0B", "#8B5CF6",
        "#EC4899", "#06B6D4", "#84CC16", "#F97316", "#6366F1"
    };

    protected override async Task OnInitializedAsync()
    {
        accountModel.ColorCode = predefinedColors[0];
        var defaultCurrency = await CurrencyService.GetCurrentCurrencyAsync().ConfigureAwait(false);
        accountModel.Currency = defaultCurrency;
        accountModel.Status = AccountStatus.Active;
    }

    private void SelectColor(string color)
    {
        accountModel.ColorCode = color;
    }

    private string GetAccountTypeIcon(AccountType accountType)
    {
        return accountType switch
        {
            AccountType.Checking => "üè¶",
            AccountType.Savings => "üí∞",
            AccountType.Cash => "üíµ",
            AccountType.CreditCard => "üí≥",
            AccountType.Investment => "üìà",
            AccountType.Loan => "üè†",
            AccountType.Credit => "üí≥",
            AccountType.Other => "üìã",
            _ => "üìã"
        };
    }

    private string GetAccountTypeDisplay(AccountType accountType)
    {
        return accountType switch
        {
            AccountType.Checking => "Checking Account",
            AccountType.Savings => "Savings Account",
            AccountType.Cash => "Cash Account",
            AccountType.CreditCard => "Credit Card",
            AccountType.Investment => "Investment Account",
            AccountType.Loan => "Loan Account",
            AccountType.Credit => "Credit Account",
            AccountType.Other => "Other",
            _ => "Unknown"
        };
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            var account = new Account
            {
                Name = accountModel.Name,
                AccountType = accountModel.AccountType,
                Currency = accountModel.Currency,
                InitialBalance = accountModel.InitialBalance,
                CurrentBalance = accountModel.InitialBalance,
                ColorCode = accountModel.ColorCode,
                Status = accountModel.Status,
                BankName = accountModel.BankName,
                AccountNumber = accountModel.AccountNumber,
                CreditLimit = accountModel.CreditLimit,
                InterestRate = accountModel.InterestRate,
                BrokerName = accountModel.BrokerName,
                CreatedAt = DateTime.UtcNow
            };

            await AccountService.CreateAccountAsync(account);
            
            // Show success message and navigate back
            await JSRuntime.InvokeVoidAsync("alert", "Account created successfully!");
            NavigationManager.NavigateTo("/accounts");
        }
        catch (Exception ex)
        {
            MessagingService.ShowAlertAsync($"Error creating account: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleInvalidSubmit()
    {
        MessagingService.ShowAlertAsync("Please fix the validation errors before submitting.");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/accounts");
    }

    public class CreateAccountModel
    {
        [Required(ErrorMessage = "Account name is required")]
        [StringLength(100, ErrorMessage = "Account name cannot exceed 100 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Account type is required")]
        public AccountType AccountType { get; set; }

        [Required(ErrorMessage = "Currency is required")]
        [StringLength(3, MinimumLength = 3, ErrorMessage = "Currency must be a 3-letter ISO code")]
        public string Currency { get; set; } = string.Empty;

        [Required(ErrorMessage = "Initial balance is required")]
        [Range(-999999999.99, 999999999.99, ErrorMessage = "Initial balance must be a valid amount")]
        public decimal InitialBalance { get; set; }

        [Required(ErrorMessage = "Color code is required")]
        [RegularExpression(@"^#[0-9A-Fa-f]{6}$", ErrorMessage = "Color code must be a valid hex color (e.g., #3B82F6)")]
        public string ColorCode { get; set; } = string.Empty;

        public AccountStatus Status { get; set; } = AccountStatus.Active;

        [StringLength(100, ErrorMessage = "Bank name cannot exceed 100 characters")]
        public string? BankName { get; set; }

        [StringLength(50, ErrorMessage = "Account number cannot exceed 50 characters")]
        public string? AccountNumber { get; set; }

        [Range(0, 999999999.99, ErrorMessage = "Credit limit must be a positive amount")]
        public decimal? CreditLimit { get; set; }

        [Range(0, 100, ErrorMessage = "Interest rate must be between 0 and 100")]
        public decimal? InterestRate { get; set; }

        [StringLength(100, ErrorMessage = "Broker name cannot exceed 100 characters")]
        public string? BrokerName { get; set; }
    }
}
