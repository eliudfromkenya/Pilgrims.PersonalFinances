@page "/transactions"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Models.Enums
@using Pilgrims.PersonalFinances.Services.Interfaces
@using Pilgrims.PersonalFinances.Services
@inject ITransactionService TransactionService
@inject IAccountService AccountService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Transactions - Pilgrims Personal Finance</PageTitle>

<!-- Particle Background -->
<div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-green-50 via-emerald-50 to-teal-50 dark:from-gray-900 dark:via-green-900 dark:to-teal-900"></div>
    <div class="particles-container">
        @for (int i = 0; i < 25; i++)
        {
            <div class="particle" style="animation-delay: @(i * 0.15)s;"></div>
        }
    </div>
</div>

<!-- Main Content -->
<div class="relative z-10 min-h-screen p-6">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-green-600 to-teal-600 bg-clip-text text-transparent">
                        💳 Transaction Center
                    </h1>
                    <p class="text-[var(--text-secondary)] mt-2">Track and analyze your financial transactions</p>
                </div>
                <div class="flex gap-3">
                    @if (selectedTransactions.Any())
                    {
                        <div class="flex items-center gap-2 mr-4">
                            <span class="text-sm text-[var(--text-secondary)]">@selectedTransactions.Count selected</span>
                            <button @onclick="ClearSelection" class="text-sm text-red-500 hover:text-red-700">Clear</button>
                        </div>
                        <div class="flex gap-2">
                            <button @onclick="ShowBulkStatusModal" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
                                Status
                            </button>
                            <button @onclick="ShowBulkCategoryModal" class="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors">
                                Category
                            </button>
                            <button @onclick="BulkDelete" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                                Delete
                            </button>
                        </div>
                    }
                    <button @onclick="NavigateToAddTransaction" class="px-6 py-3 bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                        <span class="mr-2">➕</span> Add Transaction
                    </button>
                </div>
            </div>
            
            <!-- Transaction Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                <div class="bg-gradient-to-r from-green-400 to-green-600 p-4 rounded-xl text-white">
                    <div class="text-sm opacity-90">Total Income</div>
                    <div class="text-2xl font-bold">@totalIncome.ToString("C")</div>
                    <div class="text-xs opacity-75 mt-1">This month</div>
                </div>
                <div class="bg-gradient-to-r from-red-400 to-red-600 p-4 rounded-xl text-white">
                    <div class="text-sm opacity-90">Total Expenses</div>
                    <div class="text-2xl font-bold">@totalExpenses.ToString("C")</div>
                    <div class="text-xs opacity-75 mt-1">This month</div>
                </div>
                <div class="bg-gradient-to-r from-blue-400 to-blue-600 p-4 rounded-xl text-white">
                    <div class="text-sm opacity-90">Net Income</div>
                    <div class="text-2xl font-bold">@((totalIncome - totalExpenses).ToString("C"))</div>
                    <div class="text-xs opacity-75 mt-1">This month</div>
                </div>
                <div class="bg-gradient-to-r from-purple-400 to-purple-600 p-4 rounded-xl text-white">
                    <div class="text-sm opacity-90">Transactions</div>
                    <div class="text-2xl font-bold">@filteredTransactions.Count()</div>
                    <div class="text-xs opacity-75 mt-1">Filtered results</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
            <div class="lg:col-span-2">
                <input @bind="searchTerm" @oninput="OnSearchChanged" type="text" placeholder="Search transactions..." 
                       class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50 focus:ring-2 focus:ring-green-500 focus:border-transparent">
            </div>
            <div>
                <select @bind="selectedAccountId" @bind:after="OnFilterChanged" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                    <option value="">All Accounts</option>
                    @foreach (var account in accounts)
                    {
                        <option value="@account.Id">@account.Name</option>
                    }
                </select>
            </div>
            <div>
                <select @bind="selectedType" @bind:after="OnFilterChanged" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                    <option value="">All Types</option>
                    <option value="@TransactionType.Income">Income</option>
                    <option value="@TransactionType.Expense">Expense</option>
                    <option value="@TransactionType.Transfer">Transfer</option>
                    <option value="@TransactionType.Adjustment">Adjustment</option>
                </select>
            </div>
            <div>
                <select @bind="selectedStatus" @bind:after="OnFilterChanged" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                    <option value="">All Status</option>
                    <option value="@TransactionStatus.Pending">Pending</option>
                    <option value="@TransactionStatus.Cleared">Cleared</option>
                    <option value="@TransactionStatus.Reconciled">Reconciled</option>
                </select>
            </div>
            <div>
                <select @bind="dateRange" @bind:after="OnDateRangeChanged" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                    <option value="30">Last 30 Days</option>
                    <option value="7">Last 7 Days</option>
                    <option value="90">Last 3 Months</option>
                    <option value="365">Last Year</option>
                    <option value="custom">Custom Range</option>
                </select>
            </div>
        </div>
        
        @if (dateRange == "custom")
        {
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div>
                    <label class="block text-sm font-medium text-[var(--text-secondary)] mb-1">Start Date</label>
                    <input @bind="startDate" type="date" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                </div>
                <div>
                    <label class="block text-sm font-medium text-[var(--text-secondary)] mb-1">End Date</label>
                    <input @bind="endDate" type="date" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-700/50">
                </div>
            </div>
        }
    </div>

    <!-- Transaction List -->
    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-white flex items-center">
                <span class="mr-2">📋</span> Transactions (@filteredTransactions.Count())
            </h3>
            <div class="flex items-center space-x-2">
                <label class="flex items-center">
                    <input type="checkbox" @onchange="ToggleSelectAll" class="mr-2">
                    <span class="text-sm">Select All</span>
                </label>
            </div>
        </div>
        
        @if (isLoading)
        {
            <div class="text-center py-8">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto"></div>
                <p class="mt-4 text-[var(--text-secondary)]">Loading transactions...</p>
            </div>
        }
        else if (!filteredTransactions.Any())
        {
            <div class="text-center py-8">
                <div class="text-6xl mb-4">📭</div>
                <h3 class="text-xl font-semibold text-[var(--text-primary)] mb-2">No transactions found</h3>
                <p class="text-[var(--text-secondary)]">Try adjusting your filters or add your first transaction.</p>
                <button @onclick="NavigateToAddTransaction" class="mt-4 px-6 py-3 bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                    Add Transaction
                </button>
            </div>
        }
        else
        {
            <div class="space-y-3">
                @foreach (var transaction in filteredTransactions.Skip(currentPage * pageSize).Take(pageSize))
                {
                    <div class="flex items-center justify-between p-4 bg-white/50 dark:bg-gray-700/50 rounded-xl hover:bg-white/70 dark:hover:bg-gray-700/70 transition-all duration-200 cursor-pointer group @(selectedTransactions.Contains(transaction.Id) ? "ring-2 ring-green-500" : "")">
                        <div class="flex items-center flex-1">
                            <input type="checkbox" 
                                   checked="@selectedTransactions.Contains(transaction.Id)"
                                   @onchange="@(e => ToggleTransactionSelection(transaction.Id, (bool)e.Value!))"
                                   class="mr-4">
                            <div class="w-12 h-12 bg-gradient-to-r @GetTransactionIconBackground(transaction.Type) rounded-full flex items-center justify-center text-xl mr-4 group-hover:scale-110 transition-transform duration-200">
                                @GetTransactionIcon(transaction.Type)
                            </div>
                            <div class="flex-1">
                                <div class="font-medium text-gray-800 dark:text-white">@transaction.Description</div>
                                <div class="text-sm text-gray-500">
                                    @transaction.Category?.Name • @transaction.Account?.Name
                                    @if (!string.IsNullOrEmpty(transaction.Payee))
                                    {
                                        <span> • @transaction.Payee</span>
                                    }
                                </div>
                            </div>
                            <div class="text-sm text-gray-500 mr-4">
                                <div>@transaction.Date.ToString("MMM dd")</div>
                                <div class="text-xs">@GetStatusBadge(transaction.Status)</div>
                            </div>
                            <div class="text-right mr-4">
                                <div class="font-bold @GetAmountColor(transaction.Type, transaction.Amount)">
                                    @FormatAmount(transaction.Amount, transaction.Type)
                                </div>
                                <div class="text-xs text-gray-500">@transaction.Type.ToString()</div>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                            <button @onclick="@(() => EditTransaction(transaction.Id))" class="p-2 text-blue-500 hover:text-blue-700">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                            </button>
                            <button @onclick="@(() => DeleteTransaction(transaction.Id))" class="p-2 text-red-500 hover:text-red-700">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="flex justify-center items-center mt-6 space-x-2">
                    <button @onclick="PreviousPage" disabled="@(currentPage == 0)" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg disabled:opacity-50">
                        Previous
                    </button>
                    <span class="px-4 py-2">Page @(currentPage + 1) of @totalPages</span>
                    <button @onclick="NextPage" disabled="@(currentPage >= totalPages - 1)" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg disabled:opacity-50">
                        Next
                    </button>
                </div>
            }
        }
    </div>

    <!-- Quick Actions -->
    <div class="mt-8 grid grid-cols-1 md:grid-cols-4 gap-6">
        <div @onclick="NavigateToAddTransaction" class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 text-center hover:shadow-xl transition-all duration-300 cursor-pointer">
            <div class="text-4xl mb-3">➕</div>
            <h4 class="font-semibold text-gray-800 dark:text-white mb-2">Add Transaction</h4>
            <p class="text-sm text-gray-600 dark:text-gray-300">Record a new transaction</p>
        </div>
        
        <div @onclick="ShowTemplatesModal" class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 text-center hover:shadow-xl transition-all duration-300 cursor-pointer">
            <div class="text-4xl mb-3">📋</div>
            <h4 class="font-semibold text-gray-800 dark:text-white mb-2">Templates</h4>
            <p class="text-sm text-gray-600 dark:text-gray-300">Use saved transaction templates</p>
        </div>
        
        <div @onclick="ExportTransactions" class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 text-center hover:shadow-xl transition-all duration-300 cursor-pointer">
            <div class="text-4xl mb-3">📤</div>
            <h4 class="font-semibold text-gray-800 dark:text-white mb-2">Export Data</h4>
            <p class="text-sm text-gray-600 dark:text-gray-300">Export transactions to CSV</p>
        </div>
        
        <div @onclick="ShowRecurringModal" class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 text-center hover:shadow-xl transition-all duration-300 cursor-pointer">
            <div class="text-4xl mb-3">🔄</div>
            <h4 class="font-semibold text-gray-800 dark:text-white mb-2">Recurring</h4>
            <p class="text-sm text-gray-600 dark:text-gray-300">Manage recurring transactions</p>
        </div>
    </div>
</div>

<!-- Bulk Status Modal -->
@if (showBulkStatusModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-2xl max-w-md w-full mx-4">
            <h3 class="text-xl font-semibold mb-4">Update Transaction Status</h3>
            <select @bind="bulkStatus" class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 mb-4">
                <option value="@TransactionStatus.Pending">Pending</option>
                <option value="@TransactionStatus.Cleared">Cleared</option>
                <option value="@TransactionStatus.Reconciled">Reconciled</option>
            </select>
            <div class="flex justify-end space-x-3">
                <button @onclick="@(() => showBulkStatusModal = false)" class="px-4 py-2 text-gray-600 hover:text-gray-800">Cancel</button>
                <button @onclick="ApplyBulkStatus" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Update</button>
            </div>
        </div>
    </div>
}

<style>
    .particles-container {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    .particle {
        position: absolute;
        width: 3px;
        height: 3px;
        background: linear-gradient(45deg, #10b981, #14b8a6);
        border-radius: 50%;
        animation: float 8s ease-in-out infinite;
        opacity: 0.7;
    }

    .particle:nth-child(odd) {
        left: 15%;
        animation-duration: 10s;
    }

    .particle:nth-child(even) {
        right: 15%;
        animation-duration: 12s;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(100vh) rotate(0deg); opacity: 0; }
        10% { opacity: 0.7; }
        90% { opacity: 0.7; }
        50% { transform: translateY(-10vh) rotate(180deg); }
    }

    .glass-card {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    }
</style>

@code {
    private List<Transaction> allTransactions = new();
    private IEnumerable<Transaction> filteredTransactions = new List<Transaction>();
    private List<Account> accounts = new();
    private HashSet<string> selectedTransactions = new();
    
    // Filter properties
    private string searchTerm = "";
    private string selectedAccountId = "";
    private string selectedType = "";
    private string selectedStatus = "";
    private string dateRange = "30";
    private DateTime startDate = DateTime.Today.AddDays(-30);
    private DateTime endDate = DateTime.Today;
    
    // Pagination
    private int currentPage = 0;
    private int pageSize = 20;
    private int totalPages => (int)Math.Ceiling((double)filteredTransactions.Count() / pageSize);
    
    // Summary data
    private decimal totalIncome = 0;
    private decimal totalExpenses = 0;
    
    // UI state
    private bool isLoading = true;
    private bool showBulkStatusModal = false;
    private TransactionStatus bulkStatus = TransactionStatus.Pending;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            allTransactions = (await TransactionService.GetAllTransactionsAsync()).ToList();
            accounts = (await AccountService.GetAllAccountsAsync()).ToList();
            ApplyFilters();
            CalculateSummary();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void ApplyFilters()
    {
        var filtered = allTransactions.AsEnumerable();
        
        // Date range filter
        if (dateRange != "custom")
        {
            var days = int.Parse(dateRange);
            var filterStartDate = DateTime.Today.AddDays(-days);
            filtered = filtered.Where(t => t.Date >= filterStartDate);
        }
        else
        {
            filtered = filtered.Where(t => t.Date >= startDate && t.Date <= endDate);
        }
        
        // Account filter
        if (!string.IsNullOrEmpty(selectedAccountId))
        {
            filtered = filtered.Where(t => t.AccountId == selectedAccountId);
        }
        
        // Type filter
        if (!string.IsNullOrEmpty(selectedType))
        {
            if (Enum.TryParse<TransactionType>(selectedType, out var type))
            {
                filtered = filtered.Where(t => t.Type == type);
            }
        }
        
        // Status filter
        if (!string.IsNullOrEmpty(selectedStatus))
        {
            if (Enum.TryParse<TransactionStatus>(selectedStatus, out var status))
            {
                filtered = filtered.Where(t => t.Status == status);
            }
        }
        
        // Search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            var lowerSearchTerm = searchTerm.ToLower();
            filtered = filtered.Where(t => 
                (t.Description?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (t.Payee?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (t.Notes?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                t.Category?.Name.ToLower().Contains(lowerSearchTerm) == true);
        }
        
        filteredTransactions = filtered.OrderByDescending(t => t.Date).ToList();
        currentPage = 0; // Reset to first page when filters change
    }
    
    private void CalculateSummary()
    {
        var monthStart = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
        var monthEnd = monthStart.AddMonths(1).AddDays(-1);
        
        var monthTransactions = allTransactions.Where(t => t.Date >= monthStart && t.Date <= monthEnd);
        
        totalIncome = monthTransactions.Where(t => t.Type == TransactionType.Income).Sum(t => t.Amount);
        totalExpenses = monthTransactions.Where(t => t.Type == TransactionType.Expense).Sum(t => Math.Abs(t.Amount));
    }
    
    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }
    
    private void OnFilterChanged()
    {
        ApplyFilters();
    }
    
    private void OnDateRangeChanged()
    {
        if (dateRange != "custom")
        {
            var days = int.Parse(dateRange);
            startDate = DateTime.Today.AddDays(-days);
            endDate = DateTime.Today;
        }
        ApplyFilters();
    }
    
    private void NavigateToAddTransaction()
    {
        Navigation.NavigateTo("/transactions/add");
    }
    
    private void EditTransaction(string transactionId)
    {
        Navigation.NavigateTo($"/transactions/edit/{transactionId}");
    }
    
    private async Task DeleteTransaction(string transactionId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this transaction?"))
        {
            await TransactionService.DeleteTransactionAsync(transactionId);
            await LoadData();
        }
    }
    
    private void ToggleTransactionSelection(string transactionId, bool isSelected)
    {
        if (isSelected)
        {
            selectedTransactions.Add(transactionId);
        }
        else
        {
            selectedTransactions.Remove(transactionId);
        }
    }
    
    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isSelected = (bool)e.Value!;
        selectedTransactions.Clear();
        
        if (isSelected)
        {
            var visibleTransactions = filteredTransactions.Skip(currentPage * pageSize).Take(pageSize);
            foreach (var transaction in visibleTransactions)
            {
                selectedTransactions.Add(transaction.Id);
            }
        }
    }
    
    private void ClearSelection()
    {
        selectedTransactions.Clear();
    }
    
    private void ShowBulkStatusModal()
    {
        showBulkStatusModal = true;
    }
    
    private void ShowBulkCategoryModal()
    {
        // TODO: Implement bulk category modal functionality
    }
    
    private async Task ApplyBulkStatus()
    {
        await TransactionService.BulkUpdateTransactionStatusAsync(selectedTransactions, bulkStatus);
        showBulkStatusModal = false;
        selectedTransactions.Clear();
        await LoadData();
    }
    
    private async Task BulkDelete()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {selectedTransactions.Count} transactions?"))
        {
            await TransactionService.BulkDeleteTransactionsAsync(selectedTransactions);
            selectedTransactions.Clear();
            await LoadData();
        }
    }
    
    private void PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
        }
    }
    
    private void NextPage()
    {
        if (currentPage < totalPages - 1)
        {
            currentPage++;
        }
    }
    
    private async Task ExportTransactions()
    {
        var transactionIds = filteredTransactions.Select(t => t.Id);
        var csvData = await TransactionService.ExportTransactionsAsync(transactionIds, "csv");
        
        // Download the CSV file
        await JSRuntime.InvokeVoidAsync("downloadFile", "transactions.csv", Convert.ToBase64String(csvData));
    }
    
    private void ShowTemplatesModal()
    {
        // Navigate to templates page or show modal
        Navigation.NavigateTo("/transactions/templates");
    }
    
    private void ShowRecurringModal()
    {
        // Navigate to recurring transactions page or show modal
        Navigation.NavigateTo("/transactions/recurring");
    }
    
    // Helper methods for UI
    private string GetTransactionIcon(TransactionType type)
    {
        return type switch
        {
            TransactionType.Income => "💰",
            TransactionType.Expense => "💸",
            TransactionType.Transfer => "🔄",
            TransactionType.Adjustment => "⚖️",
            TransactionType.InitialBalance => "🏦",
            _ => "💳"
        };
    }
    
    private string GetTransactionIconBackground(TransactionType type)
    {
        return type switch
        {
            TransactionType.Income => "from-green-100 to-green-200 dark:from-green-600 dark:to-green-700",
            TransactionType.Expense => "from-red-100 to-red-200 dark:from-red-600 dark:to-red-700",
            TransactionType.Transfer => "from-blue-100 to-blue-200 dark:from-blue-600 dark:to-blue-700",
            TransactionType.Adjustment => "from-yellow-100 to-yellow-200 dark:from-yellow-600 dark:to-yellow-700",
            TransactionType.InitialBalance => "from-gray-100 to-gray-200 dark:from-gray-600 dark:to-gray-700",
            _ => "from-gray-100 to-gray-200 dark:from-gray-600 dark:to-gray-700"
        };
    }
    
    private string GetAmountColor(TransactionType type, decimal amount)
    {
        return type switch
        {
            TransactionType.Income => "text-green-600",
            TransactionType.Expense => "text-red-600",
            TransactionType.Transfer => "text-blue-600",
            TransactionType.Adjustment => "text-purple-600",
            TransactionType.InitialBalance => "text-gray-600",
            _ => amount >= 0 ? "text-green-600" : "text-red-600"
        };
    }
    
    private string FormatAmount(decimal amount, TransactionType type)
    {
        return type switch
        {
            TransactionType.Income => $"+{amount:C}",
            TransactionType.Expense => $"-{Math.Abs(amount):C}",
            TransactionType.InitialBalance => amount.ToString("C"),
            TransactionType.Adjustment => amount.ToString("C"),
            _ => amount.ToString("C")
        };
    }
    
    private string GetStatusBadge(TransactionStatus status)
    {
        return status switch
        {
            TransactionStatus.Pending => "🟡 Pending",
            TransactionStatus.Cleared => "🟢 Cleared",
            TransactionStatus.Reconciled => "✅ Reconciled",
            _ => status.ToString()
        };
    }
}
