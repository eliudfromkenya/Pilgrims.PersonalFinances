@page "/assets"
@using Pilgrims.PersonalFinances.Core.Models
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@inject IAssetService AssetService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Asset Register - Personal Finance</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800">
    <!-- Header Section -->
    <div class="bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <div class="flex items-center space-x-4">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            </svg>
                        </div>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold text-slate-900 dark:text-white">Asset Register</h1>
                        <p class="text-sm text-slate-600 dark:text-slate-400">Track and manage your personal assets</p>
                    </div>
                </div>
                <div class="mt-4 sm:mt-0 flex space-x-3">
                    <button @onclick="RefreshAssets" 
                            class="inline-flex items-center px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg text-sm font-medium text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors duration-200">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Refresh
                    </button>
                    <button @onclick="NavigateToCreate" 
                            class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg text-sm font-medium hover:from-blue-700 hover:to-purple-700 transition-all duration-200 transform hover:scale-105 shadow-lg">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Add Asset
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats Overview -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6 transform hover:scale-105 transition-all duration-200">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-10 h-10 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center">
                            <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-slate-600 dark:text-slate-400">Total Value</p>
                        <p class="text-2xl font-bold text-slate-900 dark:text-white">@totalValue?.ToString("C")</p>
                    </div>
                </div>
            </div>

            <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6 transform hover:scale-105 transition-all duration-200">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center">
                            <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-slate-600 dark:text-slate-400">Total Assets</p>
                        <p class="text-2xl font-bold text-slate-900 dark:text-white">@assets.Count()</p>
                    </div>
                </div>
            </div>

            <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6 transform hover:scale-105 transition-all duration-200">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-10 h-10 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center">
                            <svg class="w-5 h-5 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 00-2-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2H9z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-slate-600 dark:text-slate-400">Categories</p>
                        <p class="text-2xl font-bold text-slate-900 dark:text-white">@categories.Count()</p>
                    </div>
                </div>
            </div>

            <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6 transform hover:scale-105 transition-all duration-200">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-10 h-10 bg-red-100 dark:bg-red-900 rounded-lg flex items-center justify-center">
                            <svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-slate-600 dark:text-slate-400">Depreciation</p>
                        <p class="text-2xl font-bold text-slate-900 dark:text-white">@totalDepreciation.ToString("C")</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6 mb-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Search Assets</label>
                    <div class="relative">
                        <input @bind="searchTerm" @oninput="OnSearchChanged" 
                               class="w-full pl-10 pr-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-slate-700 text-slate-900 dark:text-white"
                               placeholder="Search by name, brand, model...">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Category</label>
                    <select @bind="selectedCategoryId" @bind:after="OnCategoryChanged" 
                            class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-slate-700 text-slate-900 dark:text-white">
                        <option value="">All Categories</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Condition</label>
                    <select @bind="selectedCondition" @bind:after="OnConditionChanged" 
                            class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-slate-700 text-slate-900 dark:text-white">
                        <option value="">All Conditions</option>
                        <option value="Excellent">Excellent</option>
                        <option value="Good">Good</option>
                        <option value="Fair">Fair</option>
                        <option value="Poor">Poor</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">View</label>
                    <select @bind="viewMode" @bind:after="OnViewModeChanged" 
                            class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-slate-700 text-slate-900 dark:text-white">
                        <option value="grid">Grid View</option>
                        <option value="list">List View</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Assets Display -->
        @if (isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
        }
        else if (!filteredAssets.Any())
        {
            <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-12 text-center">
                <svg class="mx-auto h-12 w-12 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
                <h3 class="mt-4 text-lg font-medium text-slate-900 dark:text-white">No assets found</h3>
                <p class="mt-2 text-sm text-slate-600 dark:text-slate-400">Get started by adding your first asset to the register.</p>
                <button @onclick="NavigateToCreate" 
                        class="mt-4 inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg text-sm font-medium hover:from-blue-700 hover:to-purple-700 transition-all duration-200">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Add Your First Asset
                </button>
            </div>
        }
        else
        {
            @if (viewMode == "grid")
            {
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    @foreach (var asset in filteredAssets)
                    {
                        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden hover:shadow-lg transition-all duration-200 transform hover:scale-105">
                            <div class="p-6">
                                <div class="flex items-center justify-between mb-4">
                                    <div class="flex items-center space-x-3">
                                        <div class="w-10 h-10 rounded-lg flex items-center justify-center" style="background-color: @(asset.AssetCategory?.Color ?? "#6366f1")">
                                            <span class="text-white text-lg">@(asset.AssetCategory?.Icon ?? "📦")</span>
                                        </div>
                                        <div>
                                            <h3 class="text-lg font-semibold text-slate-900 dark:text-white truncate">@asset.Name</h3>
                                            <p class="text-sm text-slate-600 dark:text-slate-400">@asset.AssetCategory?.Name</p>
                                        </div>
                                    </div>
                                    <div class="flex space-x-1">
                                        <button @onclick="() => NavigateToEdit(asset.Id)" 
                                                class="p-2 text-slate-400 hover:text-blue-600 transition-colors duration-200">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                            </svg>
                                        </button>
                                        <button @onclick="() => NavigateToDetails(asset.Id)" 
                                                class="p-2 text-slate-400 hover:text-green-600 transition-colors duration-200">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </div>

                                <div class="space-y-3">
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-slate-600 dark:text-slate-400">Current Value</span>
                                        <span class="text-lg font-bold text-green-600 dark:text-green-400">@asset.CurrentValue?.ToString("C")</span>
                                    </div>
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-slate-600 dark:text-slate-400">Purchase Price</span>
                                        <span class="text-sm text-slate-900 dark:text-white">@asset.PurchasePrice?.ToString("C")</span>
                                    </div>
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-slate-600 dark:text-slate-400">Condition</span>
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetConditionBadgeClass(asset.Condition)">
                                            @asset.Condition
                                        </span>
                                    </div>
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm text-slate-600 dark:text-slate-400">Purchase Date</span>
                                        <span class="text-sm text-slate-900 dark:text-white">@asset.PurchaseDate?.ToString("MMM dd, yyyy")</span>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(asset.Brand) || !string.IsNullOrEmpty(asset.Model))
                                {
                                    <div class="mt-4 pt-4 border-t border-slate-200 dark:border-slate-700">
                                        <p class="text-sm text-slate-600 dark:text-slate-400">
                                            @if (!string.IsNullOrEmpty(asset.Brand))
                                            {
                                                <span class="font-medium">@asset.Brand</span>
                                            }
                                            @if (!string.IsNullOrEmpty(asset.Model))
                                            {
                                                <span>@asset.Model</span>
                                            }
                                        </p>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-slate-200 dark:divide-slate-700">
                            <thead class="bg-slate-50 dark:bg-slate-900">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">Asset</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">Category</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">Current Value</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">Purchase Price</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">Condition</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">Purchase Date</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white dark:bg-slate-800 divide-y divide-slate-200 dark:divide-slate-700">
                                @foreach (var asset in filteredAssets)
                                {
                                    <tr class="hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors duration-200">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="w-8 h-8 rounded-lg flex items-center justify-center mr-3" style="background-color: @(asset.AssetCategory?.Color ?? "#6366f1")">
                                                    <span class="text-white text-sm">@(asset.AssetCategory?.Icon ?? "📦")</span>
                                                </div>
                                                <div>
                                                    <div class="text-sm font-medium text-slate-900 dark:text-white">@asset.Name</div>
                                                    @if (!string.IsNullOrEmpty(asset.Brand) || !string.IsNullOrEmpty(asset.Model))
                                                    {
                                                        <div class="text-sm text-slate-500 dark:text-slate-400">@asset.Brand @asset.Model</div>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-900 dark:text-white">@asset.AssetCategory?.Name</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600 dark:text-green-400">@asset.CurrentValue?.ToString("C")</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-900 dark:text-white">@asset.PurchasePrice?.ToString("C")</td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetConditionBadgeClass(asset.Condition)">
                                                @asset.Condition
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-900 dark:text-white">@asset.PurchaseDate?.ToString("MMM dd, yyyy")</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <div class="flex justify-end space-x-2">
                                                <button @onclick="() => NavigateToDetails(asset.Id)" 
                                                        class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300">
                                                    View
                                                </button>
                                                <button @onclick="() => NavigateToEdit(asset.Id)" 
                                                        class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300">
                                                    Edit
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<Asset> assets = new();
    private List<Asset> filteredAssets = new();
    private List<AssetCategory> categories = new();
    private bool isLoading = true;
    private string searchTerm = "";
    private string selectedCategoryId = "";
    private string selectedCondition = "";
    private string viewMode = "grid";
    private decimal? totalValue = 0;
    private decimal totalDepreciation = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            assets = (await AssetService.GetActiveAssetsAsync()).ToList();
            categories = (await AssetService.GetAllAssetCategoriesAsync()).ToList();
            totalValue = await AssetService.GetTotalAssetValueAsync();
            totalDepreciation = await AssetService.GetTotalDepreciationAsync();
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Handle error
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading assets:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var query = assets.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower();
            query = query.Where(a => 
                a.Name.ToLower().Contains(term) ||
                (a.Description != null && a.Description.ToLower().Contains(term)) ||
                (a.Brand != null && a.Brand.ToLower().Contains(term)) ||
                (a.Model != null && a.Model.ToLower().Contains(term)) ||
                (a.SerialNumber != null && a.SerialNumber.ToLower().Contains(term)) ||
                (a.AssetCategory != null && a.AssetCategory.Name != null && a.AssetCategory.Name.ToLower().Contains(term))
            );
        }

        if (!string.IsNullOrWhiteSpace(selectedCategoryId))
        {
            query = query.Where(a => a.AssetCategoryId.ToString() == selectedCategoryId);
        }

        if (!string.IsNullOrWhiteSpace(selectedCondition))
        {
            query = query.Where(a => a.Condition == selectedCondition);
        }

        filteredAssets = query.ToList();
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnCategoryChanged()
    {
        ApplyFilters();
    }

    private void OnConditionChanged()
    {
        ApplyFilters();
    }

    private void OnViewModeChanged()
    {
        StateHasChanged();
    }

    private async Task RefreshAssets()
    {
        await LoadData();
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/assets/create");
    }

    private void NavigateToEdit(string assetId)
    {
        Navigation.NavigateTo($"/assets/edit/{assetId}");
    }

    private void NavigateToDetails(string assetId)
    {
        Navigation.NavigateTo($"/assets/details/{assetId}");
    }

    private string GetConditionBadgeClass(string? condition)
    {
        if (string.IsNullOrWhiteSpace(condition))
            return "bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300";
    
        var value = condition.Trim().ToLowerInvariant();
        return value switch
        {
            "excellent" => "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
            "good" => "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
            "fair" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
            "poor" => "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
            _ => "bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300"
        };
    }
}