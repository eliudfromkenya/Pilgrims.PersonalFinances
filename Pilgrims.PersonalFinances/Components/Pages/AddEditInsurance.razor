@page "/insurance/add"
@page "/insurance/edit/{PolicyId}"
@page "/insurance/view/{PolicyId}"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@inject IInsuranceService InsuranceService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(IsEditMode ? "Edit Insurance Policy" : IsViewMode ? "View Insurance Policy" : "Add Insurance Policy") - Personal Finance Manager</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-4 sm:p-6 lg:p-8">
    <div class="max-w-4xl mx-auto">
        <!-- Header Section -->
        <div class="mb-8">
            <div class="flex items-center gap-4 mb-4">
                <button @onclick="NavigateBack" 
                        class="p-2 rounded-xl bg-white shadow-lg hover:shadow-xl border border-gray-200 hover:bg-gray-50 transition-all duration-200">
                    <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                    </svg>
                </button>
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">
                        @if (IsViewMode)
                        {
                            <span>Insurance Policy Details</span>
                        }
                        else if (IsEditMode)
                        {
                            <span>Edit Insurance Policy</span>
                        }
                        else
                        {
                            <span>Add New Insurance Policy</span>
                        }
                    </h1>
                    <p class="text-gray-600 mt-1">
                        @if (IsViewMode)
                        {
                            <span>View and manage your insurance policy information</span>
                        }
                        else if (IsEditMode)
                        {
                            <span>Update your insurance policy details</span>
                        }
                        else
                        {
                            <span>Create a comprehensive insurance policy record</span>
                        }
                    </p>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="flex items-center justify-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <span class="ml-3 text-gray-600">Loading policy details...</span>
            </div>
        }
        else
        {
            <EditForm Model="policy" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                
                <!-- Policy Information Card -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <div class="flex items-center gap-3 mb-6">
                        <div class="p-3 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                            </svg>
                        </div>
                        <h2 class="text-xl font-semibold text-gray-900">Policy Information</h2>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Policy Name *</label>
                            <InputText @bind-Value="@policy.PolicyName" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="Enter policy name"
                                       disabled="@IsViewMode" />
                            <ValidationMessage For="@(() => policy.PolicyName)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Policy Number *</label>
                            <InputText @bind-Value="@policy.PolicyNumber" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="Enter policy number"
                                       disabled="@IsViewMode" />
                            <ValidationMessage For="@(() => policy.PolicyNumber)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Insurance Company *</label>
                            <InputText @bind-Value="policy.InsuranceCompany" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="Enter insurance company name"
                                       disabled="@IsViewMode" />
                            <ValidationMessage For="@(() => policy.InsuranceCompany)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Policy Type *</label>
                            <InputSelect @bind-Value="policy.PolicyType" 
                                         class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                         disabled="@IsViewMode">
                                <option value="">Select policy type</option>
                                <option value="Life">Life Insurance</option>
                                <option value="Health">Health Insurance</option>
                                <option value="Auto">Auto Insurance</option>
                                <option value="Property">Property Insurance</option>
                                <option value="Disability">Disability Insurance</option>
                                <option value="Travel">Travel Insurance</option>
                                <option value="Business">Business Insurance</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => policy.PolicyType)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                            <InputTextArea @bind-Value="policy.Description" 
                                           class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                           rows="3"
                                           placeholder="Enter policy description"
                                           disabled="@IsViewMode" />
                        </div>
                    </div>
                </div>

                <!-- Coverage Details Card -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <div class="flex items-center gap-3 mb-6">
                        <div class="p-3 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
                            </svg>
                        </div>
                        <h2 class="text-xl font-semibold text-gray-900">Coverage Details</h2>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Coverage Amount *</label>
                            <div class="relative">
                                <span class="absolute left-3 top-3 text-gray-500">$</span>
                                <InputNumber @bind-Value="policy.CoverageAmount" 
                                             class="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                             placeholder="0.00"
                                             disabled="@IsViewMode" />
                            </div>
                            <ValidationMessage For="@(() => policy.CoverageAmount)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Deductible Amount</label>
                            <div class="relative">
                                <span class="absolute left-3 top-3 text-gray-500">$</span>
                                <InputNumber @bind-Value="policy.DeductibleAmount" 
                                             class="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                             placeholder="0.00"
                                             disabled="@IsViewMode" />
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Premium Amount *</label>
                            <div class="relative">
                                <span class="absolute left-3 top-3 text-gray-500">$</span>
                                <InputNumber @bind-Value="policy.PremiumAmount" 
                                             class="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                             placeholder="0.00"
                                             disabled="@IsViewMode" />
                            </div>
                            <ValidationMessage For="@(() => policy.PremiumAmount)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Premium Frequency *</label>
                            <InputSelect @bind-Value="policy.PremiumFrequency" 
                                         class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                         disabled="@IsViewMode">
                                <option value="">Select frequency</option>
                                <option value="Monthly">Monthly</option>
                                <option value="Quarterly">Quarterly</option>
                                <option value="Semi-Annual">Semi-Annual</option>
                                <option value="Annual">Annual</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => policy.PremiumFrequency)" class="text-red-500 text-sm mt-1" />
                        </div>
                    </div>
                </div>

                <!-- Policy Dates Card -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <div class="flex items-center gap-3 mb-6">
                        <div class="p-3 bg-gradient-to-r from-purple-500 to-indigo-600 rounded-xl">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                            </svg>
                        </div>
                        <h2 class="text-xl font-semibold text-gray-900">Policy Dates</h2>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Policy Start Date *</label>
                            <InputDate @bind-Value="policy.PolicyStartDate" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       disabled="@IsViewMode" />
                            <ValidationMessage For="@(() => policy.PolicyStartDate)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Policy End Date *</label>
                            <InputDate @bind-Value="policy.PolicyEndDate" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       disabled="@IsViewMode" />
                            <ValidationMessage For="@(() => policy.PolicyEndDate)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Next Premium Due</label>
                            <InputDate @bind-Value="policy.NextPremiumDueDate" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       disabled="@IsViewMode" />
                        </div>
                    </div>
                </div>

                <!-- Agent Information Card -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <div class="flex items-center gap-3 mb-6">
                        <div class="p-3 bg-gradient-to-r from-orange-500 to-red-600 rounded-xl">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                            </svg>
                        </div>
                        <h2 class="text-xl font-semibold text-gray-900">Agent Information</h2>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Agent Name</label>
                            <InputText @bind-Value="policy.AgentName" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="Enter agent name"
                                       disabled="@IsViewMode" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Agent Phone</label>
                            <InputText @bind-Value="policy.AgentPhone" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="Enter agent phone number"
                                       disabled="@IsViewMode" />
                        </div>

                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Agent Email</label>
                            <InputText @bind-Value="policy.AgentEmail" 
                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="Enter agent email address"
                                       disabled="@IsViewMode" />
                        </div>
                    </div>
                </div>

                <!-- Beneficiary Information Card -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center gap-3">
                            <div class="p-3 bg-gradient-to-r from-pink-500 to-rose-600 rounded-xl">
                                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                                </svg>
                            </div>
                            <h2 class="text-xl font-semibold text-gray-900">Beneficiaries</h2>
                        </div>
                        @if (!IsViewMode)
                        {
                            <button type="button" @onclick="AddBeneficiary" 
                                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200 flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                </svg>
                                Add Beneficiary
                            </button>
                        }
                    </div>

                    @if (policy.Beneficiaries?.Any() == true)
                    {
                        <div class="space-y-4">
                            @for (int i = 0; i < policy.Beneficiaries.Count; i++)
                            {
                                var index = i;
                                var beneficiary = policy.Beneficiaries.ElementAt(index);
                                <div class="border border-gray-200 rounded-xl p-4">
                                    <div class="flex items-center justify-between mb-4">
                                        <h3 class="text-lg font-medium text-gray-900">Beneficiary @(index + 1)</h3>
                                        @if (!IsViewMode)
                                        {
                                            <button type="button" @onclick="() => RemoveBeneficiary(index)" 
                                                    class="text-red-600 hover:text-red-800 p-1 rounded-lg hover:bg-red-50 transition-colors duration-150">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                                </svg>
                                            </button>
                                        }
                                    </div>
                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                                            <InputText @bind-Value="beneficiary.FullName" 
                                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                                       placeholder="Enter full name"
                                                       disabled="@IsViewMode" />
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Relationship</label>
                                            <InputText @bind-Value="beneficiary.Relationship" 
                                                       class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                                       placeholder="e.g., Spouse, Child"
                                                       disabled="@IsViewMode" />
                                        </div>
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Percentage (%)</label>
                                            <InputNumber @bind-Value="beneficiary.Percentage" 
                                                         class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                                         placeholder="0"
                                                         disabled="@IsViewMode" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-8 text-gray-500">
                            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                            </svg>
                            <p>No beneficiaries added yet</p>
                        </div>
                    }
                </div>

                <!-- Action Buttons -->
                @if (!IsViewMode)
                {
                    <div class="flex flex-col sm:flex-row gap-4 justify-end">
                        <button type="button" @onclick="NavigateBack" 
                                class="bg-white hover:bg-gray-50 text-gray-700 px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl border border-gray-200 transform hover:-translate-y-0.5 transition-all duration-200">
                            Cancel
                        </button>
                        <button type="submit" 
                                class="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200 flex items-center gap-2"
                                disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                </svg>
                                <span>@(IsEditMode ? "Update Policy" : "Create Policy")</span>
                            }
                        </button>
                    </div>
                }
                else
                {
                    <div class="flex flex-col sm:flex-row gap-4 justify-end">
                        <button type="button" @onclick="NavigateBack" 
                                class="bg-white hover:bg-gray-50 text-gray-700 px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl border border-gray-200 transform hover:-translate-y-0.5 transition-all duration-200">
                            Back to List
                        </button>
                        <button type="button" @onclick="@(() => Navigation.NavigateTo("/insurance/edit/" + PolicyId))" 
                                class="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200 flex items-center gap-2">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                            </svg>
                            Edit Policy
                        </button>
                    </div>
                }
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter] public string? PolicyId { get; set; }

    private Models.Insurance policy = new();
    private bool isLoading = false;
    private bool isSubmitting = false;

    private bool IsEditMode => !string.IsNullOrEmpty(PolicyId) && Navigation.Uri.Contains("/edit/");
    private bool IsViewMode => !string.IsNullOrEmpty(PolicyId) && Navigation.Uri.Contains("/view/");

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PolicyId))
        {
            await LoadPolicy();
        }
        else
        {
            // Initialize new policy with default values
            policy = new Models.Insurance
            { 
                Id = Guid.NewGuid().ToString(),
                PolicyStartDate = DateTime.Today,
                PolicyEndDate = DateTime.Today.AddYears(1),
                NextPremiumDueDate = DateTime.Today.AddMonths(1),
                Status = InsuranceStatus.Active,
                CreatedAt = DateTime.UtcNow,
                Beneficiaries = new List<InsuranceBeneficiary>()
            };
        }
    }

    private async Task LoadPolicy()
    {
        isLoading = true;
        try
        {
            var loadedPolicy = await InsuranceService.GetInsurancePolicyByIdAsync(PolicyId!);
            if (loadedPolicy != null)
            {
                policy = loadedPolicy;
                if (policy.Beneficiaries == null)
                {
                    policy.Beneficiaries = new List<InsuranceBeneficiary>();
                }
            }
            else
            {
                // Policy not found, navigate back
                Navigation.NavigateTo("/insurance");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading policy: {ex.Message}");
            Navigation.NavigateTo("/insurance");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        try
        {
            if (IsEditMode)
            {
                policy.MarkAsDirty();
                await InsuranceService.UpdateInsurancePolicyAsync(policy);
            }
            else
            {
                policy.CreatedAt = DateTime.UtcNow;
                await InsuranceService.CreateInsurancePolicyAsync(policy);
            }

            Navigation.NavigateTo("/insurance");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving policy: {ex.Message}");
            // Could show error message to user
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void AddBeneficiary()
    {
        if (policy.Beneficiaries == null)
        {
            policy.Beneficiaries = new List<InsuranceBeneficiary>();
        }

        policy.Beneficiaries.Add(new InsuranceBeneficiary
        {
            Id = Guid.NewGuid().ToString(),
            InsuranceId = policy.Id,
            FullName = string.Empty,
            Relationship = string.Empty,
            Percentage = 0,
            CreatedAt = DateTime.UtcNow
        });
    }

    private void RemoveBeneficiary(int index)
    {
        if (policy.Beneficiaries != null && index >= 0 && index < policy.Beneficiaries.Count)
        {
            var item = policy.Beneficiaries.ElementAt(index);
            policy.Beneficiaries.Remove(item);
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/insurance");
    }
}