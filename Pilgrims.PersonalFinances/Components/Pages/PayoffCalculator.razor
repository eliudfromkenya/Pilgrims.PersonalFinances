@page "/obligations/payoff-calculator"
@using Pilgrims.PersonalFinances.Core.Models
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@using Pilgrims.PersonalFinances.Core.Messaging.Interfaces
@using Pilgrims.PersonalFinances.Core.Models.DTOs
@inject IObligationService ObligationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IMessagingService MessagingService

<PageTitle>Payoff Calculator - Personal Finance</PageTitle>

<div class="min-h-screen relative overflow-hidden" style="background: var(--primary-bg);">
    <!-- Animated Background -->
    <div class="absolute inset-0 overflow-hidden">
        <div class="particles"></div>
        <div class="absolute inset-0" style="background: linear-gradient(135deg, var(--accent-color)/5 0%, var(--secondary-color)/5 100%);"></div>
    </div>

    <!-- Main Content -->
    <div class="relative z-10 container mx-auto px-4 py-8">
        <!-- Header Section -->
        <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 mb-8 animate-slide-up"
             style="background: var(--card-bg); border-color: var(--border-color);">
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                <div>
                    <h1 class="text-3xl font-bold mb-2 bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                        Debt Payoff Calculator
                    </h1>
                    <p class="text-lg" style="color: var(--text-secondary);">
                        Calculate optimal debt payoff strategies and compare scenarios
                    </p>
                </div>
                <div class="flex gap-3">
                    <button @onclick="NavigateToDashboard" 
                            class="btn-secondary transform hover:scale-105 transition-all duration-200">
                        <i class="fas fa-chart-line mr-2"></i>
                        Dashboard
                    </button>
                    <button @onclick="NavigateToList" 
                            class="btn-secondary transform hover:scale-105 transition-all duration-200">
                        <i class="fas fa-list mr-2"></i>
                        All Obligations
                    </button>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
            </div>
        }
        else
        {
            <!-- Calculator Controls -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
                <!-- Debt Selection -->
                <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-1"
                     style="background: var(--card-bg); border-color: var(--border-color);">
                    <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                        <i class="fas fa-list-check mr-3 text-indigo-600"></i>
                        Select Debts to Include
                    </h2>

                    @if (availableDebts.Any())
                    {
                        <div class="space-y-3 max-h-80 overflow-y-auto">
                            @foreach (var debt in availableDebts)
                            {
                                <label class="flex items-center p-3 rounded-lg border cursor-pointer hover:shadow-md transition-all duration-200 @(selectedDebtIds.Contains(debt.Id) ? "border-indigo-500 bg-indigo-50 dark:bg-indigo-900/20" : "")"
                                       style="background: var(--secondary-bg); border-color: var(--border-color);">
                                    <input type="checkbox" 
                                           checked="@selectedDebtIds.Contains(debt.Id)"
                                           @onchange="@((e) => ToggleDebtSelection(debt.Id, (bool)e.Value!))"
                                           class="mr-3 h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" />
                                    <div class="flex-1">
                                        <div class="flex justify-between items-start">
                                            <div>
                                                <p class="font-medium" style="color: var(--text-primary);">@debt.Name</p>
                                                <p class="text-sm" style="color: var(--text-secondary);">
                                                    @debt.InterestRate?.ToString("F2")% APR
                                                </p>
                                            </div>
                                            <div class="text-right">
                                                <p class="font-semibold" style="color: var(--text-primary);">
                                                    @debt.CurrentBalance?.ToString("C")
                                                </p>
                                                <p class="text-sm" style="color: var(--text-secondary);">
                                                    Min: @debt.MinimumPayment?.ToString("C")
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </label>
                            }
                        </div>

                        <div class="mt-4 pt-4 border-t" style="border-color: var(--border-color);">
                            <div class="flex justify-between text-sm">
                                <span style="color: var(--text-secondary);">Selected Debts:</span>
                                <span class="font-semibold" style="color: var(--text-primary);">@selectedDebts.Count</span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span style="color: var(--text-secondary);">Total Balance:</span>
                                <span class="font-semibold" style="color: var(--text-primary);">
                                    @selectedDebts.Sum(d => d.CurrentBalance ?? 0).ToString("C")
                                </span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span style="color: var(--text-secondary);">Min Payments:</span>
                                <span class="font-semibold" style="color: var(--text-primary);">
                                    @selectedDebts.Sum(d => d.MinimumPayment ?? 0).ToString("C")
                                </span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-8" style="color: var(--text-secondary);">
                            <i class="fas fa-credit-card text-4xl mb-4"></i>
                            <p>No debt obligations found</p>
                            <button @onclick="AddNewDebt" class="btn-primary mt-4">
                                <i class="fas fa-plus mr-2"></i>
                                Add Debt
                            </button>
                        </div>
                    }
                </div>

                <!-- Payment Strategy -->
                <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-2"
                     style="background: var(--card-bg); border-color: var(--border-color);">
                    <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                        <i class="fas fa-strategy mr-3 text-green-600"></i>
                        Payment Strategy
                    </h2>

                    <div class="space-y-4">
                        <!-- Strategy Selection -->
                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Payoff Strategy
                            </label>
                            <select @bind="selectedStrategy" @bind:after="CalculatePayoffScenarios"
                                    class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                    style="background: var(--secondary-bg); border-color: var(--border-color); color: var(--text-primary);">
                                <option value="avalanche">Debt Avalanche (Highest Interest First)</option>
                                <option value="snowball">Debt Snowball (Smallest Balance First)</option>
                                <option value="custom">Custom Priority</option>
                            </select>
                        </div>

                        <!-- Extra Payment Amount -->
                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Extra Monthly Payment
                            </label>
                            <div class="relative">
                                <span class="absolute left-3 top-3 text-gray-500">$</span>
                                <input type="number" @bind="extraPayment" @bind:after="CalculatePayoffScenarios"
                                       step="0.01" min="0" placeholder="0.00"
                                       class="w-full pl-8 pr-3 py-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                       style="background: var(--secondary-bg); border-color: var(--border-color); color: var(--text-primary);" />
                            </div>
                        </div>

                        <!-- Payment Frequency -->
                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Payment Frequency
                            </label>
                            <select @bind="paymentFrequency" @bind:after="CalculatePayoffScenarios"
                                    class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                    style="background: var(--secondary-bg); border-color: var(--border-color); color: var(--text-primary);">
                                <option value="monthly">Monthly</option>
                                <option value="biweekly">Bi-weekly</option>
                                <option value="weekly">Weekly</option>
                            </select>
                        </div>

                        <!-- Target Payoff Date -->
                        <div>
                            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">
                                Target Payoff Date (Optional)
                            </label>
                            <input type="date" @bind="targetPayoffDate" @bind:after="CalculatePayoffScenarios"
                                   class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                   style="background: var(--secondary-bg); border-color: var(--border-color); color: var(--text-primary);" />
                        </div>

                        <!-- Calculate Button -->
                        <button @onclick="CalculatePayoffScenarios" 
                                class="w-full btn-primary transform hover:scale-105 transition-all duration-200"
                                disabled="@(!selectedDebts.Any())">
                            <i class="fas fa-calculator mr-2"></i>
                            Calculate Payoff Scenarios
                        </button>
                    </div>
                </div>

                <!-- Quick Stats -->
                <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-3"
                     style="background: var(--card-bg); border-color: var(--border-color);">
                    <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                        <i class="fas fa-tachometer-alt mr-3 text-purple-600"></i>
                        Quick Stats
                    </h2>

                    <div class="space-y-4">
                        <div class="p-4 rounded-lg" style="background: var(--secondary-bg);">
                            <div class="flex justify-between items-center">
                                <span class="text-sm" style="color: var(--text-secondary);">Current Total Balance</span>
                                <span class="font-semibold text-lg" style="color: var(--text-primary);">
                                    @selectedDebts.Sum(d => d.CurrentBalance ?? 0).ToString("C")
                                </span>
                            </div>
                        </div>

                        <div class="p-4 rounded-lg" style="background: var(--secondary-bg);">
                            <div class="flex justify-between items-center">
                                <span class="text-sm" style="color: var(--text-secondary);">Minimum Payments</span>
                                <span class="font-semibold text-lg" style="color: var(--text-primary);">
                                    @selectedDebts.Sum(d => d.MinimumPayment ?? 0).ToString("C")
                                </span>
                            </div>
                        </div>

                        <div class="p-4 rounded-lg" style="background: var(--secondary-bg);">
                            <div class="flex justify-between items-center">
                                <span class="text-sm" style="color: var(--text-secondary);">Weighted Avg Interest</span>
                                <span class="font-semibold text-lg" style="color: var(--text-primary);">
                                    @CalculateWeightedAverageInterest().ToString("F2")%
                                </span>
                            </div>
                        </div>

                        @if (payoffResults != null)
                        {
                            <div class="p-4 rounded-lg bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20">
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-sm font-medium text-green-800 dark:text-green-200">Payoff Time</span>
                                    <span class="font-bold text-lg text-green-800 dark:text-green-200">
                                        @payoffResults.PayoffMonths months
                                    </span>
                                </div>
                                <div class="flex justify-between items-center">
                                    <span class="text-sm font-medium text-green-800 dark:text-green-200">Total Interest</span>
                                    <span class="font-bold text-lg text-green-800 dark:text-green-200">
                                        @payoffResults.TotalInterest.ToString("C")
                                    </span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            @if (payoffResults != null)
            {
                <!-- Results Section -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                    <!-- Strategy Comparison -->
                    <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-4"
                         style="background: var(--card-bg); border-color: var(--border-color);">
                        <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                            <i class="fas fa-balance-scale mr-3 text-blue-600"></i>
                            Strategy Comparison
                        </h2>

                        <div class="space-y-6">
                            <!-- Current Strategy Results -->
                            <div class="p-4 rounded-lg border-2 border-indigo-200 bg-indigo-50 dark:bg-indigo-900/20">
                                <h3 class="font-semibold text-indigo-800 dark:text-indigo-200 mb-3">
                                    @GetStrategyName(selectedStrategy) Strategy
                                </h3>
                                <div class="grid grid-cols-2 gap-4 text-sm">
                                    <div>
                                        <span class="text-indigo-600 dark:text-indigo-300">Payoff Time:</span>
                                        <p class="font-semibold text-indigo-800 dark:text-indigo-200">
                                            @payoffResults.PayoffMonths months
                                        </p>
                                    </div>
                                    <div>
                                        <span class="text-indigo-600 dark:text-indigo-300">Total Interest:</span>
                                        <p class="font-semibold text-indigo-800 dark:text-indigo-200">
                                            @payoffResults.TotalInterest.ToString("C")
                                        </p>
                                    </div>
                                    <div>
                                        <span class="text-indigo-600 dark:text-indigo-300">Total Payments:</span>
                                        <p class="font-semibold text-indigo-800 dark:text-indigo-200">
                                            @payoffResults.TotalPayments.ToString("C")
                                        </p>
                                    </div>
                                    <div>
                                        <span class="text-indigo-600 dark:text-indigo-300">Monthly Payment:</span>
                                        <p class="font-semibold text-indigo-800 dark:text-indigo-200">
                                            @((selectedDebts.Sum(d => d.MinimumPayment ?? 0) + extraPayment).ToString("C"))
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <!-- Alternative Strategies -->
                            @if (alternativeResults.Any())
                            {
                                @foreach (var alternative in alternativeResults)
                                {
                                    <div class="p-4 rounded-lg" style="background: var(--secondary-bg);">
                                        <h3 class="font-semibold mb-3" style="color: var(--text-primary);">
                                            @GetStrategyName(alternative.Strategy) Strategy
                                        </h3>
                                        <div class="grid grid-cols-2 gap-4 text-sm">
                                            <div>
                                                <span style="color: var(--text-secondary);">Payoff Time:</span>
                                                <p class="font-semibold @GetComparisonColor(alternative.PayoffMonths, payoffResults.PayoffMonths, true)">
                                                    @alternative.PayoffMonths months
                                                    @if (alternative.PayoffMonths != payoffResults.PayoffMonths)
                                                    {
                                                        <span class="text-xs">
                                                            (@((alternative.PayoffMonths - payoffResults.PayoffMonths > 0 ? "+" : ""))@(alternative.PayoffMonths - payoffResults.PayoffMonths))
                                                        </span>
                                                    }
                                                </p>
                                            </div>
                                            <div>
                                                <span style="color: var(--text-secondary);">Total Interest:</span>
                                                <p class="font-semibold @GetComparisonColor(alternative.TotalInterest, payoffResults.TotalInterest, true)">
                                                    @alternative.TotalInterest.ToString("C")
                                                    @if (alternative.TotalInterest != payoffResults.TotalInterest)
                                                    {
                                                        <span class="text-xs">
                                                            (@((alternative.TotalInterest - payoffResults.TotalInterest).ToString("C")))
                                                        </span>
                                                    }
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <!-- Payoff Timeline Chart -->
                    <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-5"
                         style="background: var(--card-bg); border-color: var(--border-color);">
                        <h2 class="text-xl font-semibold mb-6 flex items-center" style="color: var(--text-primary);">
                            <i class="fas fa-chart-area mr-3 text-green-600"></i>
                            Payoff Timeline
                        </h2>
                        <div class="h-80">
                            <canvas id="payoffTimelineChart" class="max-w-full max-h-full"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Detailed Payoff Schedule -->
                <div class="backdrop-blur-lg rounded-2xl shadow-2xl border p-6 animate-slide-up stagger-6"
                     style="background: var(--card-bg); border-color: var(--border-color);">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-xl font-semibold flex items-center" style="color: var(--text-primary);">
                            <i class="fas fa-table mr-3 text-purple-600"></i>
                            Detailed Payoff Schedule
                        </h2>
                        <div class="flex gap-2">
                            <button @onclick="() => showAmortization = !showAmortization"
                                    class="btn-secondary text-sm">
                                <i class="fas @(showAmortization ? "fa-eye-slash" : "fa-eye") mr-2"></i>
                                @(showAmortization ? "Hide" : "Show") Amortization
                            </button>
                            <button @onclick="ExportSchedule" class="btn-secondary text-sm">
                                <i class="fas fa-download mr-2"></i>
                                Export
                            </button>
                        </div>
                    </div>

                    @if (payoffResults.PayoffSchedule.Any())
                    {
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="border-b" style="border-color: var(--border-color);">
                                        <th class="text-left py-3 px-4" style="color: var(--text-primary);">Debt</th>
                                        <th class="text-right py-3 px-4" style="color: var(--text-primary);">Current Balance</th>
                                        <th class="text-right py-3 px-4" style="color: var(--text-primary);">Monthly Payment</th>
                                        <th class="text-right py-3 px-4" style="color: var(--text-primary);">Payoff Date</th>
                                        <th class="text-right py-3 px-4" style="color: var(--text-primary);">Total Interest</th>
                                        @if (showAmortization)
                                        {
                                            <th class="text-center py-3 px-4" style="color: var(--text-primary);">Schedule</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in payoffResults.PayoffSchedule)
                                    {
                                        <tr class="border-b hover:bg-gray-50 dark:hover:bg-gray-800/50" style="border-color: var(--border-color);">
                                            <td class="py-3 px-4">
                                                <div class="flex items-center">
                                                    <div class="w-8 h-8 rounded-lg flex items-center justify-center mr-3 @GetObligationTypeColor(item.ObligationType)">
                                                        <i class="@GetObligationTypeIcon(item.ObligationType) text-white text-xs"></i>
                                                    </div>
                                                    <div>
                                                        <p class="font-medium" style="color: var(--text-primary);">@item.DebtName</p>
                                                        <p class="text-xs" style="color: var(--text-secondary);">@item.InterestRate.ToString("F2")% APR</p>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-right py-3 px-4 font-semibold" style="color: var(--text-primary);">
                                                @item.CurrentBalance.ToString("C")
                                            </td>
                                            <td class="text-right py-3 px-4 font-semibold" style="color: var(--text-primary);">
                                                @item.MonthlyPayment.ToString("C")
                                            </td>
                                            <td class="text-right py-3 px-4" style="color: var(--text-primary);">
                                                @item.PayoffDate.ToString("MMM yyyy")
                                            </td>
                                            <td class="text-right py-3 px-4 font-semibold" style="color: var(--text-primary);">
                                                @item.TotalInterest.ToString("C")
                                            </td>
                                            @if (showAmortization)
                                            {
                                                <td class="text-center py-3 px-4">
                                                    <button @onclick="() => ShowAmortizationDetails(item.DebtId)" 
                                                            class="btn-secondary text-xs">
                                                        <i class="fas fa-chart-line mr-1"></i>
                                                        View
                                                    </button>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-8" style="color: var(--text-secondary);">
                            <i class="fas fa-table text-4xl mb-4"></i>
                            <p>No payoff schedule available. Please select debts and calculate scenarios.</p>
                        </div>
                    }
                </div>
            }

            <!-- Action Buttons -->
            <div class="flex justify-center gap-4 mt-8">
                <button @onclick="SavePayoffPlan" 
                        class="btn-primary transform hover:scale-105 transition-all duration-200"
                        disabled="@(payoffResults == null)">
                    <i class="fas fa-save mr-2"></i>
                    Save Payoff Plan
                </button>
                <button @onclick="SetupAutomation" 
                        class="btn-secondary transform hover:scale-105 transition-all duration-200"
                        disabled="@(payoffResults == null)">
                    <i class="fas fa-robot mr-2"></i>
                    Setup Automation
                </button>
                <button @onclick="ShareResults" 
                        class="btn-secondary transform hover:scale-105 transition-all duration-200"
                        disabled="@(payoffResults == null)">
                    <i class="fas fa-share mr-2"></i>
                    Share Results
                </button>
            </div>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<Obligation> availableDebts = new();
    private List<string> selectedDebtIds = new();
    private List<Obligation> selectedDebts => availableDebts.Where(d => selectedDebtIds.Contains(d.Id)).ToList();
    
    private string selectedStrategy = "avalanche";
    private decimal extraPayment = 0;
    private string paymentFrequency = "monthly";
    private DateTime? targetPayoffDate;
    private bool showAmortization = false;

    private PayoffScenario? payoffResults;
    private List<PayoffScenario> alternativeResults = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableDebts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && payoffResults != null)
        {
            await InitializeCharts();
        }
    }

    private async Task LoadAvailableDebts()
    {
        try
        {
            isLoading = true;
            var allObligations = await ObligationService.GetAllObligationsAsync();
            availableDebts = allObligations
                .Where(o => o.IsDebt && o.Status == ObligationStatus.Active && o.CurrentBalance > 0)
                .OrderByDescending(o => o.CurrentBalance)
                .ToList();

            // Auto-select all debts by default
            selectedDebtIds = availableDebts.Select(d => d.Id).ToList();

            if (selectedDebts.Any())
            {
                await CalculatePayoffScenarios();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading debts: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleDebtSelection(string debtId, bool isSelected)
    {
        if (isSelected && !selectedDebtIds.Contains(debtId))
        {
            selectedDebtIds.Add(debtId);
        }
        else if (!isSelected && selectedDebtIds.Contains(debtId))
        {
            selectedDebtIds.Remove(debtId);
        }
        StateHasChanged();
    }

    private async Task CalculatePayoffScenarios()
    {
        if (!selectedDebts.Any()) return;

        try
        {
            // Calculate current strategy
            payoffResults = await ObligationService.CalculatePayoffScenarioAsync(
                selectedDebtIds, selectedStrategy, extraPayment, paymentFrequency, targetPayoffDate);

            // Calculate alternative strategies for comparison
            alternativeResults.Clear();
            var strategies = new[] { "avalanche", "snowball" };
            
            foreach (var strategy in strategies.Where(s => s != selectedStrategy))
            {
                var result = await ObligationService.CalculatePayoffScenarioAsync(
                    selectedDebtIds, strategy, extraPayment, paymentFrequency, targetPayoffDate);
                result.Strategy = strategy;
                alternativeResults.Add(result);
            }

            await InitializeCharts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating payoff scenarios: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task InitializeCharts()
    {
        if (payoffResults == null) return;

        try
        {
            var chartData = GeneratePayoffChartData();
            MessagingService.Send(new Pilgrims.PersonalFinances.Core.Messaging.Messages.InitializeJavaScriptMessage(
                "payoffchart",
                "payoffTimelineChart",
                chartData
            ));
        }
        catch (Exception ex)
        {
            MessagingService.Send(new Pilgrims.PersonalFinances.Core.Messaging.Messages.ConsoleLogMessage(
                Pilgrims.PersonalFinances.Core.Messaging.Messages.ConsoleLogMessage.LogLevel.Error,
                $"Error initializing charts: {ex.Message}"
            ));
        }
    }

    private object GeneratePayoffChartData()
    {
        if (payoffResults == null) return new { };

        var months = Enumerable.Range(0, payoffResults.PayoffMonths + 1).ToArray();
        var balanceData = new decimal[months.Length];
        var interestData = new decimal[months.Length];

        // Simulate balance reduction over time
        var totalBalance = selectedDebts.Sum(d => d.CurrentBalance ?? 0);
        var monthlyPayment = selectedDebts.Sum(d => d.MinimumPayment ?? 0) + extraPayment;

        for (int i = 0; i < months.Length; i++)
        {
            var remainingBalance = Math.Max(0, totalBalance - (monthlyPayment * i * 0.8m)); // Simplified calculation
            balanceData[i] = remainingBalance;
            interestData[i] = payoffResults.TotalInterest * (remainingBalance / totalBalance);
        }

        return new
        {
            labels = months.Select(m => DateTime.Today.AddMonths(m).ToString("MMM yyyy")).ToArray(),
            datasets = new[]
            {
                new
                {
                    label = "Remaining Balance",
                    data = balanceData,
                    borderColor = "#3b82f6",
                    backgroundColor = "rgba(59, 130, 246, 0.1)",
                    fill = true,
                    tension = 0.4
                },
                new
                {
                    label = "Cumulative Interest",
                    data = interestData,
                    borderColor = "#ef4444",
                    backgroundColor = "rgba(239, 68, 68, 0.1)",
                    fill = true,
                    tension = 0.4
                }
            }
        };
    }

    private decimal CalculateWeightedAverageInterest()
    {
        if (!selectedDebts.Any()) return 0;

        var totalBalance = selectedDebts.Sum(d => d.CurrentBalance ?? 0);
        if (totalBalance == 0) return 0;

        var weightedSum = selectedDebts.Sum(d => (d.InterestRate ?? 0) * (d.CurrentBalance ?? 0));
        return weightedSum / totalBalance;
    }

    // Navigation methods
    private void NavigateToDashboard() => Navigation.NavigateTo("/obligations/dashboard");
    private void NavigateToList() => Navigation.NavigateTo("/obligations");
    private void AddNewDebt() => Navigation.NavigateTo("/obligations/add");

    // Action methods
    private void SavePayoffPlan()
    {
        // TODO: Implement save payoff plan functionality
        MessagingService.Send(new Pilgrims.PersonalFinances.Core.Messaging.Messages.ShowAlertMessage(
            "Payoff plan saved successfully!"
        ));
    }

    private void SetupAutomation()
    {
        // TODO: Implement automation setup
        MessagingService.Send(new Pilgrims.PersonalFinances.Core.Messaging.Messages.ShowAlertMessage(
            "Automation setup coming soon!"
        ));
    }

    private void ShareResults()
    {
        // TODO: Implement share functionality
        MessagingService.Send(new Pilgrims.PersonalFinances.Core.Messaging.Messages.ShowAlertMessage(
            "Share functionality coming soon!"
        ));
    }

    private void ExportSchedule()
    {
        // TODO: Implement export functionality
        MessagingService.Send(new Pilgrims.PersonalFinances.Core.Messaging.Messages.ShowAlertMessage(
            "Export functionality coming soon!"
        ));
    }

    private void ShowAmortizationDetails(string debtId)
    {
        Navigation.NavigateTo($"/obligations/amortization/{debtId}");
    }

    // Helper methods
    private string GetStrategyName(string strategy)
    {
        return strategy switch
        {
            "avalanche" => "Debt Avalanche",
            "snowball" => "Debt Snowball",
            "custom" => "Custom Priority",
            _ => "Unknown"
        };
    }

    private string GetComparisonColor(decimal value1, decimal value2, bool lowerIsBetter)
    {
        if (value1 == value2) return "text-gray-600";
        
        var isBetter = lowerIsBetter ? value1 < value2 : value1 > value2;
        return isBetter ? "text-green-600" : "text-red-600";
    }

    private string GetObligationTypeIcon(ObligationType type)
    {
        return type switch
        {
            ObligationType.CreditCard => "fas fa-credit-card",
            ObligationType.Mortgage => "fas fa-home",
            ObligationType.PersonalLoan or ObligationType.StudentLoan or ObligationType.AutoLoan or ObligationType.BusinessLoan => "fas fa-hand-holding-usd",
            ObligationType.MedicalDebt => "fas fa-user-md",
            _ => "fas fa-file-contract"
        };
    }

    private string GetObligationTypeColor(ObligationType type)
    {
        return type switch
        {
            ObligationType.CreditCard => "bg-gradient-to-r from-red-500 to-pink-600",
            ObligationType.Mortgage => "bg-gradient-to-r from-green-500 to-emerald-600",
            ObligationType.PersonalLoan or ObligationType.StudentLoan or ObligationType.AutoLoan or ObligationType.BusinessLoan => "bg-gradient-to-r from-blue-500 to-indigo-600",
            ObligationType.MedicalDebt => "bg-gradient-to-r from-purple-500 to-violet-600",
            _ => "bg-gradient-to-r from-gray-500 to-slate-600"
        };
    }

    // Models for payoff calculations
    public class PayoffResults
    {
        public string Strategy { get; set; } = "";
        public int PayoffMonths { get; set; }
        public decimal TotalInterest { get; set; }
        public decimal TotalPayments { get; set; }
        public List<DebtPayoffItem> PayoffSchedule { get; set; } = new();
    }

    public class DebtPayoffItem
    {
        public string DebtId { get; set; } = "";
        public string DebtName { get; set; } = "";
        public ObligationType ObligationType { get; set; }
        public decimal CurrentBalance { get; set; }
        public decimal InterestRate { get; set; }
        public decimal MonthlyPayment { get; set; }
        public DateTime PayoffDate { get; set; }
        public decimal TotalInterest { get; set; }
    }
}