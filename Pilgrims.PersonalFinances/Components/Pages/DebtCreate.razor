@page "/debt-create"
@page "/debt-edit/{DebtId:int}"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@inject IDebtService DebtService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>@(IsEditMode ? "Edit Debt" : "Add New Debt") - Pilgrims Personal Finance</PageTitle>

<!-- Particle Background -->
<div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-blue-900 dark:to-indigo-900"></div>
    <div class="particles-container">
        @for (int i = 0; i < 20; i++)
        {
            <div class="particle" style="animation-delay: @(i * 0.2)s;"></div>
        }
    </div>
</div>

<!-- Main Content -->
<div class="relative z-10 min-h-screen p-6">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent animate-fade-in">
                        @(IsEditMode ? "‚úèÔ∏è Edit Debt" : "‚ûï Add New Debt")
                    </h1>
                    <p class="text-gray-600 dark:text-gray-300 mt-2 animate-slide-up">
                        @(IsEditMode ? "Update debt information and payment terms" : "Track a new debt or loan obligation")
                    </p>
                </div>
                <div class="flex space-x-3">
                    <button @onclick="NavigateBack" class="px-6 py-3 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                        <i class="fas fa-arrow-left mr-2"></i>Back
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Content -->
    <div class="max-w-4xl mx-auto">
        <EditForm Model="debtModel" OnValidSubmit="HandleValidSubmit" class="space-y-6">
            <DataAnnotationsValidator />
            
            <!-- Basic Information Section -->
            <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.1s;">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                    <span class="mr-2">üìã</span> Basic Information
                </h3>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Debt Name -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Debt Name <span class="text-red-500">*</span>
                        </label>
                        <InputText @bind-Value="debtModel.Name" 
                                   class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                   placeholder="e.g., Chase Credit Card, Car Loan" />
                        <ValidationMessage For="@(() => debtModel.Name)" class="text-red-500 text-sm" />
                    </div>

                    <!-- Debt Type -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Debt Type <span class="text-red-500">*</span>
                        </label>
                        <InputSelect @bind-Value="debtModel.DebtType" 
                                     class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300">
                            <option value="">Select debt type...</option>
                            @foreach (var debtType in Enum.GetValues<DebtType>())
                            {
                                <option value="@debtType">@debtType.ToString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => debtModel.DebtType)" class="text-red-500 text-sm" />
                    </div>

                    <!-- Creditor Selection -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Creditor <span class="text-red-500">*</span>
                        </label>
                        <div class="flex space-x-2">
                            <InputSelect @bind-Value="debtModel.CreditorId" 
                                         class="flex-1 px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300">
                                <option value="">Select creditor...</option>
                                @foreach (var creditor in creditors)
                                {
                                    <option value="@creditor.Id">@creditor.Name</option>
                                }
                            </InputSelect>
                            <button type="button" @onclick="ShowNewCreditorForm" 
                                    class="px-4 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => debtModel.CreditorId)" class="text-red-500 text-sm" />
                    </div>

                    <!-- Account Number -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Account Number
                        </label>
                        <InputText @bind-Value="debtModel.AccountNumber" 
                                   class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                   placeholder="Last 4 digits or full account number" />
                    </div>
                </div>
            </div>

            <!-- Financial Details Section -->
            <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.2s;">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                    <span class="mr-2">üí∞</span> Financial Details
                </h3>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Principal Amount -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Principal Amount <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                            <InputNumber @bind-Value="debtModel.PrincipalAmount" 
                                         class="w-full pl-8 pr-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                         placeholder="0.00" />
                        </div>
                        <ValidationMessage For="@(() => debtModel.PrincipalAmount)" class="text-red-500 text-sm" />
                    </div>

                    <!-- Current Balance -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Current Balance <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                            <InputNumber @bind-Value="debtModel.CurrentBalance" 
                                         class="w-full pl-8 pr-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                         placeholder="0.00" />
                        </div>
                        <ValidationMessage For="@(() => debtModel.CurrentBalance)" class="text-red-500 text-sm" />
                    </div>

                    <!-- Interest Rate -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Interest Rate (APR)
                        </label>
                        <div class="relative">
                            <InputNumber @bind-Value="debtModel.InterestRate" 
                                         class="w-full pr-8 pl-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                         placeholder="0.00" />
                            <span class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">%</span>
                        </div>
                    </div>

                    <!-- Minimum Payment -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Minimum Payment <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                            <InputNumber @bind-Value="debtModel.MinimumPayment" 
                                         class="w-full pl-8 pr-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                         placeholder="0.00" />
                        </div>
                        <ValidationMessage For="@(() => debtModel.MinimumPayment)" class="text-red-500 text-sm" />
                    </div>

                    <!-- Payment Due Day -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Payment Due Day
                        </label>
                        <InputNumber @bind-Value="debtModel.PaymentDueDay" 
                                     class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                     placeholder="Day of month (1-31)" />
                    </div>

                    <!-- Payment Frequency -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Payment Frequency
                        </label>
                        <InputSelect @bind-Value="debtModel.PaymentFrequency" 
                                     class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300">
                            @foreach (var frequency in Enum.GetValues<PaymentFrequency>())
                            {
                                <option value="@frequency">@frequency.ToString()</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>

            <!-- Dates and Priority Section -->
            <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.3s;">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                    <span class="mr-2">üìÖ</span> Dates & Priority
                </h3>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Origination Date -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Origination Date
                        </label>
                        <InputDate @bind-Value="debtModel.OriginationDate" 
                                   class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300" />
                    </div>

                    <!-- Maturity Date -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Maturity Date
                        </label>
                        <InputDate @bind-Value="debtModel.MaturityDate" 
                                   class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300" />
                    </div>

                    <!-- Debt Priority -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Priority Level
                        </label>
                        <InputSelect @bind-Value="debtModel.Priority" 
                                     class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300">
                            @foreach (var priority in Enum.GetValues<DebtPriority>())
                            {
                                <option value="@priority">@priority.ToString()</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>

            <!-- Notes Section -->
            <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.4s;">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                    <span class="mr-2">üìù</span> Additional Notes
                </h3>
                
                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                        Notes
                    </label>
                    <InputTextArea @bind-Value="debtModel.Notes" 
                                   rows="4"
                                   class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 resize-none"
                                   placeholder="Additional information about this debt..." />
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-end space-x-4 pt-6">
                <button type="button" @onclick="NavigateBack" 
                        class="px-8 py-3 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                    Cancel
                </button>
                <button type="submit" disabled="@isSubmitting"
                        class="px-8 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isSubmitting)
                    {
                        <i class="fas fa-spinner fa-spin mr-2"></i>
                        <span>@(IsEditMode ? "Updating..." : "Creating...")</span>
                    }
                    else
                    {
                        <i class="fas fa-save mr-2"></i>
                        <span>@(IsEditMode ? "Update Debt" : "Create Debt")</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

<!-- New Creditor Modal -->
@if (showNewCreditorModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fade-in">
        <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 max-w-md w-full mx-4 animate-scale-in">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Add New Creditor</h3>
            
            <EditForm Model="newCreditorModel" OnValidSubmit="HandleNewCreditorSubmit">
                <DataAnnotationsValidator />
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Creditor Name <span class="text-red-500">*</span>
                        </label>
                        <InputText @bind-Value="newCreditorModel.Name" 
                                   class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                   placeholder="e.g., Chase Bank, Capital One" />
                        <ValidationMessage For="@(() => newCreditorModel.Name)" class="text-red-500 text-sm" />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Phone Number
                        </label>
                        <InputText @bind-Value="newCreditorModel.Phone" 
                                   class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                   placeholder="(555) 123-4567" />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Email
                        </label>
                        <InputText @bind-Value="newCreditorModel.Email" 
                                   class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                                   placeholder="support@creditor.com" />
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" @onclick="HideNewCreditorForm" 
                            class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors duration-300">
                        Cancel
                    </button>
                    <button type="submit" disabled="@isSubmittingCreditor"
                            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-300 disabled:opacity-50">
                        @if (isSubmittingCreditor)
                        {
                            <i class="fas fa-spinner fa-spin mr-2"></i>@("Adding...")
                        }
                        else
                        {
                            <span>Add Creditor</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public string? DebtId { get; set; }

    private DebtCreateModel debtModel = new();
    private CreditorCreateModel newCreditorModel = new();
    private List<Creditor> creditors = new();
    
    private bool isSubmitting = false;
    private bool isSubmittingCreditor = false;
    private bool showNewCreditorModal = false;

    private bool IsEditMode => !string.IsNullOrWhiteSpace(DebtId);

    protected override async Task OnInitializedAsync()
    {
        await LoadCreditors();
        
        if (IsEditMode)
        {
            await LoadDebtForEdit();
        }
        
        await JSRuntime.InvokeVoidAsync("initializeParticles");
    }

    private async Task LoadCreditors()
    {
        creditors = (await DebtService.GetAllCreditorsAsync()).ToList();
    }

    private async Task LoadDebtForEdit()
    {
        if (!string.IsNullOrWhiteSpace(DebtId))
        {
            var debt = await DebtService.GetDebtByIdAsync(DebtId);
            if (debt != null)
            {
                debtModel = new DebtCreateModel
                {
                    Id = debt.Id,
                    Name = debt.Name,
                    DebtType = debt.DebtType,
                    CreditorId = debt.CreditorId ?? string.Empty,
                    PrincipalAmount = debt.PrincipalAmount,
                    CurrentBalance = debt.CurrentBalance,
                    InterestRate = debt.InterestRate,
                    MinimumPayment = debt.MinimumPayment,
                    PaymentDueDay = debt.PaymentDueDay,
                    PaymentFrequency = debt.PaymentFrequency,
                    Priority = debt.Priority,
                    OriginationDate = debt.OriginationDate,
                    MaturityDate = debt.MaturityDate,
                    AccountNumber = debt.AccountNumber,
                    Notes = debt.Notes
                };
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        
        try
        {
            var debt = new Debt
            {
                Id = debtModel.Id,
                Name = debtModel.Name,
                DebtType = debtModel.DebtType,
                CreditorId = debtModel.CreditorId,
                PrincipalAmount = debtModel.PrincipalAmount,
                CurrentBalance = debtModel.CurrentBalance,
                InterestRate = debtModel.InterestRate,
                MinimumPayment = debtModel.MinimumPayment,
                PaymentDueDay = debtModel.PaymentDueDay,
                PaymentFrequency = debtModel.PaymentFrequency,
                Priority = debtModel.Priority,
                OriginationDate = debtModel.OriginationDate,
                MaturityDate = debtModel.MaturityDate,
                AccountNumber = debtModel.AccountNumber,
                Notes = debtModel.Notes,
                IsActive = true,
                CreatedAt = IsEditMode ? default : DateTime.UtcNow
            };

            if (IsEditMode)
            {
                await DebtService.UpdateDebtAsync(debt);
            }
            else
            {
                await DebtService.CreateDebtAsync(debt);
            }

            Navigation.NavigateTo("/debt-list");
        }
        catch (Exception ex)
        {
            // Handle error - could show notification
            Console.WriteLine($"Error saving debt: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ShowNewCreditorForm()
    {
        newCreditorModel = new CreditorCreateModel();
        showNewCreditorModal = true;
    }

    private void HideNewCreditorForm()
    {
        showNewCreditorModal = false;
        newCreditorModel = new CreditorCreateModel();
    }

    private async Task HandleNewCreditorSubmit()
    {
        isSubmittingCreditor = true;
        
        try
        {
            var creditor = new Creditor
            {
                Name = newCreditorModel.Name,
                Phone = newCreditorModel.Phone,
                Email = newCreditorModel.Email,
                CreatedAt = DateTime.UtcNow
            };

            var createdCreditor = await DebtService.CreateCreditorAsync(creditor);
            await LoadCreditors();
            
            debtModel.CreditorId = createdCreditor.Id.ToString();
            HideNewCreditorForm();
        }
        catch (Exception ex)
        {
            // Handle error - could show notification
            Console.WriteLine($"Error creating creditor: {ex.Message}");
        }
        finally
        {
            isSubmittingCreditor = false;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/debt-dashboard");
    }

    // Model classes for form binding
    public class DebtCreateModel
    {
        public string? Id { get; set; }
        
        [Required(ErrorMessage = "Debt name is required")]
        [StringLength(200, ErrorMessage = "Debt name cannot exceed 200 characters")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Debt type is required")]
        public DebtType DebtType { get; set; }
        
        [Required(ErrorMessage = "Creditor is required")]
        public string CreditorId { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Principal amount is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Principal amount must be greater than 0")]
        public decimal PrincipalAmount { get; set; }
        
        [Required(ErrorMessage = "Current balance is required")]
        [Range(0, double.MaxValue, ErrorMessage = "Current balance cannot be negative")]
        public decimal CurrentBalance { get; set; }
        
        [Range(0, 100, ErrorMessage = "Interest rate must be between 0 and 100")]
        public decimal? InterestRate { get; set; }
        
        [Required(ErrorMessage = "Minimum payment is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Minimum payment must be greater than 0")]
        public decimal? MinimumPayment { get; set; }
        
        [Range(1, 31, ErrorMessage = "Payment due day must be between 1 and 31")]
        public int? PaymentDueDay { get; set; }
        
        public PaymentFrequency PaymentFrequency { get; set; } = PaymentFrequency.Monthly;
        public DebtPriority Priority { get; set; } = DebtPriority.Medium;
        public DateTime? OriginationDate { get; set; }
        public DateTime? MaturityDate { get; set; }
        public string? AccountNumber { get; set; }
        public string? Notes { get; set; }
    }

    public class CreditorCreateModel
    {
        [Required(ErrorMessage = "Creditor name is required")]
        [StringLength(200, ErrorMessage = "Creditor name cannot exceed 200 characters")]
        public string Name { get; set; } = string.Empty;
        
        public string? Phone { get; set; }
        
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string? Email { get; set; }
    }
}