@page "/budget/create"
@page "/budget/edit/{budgetId:int}"
@using Pilgrims.PersonalFinances.Core.Models
@using Pilgrims.PersonalFinances.Core.Models.Enums
@using Pilgrims.PersonalFinances.Core.Services.Interfaces
@inject IBudgetService BudgetService
@inject ITransactionService TransactionService
@inject IAccountService AccountService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(IsEditMode ? "Edit Budget" : "Create Budget")</PageTitle>

<!-- Particle Background -->
<div class="particle-background">
    @for (int i = 0; i < 50; i++)
    {
        <div class="particle" style="left: @(Random.Shared.Next(0, 100))%; animation-delay: @(Random.Shared.Next(0, 20))s; animation-duration: @(Random.Shared.Next(10, 30))s;"></div>
    }
</div>

<div class="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-blue-900 dark:to-purple-900 p-4 relative">
    <!-- Header -->
    <div class="max-w-4xl mx-auto mb-8 animate-slide-down">
        <div class="flex items-center justify-between mb-6">
            <div class="flex items-center space-x-4">
                <button @onclick="NavigateBack" class="p-2 bg-white/20 dark:bg-gray-800/20 backdrop-blur-lg rounded-lg hover:bg-white/30 dark:hover:bg-gray-800/30 transition-all duration-300">
                    <i class="fas fa-arrow-left text-gray-700 dark:text-gray-300"></i>
                </button>
                <div>
                    <h1 class="text-3xl font-bold text-gray-800 dark:text-white">
                        @(IsEditMode ? "Edit Budget" : "Create New Budget")
                    </h1>
                    <p class="text-gray-600 dark:text-gray-300">
                        @(IsEditMode ? "Update your budget settings and preferences" : "Set up a new budget to track your spending")
                    </p>
                </div>
            </div>
            
            @if (IsEditMode && budget != null)
            {
                <div class="flex items-center space-x-2">
                    <span class="px-3 py-1 bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 rounded-full text-sm">
                        @budget.Period.ToString()
                    </span>
                    <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 rounded-full text-sm">
                        @budget.BudgetType.ToString()
                    </span>
                </div>
            }
        </div>
    </div>

    <!-- Main Form -->
    <div class="max-w-4xl mx-auto">
        <EditForm Model="budgetModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- Left Column - Basic Information -->
                <div class="lg:col-span-2 space-y-6">
                    <!-- Basic Information Card -->
                    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.1s;">
                        <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                            <span class="mr-2">üìù</span> Basic Information
                        </h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Budget Name</label>
                                <InputText @bind-Value="budgetModel.Name" 
                                          class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300" 
                                          placeholder="e.g., Monthly Groceries" />
                                <ValidationMessage For="@(() => budgetModel.Name)" class="text-red-500 text-sm mt-1" />
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Budget Amount</label>
                                <InputNumber @bind-Value="budgetModel.Amount" 
                                           class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300" 
                                           placeholder="0.00" />
                                <ValidationMessage For="@(() => budgetModel.Amount)" class="text-red-500 text-sm mt-1" />
                            </div>
                        </div>
                        
                        <div class="mt-6">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description (Optional)</label>
                            <InputTextArea @bind-Value="budgetModel.Description" 
                                         class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 resize-none" 
                                         rows="3" 
                                         placeholder="Add a description for this budget..." />
                        </div>
                    </div>

                    <!-- Budget Type & Configuration -->
                    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.2s;">
                        <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                            <span class="mr-2">üéØ</span> Budget Type & Configuration
                        </h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Budget Type</label>
                                <InputSelect @bind-Value="budgetModel.BudgetType" 
                                           @onchange="OnBudgetTypeChanged"
                                           class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300">
                                    <option value="@BudgetType.Category">Category-based</option>
                                    <option value="@BudgetType.Account">Account-based</option>
                                    <option value="@BudgetType.Tag">Tag-based</option>
                                    <option value="@BudgetType.TimePeriod">Time-period</option>
                                </InputSelect>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Budget Period</label>
                                <InputSelect @bind-Value="budgetModel.Period" 
                                           class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300">
                                    <option value="@BudgetPeriod.Weekly">Weekly</option>
                                    <option value="@BudgetPeriod.Monthly">Monthly</option>
                                    <option value="@BudgetPeriod.Quarterly">Quarterly</option>
                                    <option value="@BudgetPeriod.Yearly">Yearly</option>
                                    <option value="@BudgetPeriod.Custom">Custom</option>
                                </InputSelect>
                            </div>
                        </div>

                        <!-- Dynamic Configuration based on Budget Type -->
                        @if (budgetModel.BudgetType == BudgetType.Category)
                        {
                            <div class="mt-6">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Category</label>
                                <InputSelect @bind-Value="budgetModel.CategoryId" 
                                           class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300">
                                    <option value="">-- Select Category --</option>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        }
                        else if (budgetModel.BudgetType == BudgetType.Account)
                        {
                            <div class="mt-6">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Account</label>
                                <InputSelect @bind-Value="budgetModel.AccountId" 
                                           class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300">
                                    <option value="">-- Select Account --</option>
                                    @if (accounts != null)
                                    {
                                        @foreach (var account in accounts)
                                        {
                                            <option value="@account.Id">@account.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        }
                        else if (budgetModel.BudgetType == BudgetType.Tag)
                        {
                            <div class="mt-6">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Tags (comma-separated)</label>
                                <InputText @bind-Value="budgetModel.Tags" 
                                          class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300" 
                                          placeholder="e.g., shopping, entertainment, food" />
                            </div>
                        }

                        <!-- Custom Date Range for Custom Period -->
                        @if (budgetModel.Period == BudgetPeriod.Custom)
                        {
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Start Date</label>
                                    <InputDate @bind-Value="budgetModel.StartDate" 
                                             class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300" />
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">End Date</label>
                                    <InputDate @bind-Value="budgetModel.EndDate" 
                                             class="w-full px-4 py-3 bg-white/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300" />
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Budget Features -->
                    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.3s;">
                        <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                            <span class="mr-2">‚öôÔ∏è</span> Budget Features
                        </h3>
                        
                        <div class="space-y-4">
                            <div class="flex items-center justify-between p-4 bg-white/30 dark:bg-gray-700/30 rounded-lg">
                                <div>
                                    <h4 class="font-medium text-gray-800 dark:text-white">Rollover Unused Budget</h4>
                                    <p class="text-sm text-gray-600 dark:text-gray-300">Carry unused budget to the next period</p>
                                </div>
                                <InputCheckbox @bind-Value="budgetModel.AllowRollover" 
                                             class="w-5 h-5 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2" />
                            </div>
                            
                            <div class="flex items-center justify-between p-4 bg-white/30 dark:bg-gray-700/30 rounded-lg">
                                <div>
                                    <h4 class="font-medium text-gray-800 dark:text-white">Allow Overspending</h4>
                                    <p class="text-sm text-gray-600 dark:text-gray-300">Permit spending beyond budget limit</p>
                                </div>
                                <InputCheckbox @bind-Value="budgetModel.AllowOverspend" 
                                             class="w-5 h-5 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2" />
                            </div>
                            
                            <div class="flex items-center justify-between p-4 bg-white/30 dark:bg-gray-700/30 rounded-lg">
                                <div>
                                    <h4 class="font-medium text-gray-800 dark:text-white">Enable Alerts</h4>
                                    <p class="text-sm text-gray-600 dark:text-gray-300">Receive notifications when approaching limits</p>
                                </div>
                                <InputCheckbox @bind-Value="budgetModel.EnableAlerts" 
                                             class="w-5 h-5 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column - Preview & Actions -->
                <div class="space-y-6">
                    <!-- Budget Preview -->
                    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.4s;">
                        <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center">
                            <span class="mr-2">üëÅÔ∏è</span> Preview
                        </h3>
                        
                        <div class="bg-white/50 dark:bg-gray-700/50 p-4 rounded-xl">
                            <div class="flex items-center justify-between mb-4">
                                <div class="flex items-center">
                                    <span class="text-2xl mr-3">
                                        @(budgetModel.BudgetType switch
                                        {
                                            BudgetType.Category => "üìÇ",
                                            BudgetType.Account => "üè¶",
                                            BudgetType.Tag => "üè∑Ô∏è",
                                            BudgetType.TimePeriod => "üìÖ",
                                            _ => "üí∞"
                                        })
                                    </span>
                                    <div>
                                        <h4 class="font-medium text-gray-800 dark:text-white">
                                            @(string.IsNullOrEmpty(budgetModel.Name) ? "Budget Name" : budgetModel.Name)
                                        </h4>
                                        <p class="text-xs text-gray-500">@budgetModel.BudgetType.ToString() ‚Ä¢ @budgetModel.Period.ToString()</p>
                                    </div>
                                </div>
                                <div class="text-right">
                                    <div class="text-lg font-bold text-gray-800 dark:text-white">@budgetModel.Amount.ToString("C")</div>
                                    <div class="text-xs text-gray-500">Budget Amount</div>
                                </div>
                            </div>
                            
                            <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2 mb-3">
                                <div class="bg-gradient-to-r from-blue-400 to-purple-600 h-2 rounded-full" style="width: 0%"></div>
                            </div>
                            
                            <div class="flex justify-between text-xs text-gray-500">
                                <span>$0.00 spent</span>
                                <span>@budgetModel.Amount.ToString("C") remaining</span>
                            </div>
                        </div>
                        
                        @if (budgetModel.EnableAlerts)
                        {
                            <div class="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                                <div class="flex items-center text-blue-600 dark:text-blue-400 text-sm">
                                    <i class="fas fa-bell mr-2"></i>
                                    Alerts enabled at 50%, 75%, 90%, and 100%
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Action Buttons -->
                    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-slide-up" style="animation-delay: 0.5s;">
                        <div class="space-y-4">
                            <button type="submit" 
                                    disabled="@isSubmitting"
                                    class="w-full px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed">
                                @if (isSubmitting)
                                {
                                    <i class="fas fa-spinner fa-spin mr-2"></i>
                                    @(IsEditMode ? "Updating..." : "Creating...")
                                }
                                else
                                {
                                    <i class="fas fa-save mr-2"></i>
                                    @(IsEditMode ? "Update Budget" : "Create Budget")
                                }
                            </button>
                            
                            @if (IsEditMode)
                            {
                                <button type="button" 
                                        @onclick="DeleteBudget"
                                        class="w-full px-6 py-3 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                                    <i class="fas fa-trash mr-2"></i>Delete Budget
                                </button>
                            }
                            
                            <button type="button" 
                                    @onclick="NavigateBack"
                                    class="w-full px-6 py-3 bg-gray-500 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                                <i class="fas fa-times mr-2"></i>Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .particle-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 0;
    }

    .particle {
        position: absolute;
        width: 4px;
        height: 4px;
        background: linear-gradient(45deg, #3b82f6, #8b5cf6);
        border-radius: 50%;
        animation: float linear infinite;
        opacity: 0.6;
    }

    @@keyframes float {
        0% {
            transform: translateY(100vh) rotate(0deg);
            opacity: 0;
        }
        10% {
            opacity: 0.6;
        }
        90% {
            opacity: 0.6;
        }
        100% {
            transform: translateY(-100px) rotate(360deg);
            opacity: 0;
        }
    }

    .glass-card {
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    }

    @@keyframes slide-down {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slide-up {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .animate-slide-down {
        animation: slide-down 0.6s ease-out;
    }

    .animate-slide-up {
        animation: slide-up 0.6s ease-out;
        animation-fill-mode: both;
    }
</style>

@code {
    [Parameter] public int? BudgetId { get; set; }
    
    private BudgetCreateModel budgetModel = new();
    private Pilgrims.PersonalFinances.Core.Models.Budget? budget;
    private List<Category>? categories;
    private IEnumerable<Account>? accounts;
    private bool isSubmitting = false;
    private bool IsEditMode => BudgetId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        
        if (IsEditMode && BudgetId.HasValue)
        {
            await LoadBudgetForEdit();
        }
        else
        {
            SetDefaultValues();
        }
    }

    private async Task LoadData()
    {
        try
        {
            // Load categories and accounts for dropdowns
            categories = await TransactionService.GetCategoriesAsync();
        accounts = await AccountService.GetAllAccountsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadBudgetForEdit()
    {
        try
        {
            if (BudgetId.HasValue)
            {
                budget = await BudgetService.GetBudgetByIdAsync(BudgetId.Value.ToString());
                if (budget != null)
                {
                    budgetModel = new BudgetCreateModel
                    {
                        Name = budget.Name,
                        Description = budget.Description,
                        Amount = budget.LimitAmount,
                        BudgetType = budget.BudgetType,
                        Period = budget.Period,
                        StartDate = budget.StartDate,
                        EndDate = budget.EndDate,
                        CategoryId = budget.CategoryId,
                        AccountId = budget.AccountId,
                        Tags = budget.Tag,
                        AllowRollover = budget.EnableRollover,
                        AllowOverspend = budget.AllowOverspend,
                        EnableAlerts = budget.AlertsEnabled
                    };
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading budget: {ex.Message}");
            Navigation.NavigateTo("/budget-dashboard");
        }
    }

    private void SetDefaultValues()
    {
        budgetModel.StartDate = DateTime.Now.Date;
        budgetModel.EndDate = DateTime.Now.AddMonths(1).Date;
        budgetModel.Period = BudgetPeriod.Monthly;
        budgetModel.BudgetType = BudgetType.Category;
        budgetModel.EnableAlerts = true;
    }

    private void OnBudgetTypeChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<BudgetType>(e.Value?.ToString(), out var budgetType))
        {
            budgetModel.BudgetType = budgetType;
            
            // Clear related fields when type changes
            budgetModel.CategoryId = null;
            budgetModel.AccountId = null;
            budgetModel.Tags = null;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();

            var budgetToSave = new Pilgrims.PersonalFinances.Core.Models.Budget
            {
                Id = IsEditMode ? BudgetId!.Value.ToString() : Guid.NewGuid().ToString(),
                Name = budgetModel.Name,
                Description = budgetModel.Description,
                LimitAmount = budgetModel.Amount,
                BudgetType = budgetModel.BudgetType,
                Period = budgetModel.Period,
                StartDate = budgetModel.StartDate,
                EndDate = budgetModel.EndDate,
                CategoryId = budgetModel.CategoryId,
                AccountId = budgetModel.AccountId,
                Tag = budgetModel.Tags,
                EnableRollover = budgetModel.AllowRollover,
                AllowOverspend = budgetModel.AllowOverspend,
                AlertsEnabled = budgetModel.EnableAlerts,
                IsActive = true,
                CreatedAt = IsEditMode ? budget!.CreatedAt : DateTime.Now
            };

            // Set dates based on period if not custom
            if (budgetModel.Period != BudgetPeriod.Custom)
            {
                SetDatesBasedOnPeriod(budgetToSave);
            }

            Pilgrims.PersonalFinances.Core.Models.Budget savedBudget;
            if (IsEditMode)
            {
                savedBudget = await BudgetService.UpdateBudgetAsync(budgetToSave);
            }
            else
            {
                savedBudget = await BudgetService.CreateBudgetAsync(budgetToSave);
            }

            // Create alerts if enabled
            if (budgetModel.EnableAlerts)
            {
                await CreateBudgetAlerts(savedBudget.Id);
            }

            // Navigate back to budget dashboard
            Navigation.NavigateTo("/budget-dashboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving budget: {ex.Message}");
            // Could show error notification here
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void SetDatesBasedOnPeriod(Pilgrims.PersonalFinances.Core.Models.Budget budget)
    {
        var now = DateTime.Now;
        
        switch (budget.Period)
        {
            case BudgetPeriod.Weekly:
                budget.StartDate = now.AddDays(-(int)now.DayOfWeek + (int)DayOfWeek.Monday);
                budget.EndDate = budget.StartDate.AddDays(6);
                break;
            case BudgetPeriod.Monthly:
                budget.StartDate = new DateTime(now.Year, now.Month, 1);
                budget.EndDate = budget.StartDate.AddMonths(1).AddDays(-1);
                break;
            case BudgetPeriod.Quarterly:
                var quarter = (now.Month - 1) / 3 + 1;
                budget.StartDate = new DateTime(now.Year, (quarter - 1) * 3 + 1, 1);
                budget.EndDate = budget.StartDate.AddMonths(3).AddDays(-1);
                break;
            case BudgetPeriod.Yearly:
                budget.StartDate = new DateTime(now.Year, 1, 1);
                budget.EndDate = new DateTime(now.Year, 12, 31);
                break;
        }
    }

    private async Task CreateBudgetAlerts(string budgetId)
    {
        var alertThresholds = new[] { 50, 75, 90, 100 };
        
        foreach (var threshold in alertThresholds)
        {
            var alert = new BudgetAlert
            {
                BudgetId = budgetId,
                ThresholdPercentage = threshold,
                AlertLevel = threshold switch
                {
                    50 => (int)BudgetAlertLevel.FiftyPercent,
                    75 => (int)BudgetAlertLevel.SeventyFivePercent,
                    90 => (int)BudgetAlertLevel.NinetyPercent,
                    100 => (int)BudgetAlertLevel.OneHundredPercent,
                    _ => (int)BudgetAlertLevel.FiftyPercent
                },
                IsActive = true
            };
            
            await BudgetService.CreateBudgetAlertAsync(alert);
        }
    }

    private async Task DeleteBudget()
    {
        if (IsEditMode && BudgetId.HasValue)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this budget? This action cannot be undone.");
            
            if (confirmed)
            {
                try
                {
                    await BudgetService.DeleteBudgetAsync(BudgetId.Value.ToString());
                    Navigation.NavigateTo("/budget-dashboard");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deleting budget: {ex.Message}");
                }
            }
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/budget-dashboard");
    }

    // Model class for form binding
    public class BudgetCreateModel
    {
        [Required(ErrorMessage = "Budget name is required")]
        [StringLength(100, ErrorMessage = "Budget name cannot exceed 100 characters")]
        public string Name { get; set; } = "";

        public string? Description { get; set; }

        [Required(ErrorMessage = "Budget amount is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Budget amount must be greater than 0")]
        public decimal Amount { get; set; }

        public BudgetType BudgetType { get; set; } = BudgetType.Category;
        public BudgetPeriod Period { get; set; } = BudgetPeriod.Monthly;
        public DateTime StartDate { get; set; } = DateTime.Now;
        public DateTime EndDate { get; set; } = DateTime.Now.AddMonths(1);
        
        public string? CategoryId { get; set; }
        public string? AccountId { get; set; }
        public string? Tags { get; set; }
        
        public bool AllowRollover { get; set; }
        public bool AllowOverspend { get; set; }
        public bool EnableAlerts { get; set; } = true;
    }
}

// Extension method for getting start of week
public static class DateTimeExtensions
{
    public static DateTime StartOfWeek(this DateTime dt, DayOfWeek startOfWeek = DayOfWeek.Monday)
    {
        int diff = (7 + (dt.DayOfWeek - startOfWeek)) % 7;
        return dt.AddDays(-1 * diff).Date;
    }
}