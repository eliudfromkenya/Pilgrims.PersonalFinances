@page "/debt-list"
@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Models.Enums
@using Pilgrims.PersonalFinances.Services.Interfaces
@inject IDebtService DebtService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Debt List - Pilgrims Personal Finance</PageTitle>

<!-- Particle Background -->
<div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-purple-50 via-pink-50 to-red-50 dark:from-gray-900 dark:via-purple-900 dark:to-pink-900"></div>
    <div class="particles-container">
        @for (int i = 0; i < 30; i++)
        {
            <div class="particle" style="animation-delay: @(i * 0.1)s;"></div>
        }
    </div>
</div>

<!-- Main Content -->
<div class="relative z-10 min-h-screen p-6">
    <!-- Header Section -->
    <div class="mb-8">
        <div class="glass-card p-6 rounded-2xl border border-[var(--border-color)] backdrop-blur-lg bg-[var(--card-bg)]">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent animate-fade-in">
                        ðŸ“‹ Debt Management
                    </h1>
                    <p class="text-gray-600 dark:text-gray-300 mt-2 animate-slide-up">Manage all your debts and payment obligations</p>
                </div>
                <div class="flex space-x-3">
                    <button @onclick="NavigateToCreateDebt" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 animate-bounce-in">
                        <i class="fas fa-plus mr-2"></i>Add Debt
                    </button>
                    <button @onclick="NavigateToDashboard" class="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                        <i class="fas fa-chart-line mr-2"></i>Dashboard
                    </button>
                    <button @onclick="RefreshDebts" class="px-4 py-3 bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh
                    </button>
                </div>
            </div>
            
            <!-- Summary Cards -->
            @if (isLoading)
            {
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                    @for (int i = 0; i < 4; i++)
                    {
                        <div class="bg-gradient-to-r from-gray-300 to-gray-400 p-4 rounded-xl animate-pulse">
                            <div class="h-4 bg-gray-200 rounded mb-2"></div>
                            <div class="h-8 bg-gray-200 rounded mb-2"></div>
                            <div class="h-3 bg-gray-200 rounded"></div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                    <div class="bg-gradient-to-r from-purple-400 to-purple-600 p-4 rounded-xl text-white transform hover:scale-105 transition-all duration-300 animate-slide-up" style="animation-delay: 0.1s;">
                        <div class="text-sm opacity-90">Total Debts</div>
                        <div class="text-2xl font-bold">@filteredDebts.Count()</div>
                        <div class="text-xs opacity-75 mt-1">ðŸ“Š Active accounts</div>
                    </div>
                    <div class="bg-gradient-to-r from-pink-400 to-pink-600 p-4 rounded-xl text-white transform hover:scale-105 transition-all duration-300 animate-slide-up" style="animation-delay: 0.2s;">
                        <div class="text-sm opacity-90">Total Balance</div>
                        <div class="text-2xl font-bold">@filteredDebts.Sum(d => d.CurrentBalance).ToString("C")</div>
                        <div class="text-xs opacity-75 mt-1">ðŸ’° Outstanding</div>
                    </div>
                    <div class="bg-gradient-to-r from-red-400 to-red-600 p-4 rounded-xl text-white transform hover:scale-105 transition-all duration-300 animate-slide-up" style="animation-delay: 0.3s;">
                        <div class="text-sm opacity-90">Monthly Payments</div>
                        <div class="text-2xl font-bold">@filteredDebts.Sum(d => d.MinimumPayment)?.ToString("C")</div>
                        <div class="text-xs opacity-75 mt-1">ðŸ“… Required minimum</div>
                    </div>
                    <div class="bg-gradient-to-r from-orange-400 to-orange-600 p-4 rounded-xl text-white transform hover:scale-105 transition-all duration-300 animate-slide-up" style="animation-delay: 0.4s;">
                        <div class="text-sm opacity-90">Avg Interest Rate</div>
                        <div class="text-2xl font-bold">@(filteredDebts.Where(d => d.InterestRate.HasValue).Any() ? filteredDebts.Where(d => d.InterestRate.HasValue).Average(d => d.InterestRate.Value).ToString("F1") + "%" : "N/A")</div>
                        <div class="text-xs opacity-75 mt-1">ðŸ“ˆ Weighted average</div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 mb-6 animate-slide-up" style="animation-delay: 0.5s;">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
            <!-- Search -->
            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Search</label>
                <div class="relative">
                    <input @bind="searchTerm" @oninput="OnSearchChanged" 
                           class="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white placeholder-gray-500 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300"
                           placeholder="Search debts..." />
                    <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                </div>
            </div>

            <!-- Debt Type Filter -->
            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Debt Type</label>
                <select @bind="selectedDebtType" @bind:after="() => OnFilterChanged(null!)" 
                        class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300">
                    <option value="">All Types</option>
                    @foreach (var debtType in Enum.GetValues<DebtType>())
                    {
                        <option value="@debtType">@debtType.ToString()</option>
                    }
                </select>
            </div>

            <!-- Priority Filter -->
            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Priority</label>
                <select @bind="selectedPriority" @bind:after="() => OnFilterChanged(null!)" 
                        class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300">
                    <option value="">All Priorities</option>
                    @foreach (var priority in Enum.GetValues<DebtPriority>())
                    {
                        <option value="@priority">@priority.ToString()</option>
                    }
                </select>
            </div>

            <!-- Sort By -->
            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Sort By</label>
                <select @bind="sortBy" @bind:after="() => OnSortChanged(null!)" 
                        class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-600 bg-white/50 dark:bg-gray-800/50 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300">
                    <option value="name">Name</option>
                    <option value="balance">Balance</option>
                    <option value="payment">Min Payment</option>
                    <option value="interest">Interest Rate</option>
                    <option value="priority">Priority</option>
                    <option value="duedate">Due Date</option>
                </select>
            </div>
        </div>

        <!-- View Toggle -->
        <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
                <span class="text-sm text-gray-600 dark:text-gray-400">View:</span>
                <button @onclick="() => SetViewMode(ViewMode.Card)" 
                        class="px-3 py-2 rounded-lg text-sm transition-all duration-300 @(viewMode == ViewMode.Card ? "bg-purple-500 text-white" : "bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300")">
                    <i class="fas fa-th-large mr-1"></i>Cards
                </button>
                <button @onclick="() => SetViewMode(ViewMode.Table)" 
                        class="px-3 py-2 rounded-lg text-sm transition-all duration-300 @(viewMode == ViewMode.Table ? "bg-purple-500 text-white" : "bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300")">
                    <i class="fas fa-table mr-1"></i>Table
                </button>
            </div>
            
            <div class="text-sm text-gray-600 dark:text-gray-400">
                Showing @filteredDebts.Count() of @allDebts.Count() debts
            </div>
        </div>
    </div>

    <!-- Debt List Content -->
    @if (isLoading)
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @for (int i = 0; i < 6; i++)
            {
                <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 animate-pulse">
                    <div class="h-6 bg-gray-300 rounded mb-4"></div>
                    <div class="h-4 bg-gray-300 rounded mb-2"></div>
                    <div class="h-4 bg-gray-300 rounded mb-4"></div>
                    <div class="h-8 bg-gray-300 rounded mb-2"></div>
                    <div class="h-4 bg-gray-300 rounded"></div>
                </div>
            }
        </div>
    }
    else if (!filteredDebts.Any())
    {
        <div class="glass-card p-12 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 text-center animate-slide-up">
            <i class="fas fa-search text-6xl text-gray-400 mb-4"></i>
            <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2">No debts found</h3>
            <p class="text-gray-500 dark:text-gray-400 mb-6">
                @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(selectedDebtType) && string.IsNullOrEmpty(selectedPriority))
                {
                    <span>You haven't added any debts yet. Start by adding your first debt.</span>
                }
                else
                {
                    <span>No debts match your current filters. Try adjusting your search criteria.</span>
                }
            </p>
            <button @onclick="NavigateToCreateDebt" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                <i class="fas fa-plus mr-2"></i>Add Your First Debt
            </button>
        </div>
    }
    else
    {
        @if (viewMode == ViewMode.Card)
        {
            <!-- Card View -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var (debt, index) in filteredDebts.Select((d, i) => (d, i)))
                {
                    <div class="glass-card p-6 rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 hover:shadow-xl transform hover:scale-105 transition-all duration-300 animate-slide-up cursor-pointer" 
                         style="animation-delay: @((index * 0.1))s;" @onclick="() => NavigateToDebtDetails(debt.Id)">
                        
                        <!-- Header -->
                        <div class="flex items-start justify-between mb-4">
                            <div class="flex-1">
                                <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-1">@debt.Name</h3>
                                <p class="text-sm text-gray-600 dark:text-gray-400">@debt.Creditor?.Name</p>
                                <div class="flex items-center mt-2">
                                    <span class="px-2 py-1 text-xs rounded-full @GetDebtTypeColor(debt.DebtType) text-white">
                                        @debt.DebtType.ToString()
                                    </span>
                                    <span class="ml-2 px-2 py-1 text-xs rounded-full @GetPriorityColor(debt.Priority) text-white">
                                        @debt.Priority.ToString()
                                    </span>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button @onclick:stopPropagation="true" @onclick="() => NavigateToEditDebt(debt.Id)" 
                                        class="p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900 rounded-lg transition-colors duration-300">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button @onclick:stopPropagation="true" @onclick="() => ConfirmDeleteDebt(debt)" 
                                        class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900 rounded-lg transition-colors duration-300">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Financial Info -->
                        <div class="space-y-3">
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600 dark:text-gray-400">Current Balance</span>
                                <span class="text-lg font-bold text-red-600 dark:text-red-400">@debt.CurrentBalance.ToString("C")</span>
                            </div>
                            
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600 dark:text-gray-400">Min Payment</span>
                                <span class="text-sm font-semibold text-gray-800 dark:text-white">@(debt.MinimumPayment?.ToString("C") ?? "N/A")</span>
                            </div>
                            
                            @if (debt.InterestRate.HasValue)
                            {
                                <div class="flex justify-between items-center">
                                    <span class="text-sm text-gray-600 dark:text-gray-400">Interest Rate</span>
                                    <span class="text-sm font-semibold text-orange-600 dark:text-orange-400">@debt.InterestRate.Value.ToString("F2")%</span>
                                </div>
                            }

                            <!-- Progress Bar -->
                            <div class="mt-4">
                                <div class="flex justify-between text-xs text-gray-600 dark:text-gray-400 mb-1">
                                    <span>Progress</span>
                                    <span>@debt.BalancePercentage.ToString("F1")% remaining</span>
                                </div>
                                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                                    <div class="bg-gradient-to-r from-green-400 to-green-600 h-2 rounded-full transition-all duration-1000 ease-out" 
                                         style="width: @((100 - debt.BalancePercentage).ToString("F1"))%"></div>
                                </div>
                            </div>

                            <!-- Next Payment -->
                            @if (debt.NextPaymentDue.HasValue)
                            {
                                var daysUntilDue = (debt.NextPaymentDue.Value - DateTime.Today).Days;
                                <div class="mt-3 p-2 bg-gradient-to-r @(daysUntilDue <= 7 ? "from-red-100 to-red-200 dark:from-red-900 dark:to-red-800" : "from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800") rounded-lg">
                                    <div class="text-xs text-gray-600 dark:text-gray-300">
                                        Next payment: @debt.NextPaymentDue.Value.ToString("MMM dd, yyyy")
                                        <span class="font-semibold">(@daysUntilDue days)</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Table View -->
            <div class="glass-card rounded-2xl border border-white/20 backdrop-blur-lg bg-white/10 dark:bg-gray-800/10 overflow-hidden animate-slide-up">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gradient-to-r from-purple-500 to-pink-600 text-white">
                            <tr>
                                <th class="px-6 py-4 text-left text-sm font-semibold">Debt</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold">Creditor</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold">Type</th>
                                <th class="px-6 py-4 text-right text-sm font-semibold">Balance</th>
                                <th class="px-6 py-4 text-right text-sm font-semibold">Min Payment</th>
                                <th class="px-6 py-4 text-right text-sm font-semibold">Interest</th>
                                <th class="px-6 py-4 text-center text-sm font-semibold">Priority</th>
                                <th class="px-6 py-4 text-center text-sm font-semibold">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                            @foreach (var debt in filteredDebts)
                            {
                                <tr class="hover:bg-white/20 dark:hover:bg-gray-800/20 transition-colors duration-300 cursor-pointer" @onclick="() => NavigateToDebtDetails(debt.Id)">
                                    <td class="px-6 py-4">
                                        <div>
                                            <div class="font-medium text-gray-900 dark:text-white">@debt.Name</div>
                                            @if (!string.IsNullOrEmpty(debt.AccountNumber))
                                            {
                                                <div class="text-sm text-gray-500">Account: @debt.AccountNumber</div>
                                            }
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 text-gray-700 dark:text-gray-300">@debt.Creditor?.Name</td>
                                    <td class="px-6 py-4">
                                        <span class="px-2 py-1 text-xs rounded-full @GetDebtTypeColor(debt.DebtType) text-white">
                                            @debt.DebtType.ToString()
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 text-right font-semibold text-red-600 dark:text-red-400">@debt.CurrentBalance.ToString("C")</td>
                                    <td class="px-6 py-4 text-right text-gray-700 dark:text-gray-300">@(debt.MinimumPayment?.ToString("C") ?? "N/A")</td>
                                    <td class="px-6 py-4 text-right text-orange-600 dark:text-orange-400">
                                        @(debt.InterestRate?.ToString("F2") + "%" ?? "N/A")
                                    </td>
                                    <td class="px-6 py-4 text-center">
                                        <span class="px-2 py-1 text-xs rounded-full @GetPriorityColor(debt.Priority) text-white">
                                            @debt.Priority.ToString()
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 text-center">
                                        <div class="flex justify-center space-x-2">
                                            <button @onclick:stopPropagation="true" @onclick="() => NavigateToEditDebt(debt.Id)" 
                                                    class="p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900 rounded-lg transition-colors duration-300">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button @onclick:stopPropagation="true" @onclick="() => ConfirmDeleteDebt(debt)" 
                                                    class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900 rounded-lg transition-colors duration-300">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && debtToDelete != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fade-in">
        <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 max-w-md w-full mx-4 animate-scale-in">
            <div class="text-center">
                <i class="fas fa-exclamation-triangle text-red-500 text-4xl mb-4"></i>
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-2">Delete Debt</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-6">
                    Are you sure you want to delete "<strong>@debtToDelete.Name</strong>"? This action cannot be undone.
                </p>
                
                <div class="flex justify-center space-x-3">
                    <button @onclick="CancelDelete" 
                            class="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors duration-300">
                        Cancel
                    </button>
                    <button @onclick="DeleteDebt" disabled="@isDeleting"
                            class="px-6 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors duration-300 disabled:opacity-50">
                        @if (isDeleting)
                        {
                            <i class="fas fa-spinner fa-spin mr-2"></i>@("Deleting...")
                        }
                        else
                        {
                            <span>Delete</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Debt> allDebts = new();
    private IEnumerable<Debt> filteredDebts = new List<Debt>();
    private bool isLoading = true;
    private bool isDeleting = false;
    private bool showDeleteModal = false;
    private Debt? debtToDelete = null;

    // Filter and search properties
    private string searchTerm = string.Empty;
    private string selectedDebtType = string.Empty;
    private string selectedPriority = string.Empty;
    private string sortBy = "name";
    private ViewMode viewMode = ViewMode.Card;

    private enum ViewMode
    {
        Card,
        Table
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDebts();
        await JSRuntime.InvokeVoidAsync("initializeParticles");
    }

    private async Task LoadDebts()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            allDebts = (await DebtService.GetActiveDebtsAsync()).ToList();
            ApplyFiltersAndSort();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading debts: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFiltersAndSort()
    {
        var query = allDebts.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(d => 
                d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (d.Creditor?.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (d.AccountNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Apply debt type filter
        if (!string.IsNullOrEmpty(selectedDebtType) && Enum.TryParse<DebtType>(selectedDebtType, out var debtType))
        {
            query = query.Where(d => d.DebtType == debtType);
        }

        // Apply priority filter
        if (!string.IsNullOrEmpty(selectedPriority) && Enum.TryParse<DebtPriority>(selectedPriority, out var priority))
        {
            query = query.Where(d => d.Priority == priority);
        }

        // Apply sorting
        query = sortBy switch
        {
            "name" => query.OrderBy(d => d.Name),
            "balance" => query.OrderByDescending(d => d.CurrentBalance),
            "payment" => query.OrderByDescending(d => d.MinimumPayment),
            "interest" => query.OrderByDescending(d => d.InterestRate ?? 0),
            "priority" => query.OrderBy(d => d.Priority),
            "duedate" => query.OrderBy(d => d.NextPaymentDue ?? DateTime.MaxValue),
            _ => query.OrderBy(d => d.Name)
        };

        filteredDebts = query.ToList();
        StateHasChanged();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFiltersAndSort();
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        ApplyFiltersAndSort();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        ApplyFiltersAndSort();
    }

    private void SetViewMode(ViewMode mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private async Task RefreshDebts()
    {
        await LoadDebts();
    }

    private void ConfirmDeleteDebt(Debt debt)
    {
        debtToDelete = debt;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        debtToDelete = null;
        showDeleteModal = false;
    }

    private async Task DeleteDebt()
    {
        if (debtToDelete == null) return;

        isDeleting = true;
        
        try
        {
            await DebtService.DeleteDebtAsync(debtToDelete.Id);
            await LoadDebts();
            CancelDelete();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting debt: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
        }
    }

    private string GetDebtTypeColor(DebtType debtType)
    {
        return debtType switch
        {
            DebtType.CreditCard => "bg-red-500",
            DebtType.PersonalLoan => "bg-orange-500",
            DebtType.Mortgage => "bg-blue-500",
            DebtType.AutoLoan => "bg-green-500",
            DebtType.StudentLoan => "bg-purple-500",
            DebtType.BusinessLoan => "bg-yellow-500",
            DebtType.Other => "bg-gray-500",
            _ => "bg-gray-500"
        };
    }

    private string GetPriorityColor(DebtPriority priority)
    {
        return priority switch
        {
            DebtPriority.High => "bg-red-500",
            DebtPriority.Medium => "bg-yellow-500",
            DebtPriority.Low => "bg-green-500",
            _ => "bg-gray-500"
        };
    }

    // Navigation methods
    private void NavigateToCreateDebt() => Navigation.NavigateTo("/debt-create");
    private void NavigateToEditDebt(string debtId) => Navigation.NavigateTo($"/debt-edit/{debtId}");
    private void NavigateToDebtDetails(string debtId) => Navigation.NavigateTo($"/debt-details/{debtId}");
    private void NavigateToDashboard() => Navigation.NavigateTo("/debt-dashboard");
}