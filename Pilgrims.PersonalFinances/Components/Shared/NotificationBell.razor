@using Pilgrims.PersonalFinances.Models
@using Pilgrims.PersonalFinances.Core.ViewModels
@using Pilgrims.PersonalFinances.Core.Messaging.Interfaces
@inject NotificationBellViewModel ViewModel
@inject NavigationManager Navigation
@implements IDisposable

<div class="relative">
    <!-- Notification Bell Button -->
    <button @onclick="ViewModel.ToggleDropdownCommand.Execute" 
            class="relative p-2 text-gray-600 dark:text-gray-300 hover:text-purple-600 dark:hover:text-purple-400 transition-colors rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M15 17h5l-5 5v-5zM9 7H4l5-5v5z M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        
        <!-- Notification Badge -->
        @if (ViewModel.UnreadCount > 0)
        {
            <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center animate-pulse">
                @(ViewModel.UnreadCount > 99 ? "99+" : ViewModel.UnreadCount.ToString())
            </span>
        }
    </button>

    <!-- Dropdown Menu -->
    @if (ViewModel.ShowDropdown)
    {
        <div class="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50 max-h-96 overflow-hidden">
            <!-- Header -->
            <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Notifications</h3>
                <div class="flex items-center space-x-2">
                    @if (ViewModel.UnreadCount > 0)
                    {
                        <button @onclick="() => ViewModel.MarkAllAsReadCommand.Execute(null)" 
                                class="text-xs text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300">
                            Mark all read
                        </button>
                    }
                    <button @onclick="ViewModel.ViewAllNotificationsCommand.Execute" 
                            class="text-xs text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-300">
                        View all
                    </button>
                </div>
            </div>

            <!-- Notifications List -->
            <div class="max-h-64 overflow-y-auto">
                @if (ViewModel.RecentNotifications.Any())
                {
                    @foreach (var notification in ViewModel.RecentNotifications.Take(5))
                    {
                        <div class="px-4 py-3 border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer @(notification.IsRead ? "opacity-75" : "")"
                             @onclick="async () => await ViewModel.HandleNotificationClickCommand.ExecuteAsync(notification)">
                            <div class="flex items-start space-x-3">
                                <!-- Icon -->
                                <div class="flex-shrink-0 p-1 rounded-full @GetNotificationIconBg(notification.NotificationType)">
                                    @((MarkupString)ViewModel.GetNotificationIcon(notification.NotificationType))
                                </div>
                                
                                <!-- Content -->
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-center space-x-2">
                                        <p class="text-sm font-medium text-gray-900 dark:text-white truncate @(notification.IsRead ? "" : "font-bold")">
                                            @notification.Title
                                        </p>
                                        @if (!notification.IsRead)
                                        {
                                            <span class="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0"></span>
                                        }
                                    </div>
                                    <p class="text-xs text-gray-600 dark:text-gray-400 truncate">@notification.Message</p>
                                    <p class="text-xs text-gray-500 dark:text-gray-500 mt-1">@ViewModel.GetRelativeTime(notification.ScheduledDate)</p>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="px-4 py-8 text-center">
                        <div class="text-4xl mb-2">ðŸ”•</div>
                        <p class="text-sm text-gray-600 dark:text-gray-400">No notifications</p>
                    </div>
                }
            </div>

            <!-- Footer -->
            @if (ViewModel.RecentNotifications.Count > 5)
            {
                <div class="px-4 py-3 border-t border-gray-200 dark:border-gray-700 text-center">
                    <button @onclick="@(() => ViewModel.ViewAllNotificationsCommand.Execute(null))" 
                            class="text-sm text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300">
                        View @(ViewModel.RecentNotifications.Count - 5) more notifications
                    </button>
                </div>
            }
        </div>
    }
</div>

<!-- Overlay to close dropdown -->
@if (ViewModel.ShowDropdown)
{
    <div class="fixed inset-0 z-40" @onclick="() => ViewModel.ToggleDropdownCommand.Execute(null)"></div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitializeCommand.ExecuteAsync(null);
    }

    private string GetNotificationIconBg(Pilgrims.PersonalFinances.Models.Enums.AppNotificationType type)
    {
        return type switch
        {
            Pilgrims.PersonalFinances.Models.Enums.AppNotificationType.BillReminder => "bg-blue-100 text-blue-600",
            Pilgrims.PersonalFinances.Models.Enums.AppNotificationType.BudgetAlert => "bg-red-100 text-red-600",
            Pilgrims.PersonalFinances.Models.Enums.AppNotificationType.DebtPayment => "bg-yellow-100 text-yellow-600",
            Pilgrims.PersonalFinances.Models.Enums.AppNotificationType.IncomeExpectation => "bg-green-100 text-green-600",
            Pilgrims.PersonalFinances.Models.Enums.AppNotificationType.ReconciliationReminder => "bg-purple-100 text-purple-600",
            Pilgrims.PersonalFinances.Models.Enums.AppNotificationType.SystemAlert => "bg-purple-100 text-purple-600",
            _ => "bg-gray-100 text-gray-600"
        };
    }

    public void Dispose()
    {
        ViewModel?.Dispose();
    }
}