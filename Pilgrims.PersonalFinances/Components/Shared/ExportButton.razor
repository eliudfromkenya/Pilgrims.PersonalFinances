@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject IExportService ExportService

<div class="relative inline-block">
    <button @onclick="ToggleDropdown" 
            class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        Export
        <svg class="w-4 h-4 ml-2 transition-transform duration-200 @(isDropdownOpen ? "rotate-180" : "")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
    </button>

    @if (isDropdownOpen)
    {
        <div class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
            <div class="py-1">
                <button @onclick='() => ExportAs("pdf")' 
                        class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150">
                    <svg class="w-4 h-4 mr-3 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path>
                    </svg>
                    Export as PDF
                </button>
                
                <button @onclick='() => ExportAs("csv")' 
                        class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150">
                    <svg class="w-4 h-4 mr-3 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                    Export as CSV
                </button>
                
                <button @onclick='() => ExportAs("image")' 
                        class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150">
                    <svg class="w-4 h-4 mr-3 text-purple-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                    </svg>
                    Export as Image
                </button>
                
                <div class="border-t border-gray-100 my-1"></div>
                
                <button @onclick="PrintReport" 
                        class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150">
                    <svg class="w-4 h-4 mr-3 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M5 4v3H4a2 2 0 00-2 2v3a2 2 0 002 2h1v2a2 2 0 002 2h6a2 2 0 002-2v-2h1a2 2 0 002-2V9a2 2 0 00-2-2h-1V4a2 2 0 00-2-2H7a2 2 0 00-2 2zm8 0H7v3h6V4zM5 14a1 1 0 011-1h8a1 1 0 011 1v2H5v-2z" clip-rule="evenodd"></path>
                    </svg>
                    Print Report
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string ReportType { get; set; } = "";
    [Parameter] public object? ReportData { get; set; }
    [Parameter] public string ElementId { get; set; } = "";
    [Parameter] public string FileName { get; set; } = "report";

    private bool isDropdownOpen = false;
    private bool isExporting = false;

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private async Task ExportAs(string format)
    {
        if (isExporting) return;
        
        isDropdownOpen = false;
        isExporting = true;

        try
        {
            var fileName = $"{FileName}_{DateTime.Now:yyyyMMdd_HHmmss}";
            
            switch (format.ToLower())
            {
                case "pdf":
                    await ExportService.ExportToPdfAsync(ReportType, ReportData, $"{fileName}.pdf");
                    break;
                case "csv":
                    await ExportService.ExportToCsvAsync(ReportType, ReportData, $"{fileName}.csv");
                    break;
                case "image":
                    await ExportService.ExportToImageAsync(ElementId, $"{fileName}.png");
                    break;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Export failed: {ex.Message}", "error");
        }
        finally
        {
            isExporting = false;
        }
    }

    private async Task PrintReport()
    {
        isDropdownOpen = false;
        
        try
        {
            if (!string.IsNullOrEmpty(ElementId))
            {
                await JSRuntime.InvokeVoidAsync("printElement", ElementId);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("window.print");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Print failed: {ex.Message}", "error");
        }
    }

    // Close dropdown when clicking outside
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                document.addEventListener('click', function(e) {
                    if (!e.target.closest('.relative')) {
                        DotNet.invokeMethodAsync('Pilgrims.PersonalFinances', 'CloseDropdown');
                    }
                });
            ");
        }
    }

    [JSInvokable]
    public static void CloseDropdown()
    {
        // This would need to be implemented with a service or state management
        // For now, we'll handle it with the click handler in the component
    }
}