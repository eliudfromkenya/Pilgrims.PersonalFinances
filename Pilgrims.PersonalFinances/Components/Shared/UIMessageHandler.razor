@using Microsoft.JSInterop
@using Pilgrims.PersonalFinances.Core.Messaging.Interfaces
@using Pilgrims.PersonalFinances.Core.Messaging.Messages
@inject IJSRuntime JSRuntime
@inject IMessagingService MessagingService
@inject IJsInteropInitializationService JsInit
@implements IDisposable

@* This component handles UI messages and executes JavaScript operations *@

@code {
    protected override async Task OnInitializedAsync()
    {
        // Register to UI messages
        MessagingService.Register<ShowAlertMessage>(this, HandleAlertMessage);
        MessagingService.Register<ShowConfirmationMessage>(this, HandleConfirmationMessage);
        MessagingService.Register<DownloadFileMessage>(this, HandleDownloadFileMessage);
        MessagingService.Register<PrintMessage>(this, HandlePrintMessage);
        MessagingService.Register<InitializeJavaScriptMessage>(this, HandleInitializeJavaScriptMessage);
        MessagingService.Register<UpdateJavaScriptMessage>(this, HandleUpdateJavaScriptMessage);
        MessagingService.Register<LocalStorageMessage>(this, HandleLocalStorageMessage);
        MessagingService.Register<ToggleDarkModeMessage>(this, HandleToggleDarkModeMessage);
        MessagingService.Register<ConsoleLogMessage>(this, HandleConsoleLogMessage);

        await base.OnInitializedAsync();
    }

    // Alert
    private void HandleAlertMessage(object recipient, ShowAlertMessage message)
    {
        _ = HandleAlertMessageAsync(recipient, message);
    }
    private async Task HandleAlertMessageAsync(object recipient, ShowAlertMessage message)
    {
        await JsInit.WaitReadyAsync();
        var result = await JSRuntime.InvokeAsync<bool>("showAlertToast", message.Title, message.Message, "OK");
        message.OnResult?.Invoke(result);
    }

    // Confirmation
    private void HandleConfirmationMessage(object recipient, ShowConfirmationMessage message)
    {
        _ = HandleConfirmationMessageAsync(recipient, message);
    }
    private async Task HandleConfirmationMessageAsync(object recipient, ShowConfirmationMessage message)
    {
        await JsInit.WaitReadyAsync();
        var result = await JSRuntime.InvokeAsync<bool>("showConfirmationToast", message.Title, message.Message, message.ConfirmText, message.CancelText);
        message.OnResult?.Invoke(result);
    }

    // Download
    private void HandleDownloadFileMessage(object recipient, DownloadFileMessage message)
    {
        _ = HandleDownloadFileMessageAsync(recipient, message);
    }
    private async Task HandleDownloadFileMessageAsync(object recipient, DownloadFileMessage message)
    {
        await JsInit.WaitReadyAsync();
        var base64Data = Convert.ToBase64String(message.FileData);
        await JSRuntime.InvokeVoidAsync("downloadFile", message.FileName, base64Data);
    }

    // Print
    private void HandlePrintMessage(object recipient, PrintMessage message)
    {
        _ = HandlePrintMessageAsync(recipient, message);
    }
    private async Task HandlePrintMessageAsync(object recipient, PrintMessage message)
    {
        await JsInit.WaitReadyAsync();
        if (message.PrintEntirePage)
        {
            await JSRuntime.InvokeVoidAsync("window.print");
        }
        else if (!string.IsNullOrEmpty(message.ElementId))
        {
            await JSRuntime.InvokeVoidAsync("printElement", message.ElementId);
        }
    }

    // Initialize JS component
    private void HandleInitializeJavaScriptMessage(object recipient, InitializeJavaScriptMessage message)
    {
        _ = HandleInitializeJavaScriptMessageAsync(recipient, message);
    }
    private async Task HandleInitializeJavaScriptMessageAsync(object recipient, InitializeJavaScriptMessage message)
    {
        await JsInit.WaitReadyAsync();
        try
        {
            switch (message.ComponentType.ToLower())
            {
                case "particles":
                    await JSRuntime.InvokeVoidAsync("initializeParticles");
                    break;
                case "piechart":
                    await JSRuntime.InvokeVoidAsync("initializePieChart", message.ElementId, message.Data);
                    break;
                case "linechart":
                    await JSRuntime.InvokeVoidAsync("initializeLineChart", message.ElementId, message.Data);
                    break;
                case "payoffchart":
                    await JSRuntime.InvokeVoidAsync("initializePayoffChart", message.ElementId, message.Data);
                    break;
                case "performancechart":
                    await JSRuntime.InvokeVoidAsync("initializePerformanceChart", message.ElementId, message.Data);
                    break;
                case "variancechart":
                    await JSRuntime.InvokeVoidAsync("initializeVarianceChart", message.ElementId, message.Data);
                    break;
                default:
                    await JSRuntime.InvokeVoidAsync($"initialize{message.ComponentType}", message.ElementId, message.Data);
                    break;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error initializing {message.ComponentType}:", ex.Message);
        }
    }

    // Update JS component
    private void HandleUpdateJavaScriptMessage(object recipient, UpdateJavaScriptMessage message)
    {
        _ = HandleUpdateJavaScriptMessageAsync(recipient, message);
    }
    private async Task HandleUpdateJavaScriptMessageAsync(object recipient, UpdateJavaScriptMessage message)
    {
        await JsInit.WaitReadyAsync();
        try
        {
            switch (message.ComponentType.ToLower())
            {
                case "performancechart":
                    await JSRuntime.InvokeVoidAsync("updatePerformanceChart", message.ElementId, message.Data);
                    break;
                case "variancechart":
                    await JSRuntime.InvokeVoidAsync("updateVarianceChart", message.ElementId, message.Data);
                    break;
                default:
                    await JSRuntime.InvokeVoidAsync($"update{message.ComponentType}", message.ElementId, message.Data);
                    break;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error updating {message.ComponentType}:", ex.Message);
        }
    }

    // Local storage
    private void HandleLocalStorageMessage(object recipient, LocalStorageMessage message)
    {
        _ = HandleLocalStorageMessageAsync(recipient, message);
    }
    private async Task HandleLocalStorageMessageAsync(object recipient, LocalStorageMessage message)
    {
        await JsInit.WaitReadyAsync();
        try
        {
            switch (message.Action)
            {
                case LocalStorageMessage.Operation.Set:
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", message.Key, message.Value);
                    break;
                case LocalStorageMessage.Operation.Get:
                    var value = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", message.Key);
                    message.OnResult?.Invoke(value);
                    break;
                case LocalStorageMessage.Operation.Remove:
                    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", message.Key);
                    break;
                case LocalStorageMessage.Operation.Clear:
                    await JSRuntime.InvokeVoidAsync("localStorage.clear");
                    break;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error with localStorage operation:", ex.Message);
        }
    }

    // Dark mode toggle
    private void HandleToggleDarkModeMessage(object recipient, ToggleDarkModeMessage message)
    {
        _ = HandleToggleDarkModeMessageAsync(recipient, message);
    }
    private async Task HandleToggleDarkModeMessageAsync(object recipient, ToggleDarkModeMessage message)
    {
        await JsInit.WaitReadyAsync();
        try
        {
            const string appContainer = "app";
            if (message.IsDarkMode)
            {
                await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{appContainer}')?.classList.add('dark')");
                await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.add('dark')");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{appContainer}')?.classList.remove('dark')");
                await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.remove('dark')");
            }
            // Sync Toastr theme after toggling dark mode
            await JSRuntime.InvokeVoidAsync("updateToastrTheme");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error toggling dark mode:", ex.Message);
        }
    }

    // Console logging
    private void HandleConsoleLogMessage(object recipient, ConsoleLogMessage message)
    {
        _ = HandleConsoleLogMessageAsync(recipient, message);
    }
    private async Task HandleConsoleLogMessageAsync(object recipient, ConsoleLogMessage message)
    {
        await JsInit.WaitReadyAsync();
        try
        {
            var method = message.Level.ToString().ToLower();
            if (message.Args?.Length > 0)
            {
                await JSRuntime.InvokeVoidAsync($"console.{method}", message.Message, message.Args);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync($"console.{method}", message.Message);
            }
        }
        catch
        {
            // Ignore console logging errors
        }
    }

    public void Dispose()
    {
        // Unregister from messaging service
        MessagingService.Unregister<ShowAlertMessage>(this);
        MessagingService.Unregister<ShowConfirmationMessage>(this);
        MessagingService.Unregister<DownloadFileMessage>(this);
        MessagingService.Unregister<PrintMessage>(this);
        MessagingService.Unregister<InitializeJavaScriptMessage>(this);
        MessagingService.Unregister<UpdateJavaScriptMessage>(this);
        MessagingService.Unregister<LocalStorageMessage>(this);
        MessagingService.Unregister<ToggleDarkModeMessage>(this);
        MessagingService.Unregister<ConsoleLogMessage>(this);
    }
}